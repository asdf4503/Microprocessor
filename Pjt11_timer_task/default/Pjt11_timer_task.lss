
Pjt11_timer_task.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000d0  00800200  000018d6  0000196a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000018d6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000013d  008002d0  008002d0  00001a3a  2**0
                  ALLOC
  3 .stab         0000117c  00000000  00000000  00001a3c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000039d  00000000  00000000  00002bb8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000002c8  00000000  00000000  00002f58  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002806  00000000  00000000  00003220  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000012f6  00000000  00000000  00005a26  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001536  00000000  00000000  00006d1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000834  00000000  00000000  00008254  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007dc  00000000  00000000  00008a88  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001edf  00000000  00000000  00009264  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b8  00000000  00000000  0000b143  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
       4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
       8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
       c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      10:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      14:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      18:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      1c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      20:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      24:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      28:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      2c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      30:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      34:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      38:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      3c:	0c 94 e8 04 	jmp	0x9d0	; 0x9d0 <__vector_15>
      40:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      44:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      48:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      4c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      50:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      54:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      58:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      5c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      60:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      64:	0c 94 94 06 	jmp	0xd28	; 0xd28 <__vector_25>
      68:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      6c:	0c 94 65 06 	jmp	0xcca	; 0xcca <__vector_27>
      70:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      74:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      78:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      7c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      80:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      84:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      88:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      8c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      90:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      94:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      98:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      9c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      a0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      a4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      a8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      ac:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      b0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      b4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      b8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      bc:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      c0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      c4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      c8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      cc:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      d0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      d4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      d8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      dc:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      e0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	12 e0       	ldi	r17, 0x02	; 2
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	e6 ed       	ldi	r30, 0xD6	; 214
      fc:	f8 e1       	ldi	r31, 0x18	; 24
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	a0 3d       	cpi	r26, 0xD0	; 208
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>
     10e:	1b be       	out	0x3b, r1	; 59

00000110 <__do_clear_bss>:
     110:	14 e0       	ldi	r17, 0x04	; 4
     112:	a0 ed       	ldi	r26, 0xD0	; 208
     114:	b2 e0       	ldi	r27, 0x02	; 2
     116:	01 c0       	rjmp	.+2      	; 0x11a <.do_clear_bss_start>

00000118 <.do_clear_bss_loop>:
     118:	1d 92       	st	X+, r1

0000011a <.do_clear_bss_start>:
     11a:	ad 30       	cpi	r26, 0x0D	; 13
     11c:	b1 07       	cpc	r27, r17
     11e:	e1 f7       	brne	.-8      	; 0x118 <.do_clear_bss_loop>
     120:	0e 94 ff 06 	call	0xdfe	; 0xdfe <main>
     124:	0c 94 69 0c 	jmp	0x18d2	; 0x18d2 <_exit>

00000128 <__bad_interrupt>:
     128:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012c <app_list>:
#include <string.h>
#include "link.h"
#include "app.h"
#include "timer_task.h"

void app_list(char *ap) {
     12c:	ef 92       	push	r14
     12e:	ff 92       	push	r15
     130:	1f 93       	push	r17
     132:	cf 93       	push	r28
     134:	df 93       	push	r29
     136:	cd b7       	in	r28, 0x3d	; 61
     138:	de b7       	in	r29, 0x3e	; 62
     13a:	28 97       	sbiw	r28, 0x08	; 8
     13c:	0f b6       	in	r0, 0x3f	; 63
     13e:	f8 94       	cli
     140:	de bf       	out	0x3e, r29	; 62
     142:	0f be       	out	0x3f, r0	; 63
     144:	cd bf       	out	0x3d, r28	; 61
	char buf[8], how = 'a';
	struct node *np;

	if(ap)	how = *ap;
     146:	00 97       	sbiw	r24, 0x00	; 0
     148:	19 f0       	breq	.+6      	; 0x150 <app_list+0x24>
     14a:	fc 01       	movw	r30, r24
     14c:	10 81       	ld	r17, Z
     14e:	01 c0       	rjmp	.+2      	; 0x152 <app_list+0x26>
#include "link.h"
#include "app.h"
#include "timer_task.h"

void app_list(char *ap) {
	char buf[8], how = 'a';
     150:	11 e6       	ldi	r17, 0x61	; 97
	struct node *np;

	if(ap)	how = *ap;
	while(1) {
		printf("> ");
     152:	80 e0       	ldi	r24, 0x00	; 0
     154:	e8 2e       	mov	r14, r24
     156:	82 e0       	ldi	r24, 0x02	; 2
     158:	f8 2e       	mov	r15, r24
     15a:	0f 92       	push	r0
     15c:	0f 92       	push	r0
     15e:	ed b7       	in	r30, 0x3d	; 61
     160:	fe b7       	in	r31, 0x3e	; 62
     162:	f2 82       	std	Z+2, r15	; 0x02
     164:	e1 82       	std	Z+1, r14	; 0x01
     166:	0e 94 3b 09 	call	0x1276	; 0x1276 <printf>
		if(fgets(buf, 8, stdin) == NULL)
     16a:	0f 90       	pop	r0
     16c:	0f 90       	pop	r0
     16e:	40 91 07 04 	lds	r20, 0x0407
     172:	50 91 08 04 	lds	r21, 0x0408
     176:	ce 01       	movw	r24, r28
     178:	01 96       	adiw	r24, 0x01	; 1
     17a:	68 e0       	ldi	r22, 0x08	; 8
     17c:	70 e0       	ldi	r23, 0x00	; 0
     17e:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <fgets>
     182:	00 97       	sbiw	r24, 0x00	; 0
     184:	c9 f0       	breq	.+50     	; 0x1b8 <app_list+0x8c>
			break;
		np = get_node();
     186:	0e 94 5f 01 	call	0x2be	; 0x2be <get_node>
		np->data = buf[0];
     18a:	29 81       	ldd	r18, Y+1	; 0x01
     18c:	fc 01       	movw	r30, r24
     18e:	20 83       	st	Z, r18
     190:	11 82       	std	Z+1, r1	; 0x01
		switch(how) {
     192:	18 36       	cpi	r17, 0x68	; 104
     194:	29 f0       	breq	.+10     	; 0x1a0 <app_list+0x74>
     196:	14 37       	cpi	r17, 0x74	; 116
     198:	31 f0       	breq	.+12     	; 0x1a6 <app_list+0x7a>
     19a:	14 36       	cpi	r17, 0x64	; 100
     19c:	51 f4       	brne	.+20     	; 0x1b2 <app_list+0x86>
     19e:	06 c0       	rjmp	.+12     	; 0x1ac <app_list+0x80>
			case 'h' 	: insert_node_head(np);	break;
     1a0:	0e 94 67 01 	call	0x2ce	; 0x2ce <insert_node_head>
     1a4:	da cf       	rjmp	.-76     	; 0x15a <app_list+0x2e>
			case 't' 	: insert_node_tail(np);	break;
     1a6:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <insert_node_tail>
     1aa:	d7 cf       	rjmp	.-82     	; 0x15a <app_list+0x2e>
			case 'd' 	: insert_node_desc(np);	break;
     1ac:	0e 94 ca 01 	call	0x394	; 0x394 <insert_node_desc>
     1b0:	d4 cf       	rjmp	.-88     	; 0x15a <app_list+0x2e>
			default  	: insert_node_ascn(np);
     1b2:	0e 94 93 01 	call	0x326	; 0x326 <insert_node_ascn>
     1b6:	d1 cf       	rjmp	.-94     	; 0x15a <app_list+0x2e>
		}
	}
	tour_list();
     1b8:	0e 94 01 02 	call	0x402	; 0x402 <tour_list>
	free_list();
     1bc:	0e 94 2e 02 	call	0x45c	; 0x45c <free_list>
}
     1c0:	28 96       	adiw	r28, 0x08	; 8
     1c2:	0f b6       	in	r0, 0x3f	; 63
     1c4:	f8 94       	cli
     1c6:	de bf       	out	0x3e, r29	; 62
     1c8:	0f be       	out	0x3f, r0	; 63
     1ca:	cd bf       	out	0x3d, r28	; 61
     1cc:	df 91       	pop	r29
     1ce:	cf 91       	pop	r28
     1d0:	1f 91       	pop	r17
     1d2:	ff 90       	pop	r15
     1d4:	ef 90       	pop	r14
     1d6:	08 95       	ret

000001d8 <app_timer>:

void app_timer(char *ap) {
     1d8:	0f 93       	push	r16
     1da:	1f 93       	push	r17
     1dc:	cf 93       	push	r28
     1de:	df 93       	push	r29
     1e0:	cd b7       	in	r28, 0x3d	; 61
     1e2:	de b7       	in	r29, 0x3e	; 62
     1e4:	62 97       	sbiw	r28, 0x12	; 18
     1e6:	0f b6       	in	r0, 0x3f	; 63
     1e8:	f8 94       	cli
     1ea:	de bf       	out	0x3e, r29	; 62
     1ec:	0f be       	out	0x3f, r0	; 63
     1ee:	cd bf       	out	0x3d, r28	; 61
	char		buf[8];
	int			ms;
	struct task tsk;

	while(1) {
		printf(">>");
     1f0:	03 e0       	ldi	r16, 0x03	; 3
     1f2:	12 e0       	ldi	r17, 0x02	; 2
     1f4:	0f 92       	push	r0
     1f6:	0f 92       	push	r0
     1f8:	ed b7       	in	r30, 0x3d	; 61
     1fa:	fe b7       	in	r31, 0x3e	; 62
     1fc:	12 83       	std	Z+2, r17	; 0x02
     1fe:	01 83       	std	Z+1, r16	; 0x01
     200:	0e 94 3b 09 	call	0x1276	; 0x1276 <printf>
		if(fgets(buf, 8, stdin) == NULL || (ms = atoi(buf)) == 0)
     204:	0f 90       	pop	r0
     206:	0f 90       	pop	r0
     208:	40 91 07 04 	lds	r20, 0x0407
     20c:	50 91 08 04 	lds	r21, 0x0408
     210:	ce 01       	movw	r24, r28
     212:	01 96       	adiw	r24, 0x01	; 1
     214:	68 e0       	ldi	r22, 0x08	; 8
     216:	70 e0       	ldi	r23, 0x00	; 0
     218:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <fgets>
     21c:	00 97       	sbiw	r24, 0x00	; 0
     21e:	61 f0       	breq	.+24     	; 0x238 <app_timer+0x60>
     220:	ce 01       	movw	r24, r28
     222:	01 96       	adiw	r24, 0x01	; 1
     224:	0e 94 7f 08 	call	0x10fe	; 0x10fe <atoi>
     228:	bc 01       	movw	r22, r24
     22a:	00 97       	sbiw	r24, 0x00	; 0
     22c:	29 f0       	breq	.+10     	; 0x238 <app_timer+0x60>
			break;

		insert_timer(&tsk, ms);
     22e:	ce 01       	movw	r24, r28
     230:	09 96       	adiw	r24, 0x09	; 9
     232:	0e 94 a7 03 	call	0x74e	; 0x74e <insert_timer>
	}
     236:	de cf       	rjmp	.-68     	; 0x1f4 <app_timer+0x1c>
	tour_timer();
     238:	0e 94 1a 04 	call	0x834	; 0x834 <tour_timer>
	free_timer();
     23c:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <free_timer>
}
     240:	62 96       	adiw	r28, 0x12	; 18
     242:	0f b6       	in	r0, 0x3f	; 63
     244:	f8 94       	cli
     246:	de bf       	out	0x3e, r29	; 62
     248:	0f be       	out	0x3f, r0	; 63
     24a:	cd bf       	out	0x3d, r28	; 61
     24c:	df 91       	pop	r29
     24e:	cf 91       	pop	r28
     250:	1f 91       	pop	r17
     252:	0f 91       	pop	r16
     254:	08 95       	ret

00000256 <app_add>:

void app_add(char *ap) {
     256:	cf 93       	push	r28
     258:	df 93       	push	r29
	int t1, t2;
    if (ap != NULL) {
     25a:	00 97       	sbiw	r24, 0x00	; 0
     25c:	49 f1       	breq	.+82     	; 0x2b0 <app_add+0x5a>
        char *bp = strtok(ap, " ");
     25e:	66 e0       	ldi	r22, 0x06	; 6
     260:	72 e0       	ldi	r23, 0x02	; 2
     262:	0e 94 9d 08 	call	0x113a	; 0x113a <strtok>
        if (bp != NULL) {
     266:	00 97       	sbiw	r24, 0x00	; 0
     268:	01 f1       	breq	.+64     	; 0x2aa <app_add+0x54>
            t1 = atoi(bp); 
     26a:	0e 94 7f 08 	call	0x10fe	; 0x10fe <atoi>
     26e:	ec 01       	movw	r28, r24
            bp = strtok(NULL, " "); 
     270:	80 e0       	ldi	r24, 0x00	; 0
     272:	90 e0       	ldi	r25, 0x00	; 0
     274:	66 e0       	ldi	r22, 0x06	; 6
     276:	72 e0       	ldi	r23, 0x02	; 2
     278:	0e 94 9d 08 	call	0x113a	; 0x113a <strtok>
            if (bp != NULL) {
     27c:	00 97       	sbiw	r24, 0x00	; 0
     27e:	c1 f0       	breq	.+48     	; 0x2b0 <app_add+0x5a>
                t2 = atoi(bp); 
     280:	0e 94 7f 08 	call	0x10fe	; 0x10fe <atoi>
                printf("add = %d\n", t1 + t2); 
     284:	00 d0       	rcall	.+0      	; 0x286 <app_add+0x30>
     286:	0f 92       	push	r0
     288:	28 e0       	ldi	r18, 0x08	; 8
     28a:	32 e0       	ldi	r19, 0x02	; 2
     28c:	ed b7       	in	r30, 0x3d	; 61
     28e:	fe b7       	in	r31, 0x3e	; 62
     290:	32 83       	std	Z+2, r19	; 0x02
     292:	21 83       	std	Z+1, r18	; 0x01
     294:	c8 0f       	add	r28, r24
     296:	d9 1f       	adc	r29, r25
     298:	d4 83       	std	Z+4, r29	; 0x04
     29a:	c3 83       	std	Z+3, r28	; 0x03
     29c:	0e 94 3b 09 	call	0x1276	; 0x1276 <printf>
     2a0:	0f 90       	pop	r0
     2a2:	0f 90       	pop	r0
     2a4:	0f 90       	pop	r0
     2a6:	0f 90       	pop	r0
     2a8:	07 c0       	rjmp	.+14     	; 0x2b8 <app_add+0x62>
            } else {
                printf("error...\n"); 
            }
        } else {
            printf("error\n"); 
     2aa:	8b e1       	ldi	r24, 0x1B	; 27
     2ac:	92 e0       	ldi	r25, 0x02	; 2
     2ae:	02 c0       	rjmp	.+4      	; 0x2b4 <app_add+0x5e>
        }
    } else {
        printf("error...\n");
     2b0:	82 e1       	ldi	r24, 0x12	; 18
     2b2:	92 e0       	ldi	r25, 0x02	; 2
     2b4:	0e 94 54 09 	call	0x12a8	; 0x12a8 <puts>
    }
}
     2b8:	df 91       	pop	r29
     2ba:	cf 91       	pop	r28
     2bc:	08 95       	ret

000002be <get_node>:
struct node *Head = NULL;

struct node *get_node() {
	struct node *cp;

	cp = (struct node *)malloc(sizeof(struct node));
     2be:	84 e0       	ldi	r24, 0x04	; 4
     2c0:	90 e0       	ldi	r25, 0x00	; 0
     2c2:	0e 94 50 07 	call	0xea0	; 0xea0 <malloc>
	return(cp);
}
     2c6:	08 95       	ret

000002c8 <free_node>:


void free_node(struct node *np) {
	free(np);
     2c8:	0e 94 e6 07 	call	0xfcc	; 0xfcc <free>
}
     2cc:	08 95       	ret

000002ce <insert_node_head>:

void insert_node_head(struct node *np) {
     2ce:	fc 01       	movw	r30, r24
	if(!Head) {
     2d0:	80 91 d0 02 	lds	r24, 0x02D0
     2d4:	90 91 d1 02 	lds	r25, 0x02D1
     2d8:	00 97       	sbiw	r24, 0x00	; 0
     2da:	39 f4       	brne	.+14     	; 0x2ea <insert_node_head+0x1c>
		Head = np;
     2dc:	f0 93 d1 02 	sts	0x02D1, r31
     2e0:	e0 93 d0 02 	sts	0x02D0, r30
		np->link = NULL;
     2e4:	13 82       	std	Z+3, r1	; 0x03
     2e6:	12 82       	std	Z+2, r1	; 0x02
     2e8:	08 95       	ret
	} else {
		np->link = Head;
     2ea:	93 83       	std	Z+3, r25	; 0x03
     2ec:	82 83       	std	Z+2, r24	; 0x02
		Head = np;
     2ee:	f0 93 d1 02 	sts	0x02D1, r31
     2f2:	e0 93 d0 02 	sts	0x02D0, r30
     2f6:	08 95       	ret

000002f8 <insert_node_tail>:
}

void insert_node_tail(struct node *np) {
	struct node *cp;

	if(!Head)
     2f8:	e0 91 d0 02 	lds	r30, 0x02D0
     2fc:	f0 91 d1 02 	lds	r31, 0x02D1
     300:	30 97       	sbiw	r30, 0x00	; 0
     302:	31 f4       	brne	.+12     	; 0x310 <insert_node_tail+0x18>
		Head = np;
     304:	90 93 d1 02 	sts	0x02D1, r25
     308:	80 93 d0 02 	sts	0x02D0, r24
     30c:	08 c0       	rjmp	.+16     	; 0x31e <insert_node_tail+0x26>
	else {
		for(cp = Head;cp->link != NULL;cp = cp->link)
     30e:	f9 01       	movw	r30, r18
     310:	22 81       	ldd	r18, Z+2	; 0x02
     312:	33 81       	ldd	r19, Z+3	; 0x03
     314:	21 15       	cp	r18, r1
     316:	31 05       	cpc	r19, r1
     318:	d1 f7       	brne	.-12     	; 0x30e <insert_node_tail+0x16>
			;
		cp->link = np;
     31a:	93 83       	std	Z+3, r25	; 0x03
     31c:	82 83       	std	Z+2, r24	; 0x02
	}
	np->link = NULL;
     31e:	fc 01       	movw	r30, r24
     320:	13 82       	std	Z+3, r1	; 0x03
     322:	12 82       	std	Z+2, r1	; 0x02
}
     324:	08 95       	ret

00000326 <insert_node_ascn>:

void insert_node_ascn(struct node *np) {
     326:	cf 93       	push	r28
     328:	df 93       	push	r29
     32a:	fc 01       	movw	r30, r24
	struct node *cp, *pp;
	if(!Head) {
     32c:	20 91 d0 02 	lds	r18, 0x02D0
     330:	30 91 d1 02 	lds	r19, 0x02D1
     334:	21 15       	cp	r18, r1
     336:	31 05       	cpc	r19, r1
     338:	31 f0       	breq	.+12     	; 0x346 <insert_node_ascn+0x20>
		Head = np;
		np->link = NULL;
	}
	else {
		for(cp = Head, pp = NULL;cp != NULL && cp->data < np->data;pp = cp, cp = cp->link)
     33a:	40 81       	ld	r20, Z
     33c:	51 81       	ldd	r21, Z+1	; 0x01
     33e:	d9 01       	movw	r26, r18
     340:	c0 e0       	ldi	r28, 0x00	; 0
     342:	d0 e0       	ldi	r29, 0x00	; 0
     344:	0f c0       	rjmp	.+30     	; 0x364 <insert_node_ascn+0x3e>
}

void insert_node_ascn(struct node *np) {
	struct node *cp, *pp;
	if(!Head) {
		Head = np;
     346:	90 93 d1 02 	sts	0x02D1, r25
     34a:	80 93 d0 02 	sts	0x02D0, r24
		np->link = NULL;
     34e:	13 82       	std	Z+3, r1	; 0x03
     350:	12 82       	std	Z+2, r1	; 0x02
     352:	1d c0       	rjmp	.+58     	; 0x38e <insert_node_ascn+0x68>
	}
	else {
		for(cp = Head, pp = NULL;cp != NULL && cp->data < np->data;pp = cp, cp = cp->link)
     354:	12 96       	adiw	r26, 0x02	; 2
     356:	8d 91       	ld	r24, X+
     358:	9c 91       	ld	r25, X
     35a:	13 97       	sbiw	r26, 0x03	; 3
     35c:	ed 01       	movw	r28, r26
     35e:	00 97       	sbiw	r24, 0x00	; 0
     360:	39 f0       	breq	.+14     	; 0x370 <insert_node_ascn+0x4a>
     362:	dc 01       	movw	r26, r24
     364:	8d 91       	ld	r24, X+
     366:	9c 91       	ld	r25, X
     368:	11 97       	sbiw	r26, 0x01	; 1
     36a:	84 17       	cp	r24, r20
     36c:	95 07       	cpc	r25, r21
     36e:	94 f3       	brlt	.-28     	; 0x354 <insert_node_ascn+0x2e>
			;
		if(pp == NULL) {
     370:	20 97       	sbiw	r28, 0x00	; 0
     372:	39 f4       	brne	.+14     	; 0x382 <insert_node_ascn+0x5c>
			np->link = Head;
     374:	33 83       	std	Z+3, r19	; 0x03
     376:	22 83       	std	Z+2, r18	; 0x02
			Head = np;
     378:	f0 93 d1 02 	sts	0x02D1, r31
     37c:	e0 93 d0 02 	sts	0x02D0, r30
     380:	06 c0       	rjmp	.+12     	; 0x38e <insert_node_ascn+0x68>
		} else {
			np->link = pp->link;
     382:	8a 81       	ldd	r24, Y+2	; 0x02
     384:	9b 81       	ldd	r25, Y+3	; 0x03
     386:	93 83       	std	Z+3, r25	; 0x03
     388:	82 83       	std	Z+2, r24	; 0x02
			pp->link = np;
     38a:	fb 83       	std	Y+3, r31	; 0x03
     38c:	ea 83       	std	Y+2, r30	; 0x02
		}
	}
}
     38e:	df 91       	pop	r29
     390:	cf 91       	pop	r28
     392:	08 95       	ret

00000394 <insert_node_desc>:

void insert_node_desc(struct node *np) {
     394:	cf 93       	push	r28
     396:	df 93       	push	r29
     398:	fc 01       	movw	r30, r24
	struct node *cp, *pp;
	if(!Head) {
     39a:	20 91 d0 02 	lds	r18, 0x02D0
     39e:	30 91 d1 02 	lds	r19, 0x02D1
     3a2:	21 15       	cp	r18, r1
     3a4:	31 05       	cpc	r19, r1
     3a6:	31 f0       	breq	.+12     	; 0x3b4 <insert_node_desc+0x20>
		Head = np;
		np->link = NULL;
	}
	else {
		for(cp = Head, pp = NULL;cp != NULL && cp->data < np->data;pp = cp, cp = cp->link)
     3a8:	40 81       	ld	r20, Z
     3aa:	51 81       	ldd	r21, Z+1	; 0x01
     3ac:	d9 01       	movw	r26, r18
     3ae:	c0 e0       	ldi	r28, 0x00	; 0
     3b0:	d0 e0       	ldi	r29, 0x00	; 0
     3b2:	0f c0       	rjmp	.+30     	; 0x3d2 <insert_node_desc+0x3e>
}

void insert_node_desc(struct node *np) {
	struct node *cp, *pp;
	if(!Head) {
		Head = np;
     3b4:	90 93 d1 02 	sts	0x02D1, r25
     3b8:	80 93 d0 02 	sts	0x02D0, r24
		np->link = NULL;
     3bc:	13 82       	std	Z+3, r1	; 0x03
     3be:	12 82       	std	Z+2, r1	; 0x02
     3c0:	1d c0       	rjmp	.+58     	; 0x3fc <insert_node_desc+0x68>
	}
	else {
		for(cp = Head, pp = NULL;cp != NULL && cp->data < np->data;pp = cp, cp = cp->link)
     3c2:	12 96       	adiw	r26, 0x02	; 2
     3c4:	8d 91       	ld	r24, X+
     3c6:	9c 91       	ld	r25, X
     3c8:	13 97       	sbiw	r26, 0x03	; 3
     3ca:	ed 01       	movw	r28, r26
     3cc:	00 97       	sbiw	r24, 0x00	; 0
     3ce:	39 f0       	breq	.+14     	; 0x3de <insert_node_desc+0x4a>
     3d0:	dc 01       	movw	r26, r24
     3d2:	8d 91       	ld	r24, X+
     3d4:	9c 91       	ld	r25, X
     3d6:	11 97       	sbiw	r26, 0x01	; 1
     3d8:	84 17       	cp	r24, r20
     3da:	95 07       	cpc	r25, r21
     3dc:	94 f3       	brlt	.-28     	; 0x3c2 <insert_node_desc+0x2e>
			;
		if(pp == NULL) {
     3de:	20 97       	sbiw	r28, 0x00	; 0
     3e0:	39 f4       	brne	.+14     	; 0x3f0 <insert_node_desc+0x5c>
			np->link = pp->link;
     3e2:	8a 81       	ldd	r24, Y+2	; 0x02
     3e4:	9b 81       	ldd	r25, Y+3	; 0x03
     3e6:	93 83       	std	Z+3, r25	; 0x03
     3e8:	82 83       	std	Z+2, r24	; 0x02
			pp->link = np;
     3ea:	fb 83       	std	Y+3, r31	; 0x03
     3ec:	ea 83       	std	Y+2, r30	; 0x02
     3ee:	06 c0       	rjmp	.+12     	; 0x3fc <insert_node_desc+0x68>
		} else {
			np->link = Head;
     3f0:	33 83       	std	Z+3, r19	; 0x03
     3f2:	22 83       	std	Z+2, r18	; 0x02
			Head = np;
     3f4:	f0 93 d1 02 	sts	0x02D1, r31
     3f8:	e0 93 d0 02 	sts	0x02D0, r30
		}
	}
}
     3fc:	df 91       	pop	r29
     3fe:	cf 91       	pop	r28
     400:	08 95       	ret

00000402 <tour_list>:

void tour_list() {
     402:	0f 93       	push	r16
     404:	1f 93       	push	r17
     406:	cf 93       	push	r28
     408:	df 93       	push	r29
	struct node *cp;

	printf("\n");
     40a:	8a e0       	ldi	r24, 0x0A	; 10
     40c:	90 e0       	ldi	r25, 0x00	; 0
     40e:	0e 94 4d 09 	call	0x129a	; 0x129a <putchar>
	for(cp = Head;cp != NULL;cp = cp->link)
     412:	c0 91 d0 02 	lds	r28, 0x02D0
     416:	d0 91 d1 02 	lds	r29, 0x02D1
		printf("-->%c ", cp->data);
     41a:	01 e2       	ldi	r16, 0x21	; 33
     41c:	12 e0       	ldi	r17, 0x02	; 2

void tour_list() {
	struct node *cp;

	printf("\n");
	for(cp = Head;cp != NULL;cp = cp->link)
     41e:	13 c0       	rjmp	.+38     	; 0x446 <tour_list+0x44>
		printf("-->%c ", cp->data);
     420:	00 d0       	rcall	.+0      	; 0x422 <tour_list+0x20>
     422:	0f 92       	push	r0
     424:	ed b7       	in	r30, 0x3d	; 61
     426:	fe b7       	in	r31, 0x3e	; 62
     428:	12 83       	std	Z+2, r17	; 0x02
     42a:	01 83       	std	Z+1, r16	; 0x01
     42c:	88 81       	ld	r24, Y
     42e:	99 81       	ldd	r25, Y+1	; 0x01
     430:	94 83       	std	Z+4, r25	; 0x04
     432:	83 83       	std	Z+3, r24	; 0x03
     434:	0e 94 3b 09 	call	0x1276	; 0x1276 <printf>

void tour_list() {
	struct node *cp;

	printf("\n");
	for(cp = Head;cp != NULL;cp = cp->link)
     438:	0a 80       	ldd	r0, Y+2	; 0x02
     43a:	db 81       	ldd	r29, Y+3	; 0x03
     43c:	c0 2d       	mov	r28, r0
     43e:	0f 90       	pop	r0
     440:	0f 90       	pop	r0
     442:	0f 90       	pop	r0
     444:	0f 90       	pop	r0
     446:	20 97       	sbiw	r28, 0x00	; 0
     448:	59 f7       	brne	.-42     	; 0x420 <tour_list+0x1e>
		printf("-->%c ", cp->data);

	printf("\n");
     44a:	8a e0       	ldi	r24, 0x0A	; 10
     44c:	90 e0       	ldi	r25, 0x00	; 0
     44e:	0e 94 4d 09 	call	0x129a	; 0x129a <putchar>
}
     452:	df 91       	pop	r29
     454:	cf 91       	pop	r28
     456:	1f 91       	pop	r17
     458:	0f 91       	pop	r16
     45a:	08 95       	ret

0000045c <free_list>:

void free_list() {
	struct node *cp;

	for( ;Head != NULL; ) {
     45c:	09 c0       	rjmp	.+18     	; 0x470 <free_list+0x14>
		cp = Head;
		Head = cp->link;
     45e:	fc 01       	movw	r30, r24
     460:	22 81       	ldd	r18, Z+2	; 0x02
     462:	33 81       	ldd	r19, Z+3	; 0x03
     464:	30 93 d1 02 	sts	0x02D1, r19
     468:	20 93 d0 02 	sts	0x02D0, r18
	return(cp);
}


void free_node(struct node *np) {
	free(np);
     46c:	0e 94 e6 07 	call	0xfcc	; 0xfcc <free>
}

void free_list() {
	struct node *cp;

	for( ;Head != NULL; ) {
     470:	80 91 d0 02 	lds	r24, 0x02D0
     474:	90 91 d1 02 	lds	r25, 0x02D1
     478:	00 97       	sbiw	r24, 0x00	; 0
     47a:	89 f7       	brne	.-30     	; 0x45e <free_list+0x2>
		cp = Head;
		Head = cp->link;
		free_node(cp);
	}
}
     47c:	08 95       	ret

0000047e <is_prime>:
#include <stdio.h>
#include <stdlib.h>
#include <compat/deprecated.h>
#include "prime.h"

int is_prime(int n) {
     47e:	cf 93       	push	r28
     480:	df 93       	push	r29
     482:	fc 01       	movw	r30, r24
	int i;
	for(i = 2;i <= n/2;i++)
     484:	62 e0       	ldi	r22, 0x02	; 2
     486:	70 e0       	ldi	r23, 0x00	; 0
     488:	0e 94 29 07 	call	0xe52	; 0xe52 <__divmodhi4>
     48c:	eb 01       	movw	r28, r22
     48e:	22 e0       	ldi	r18, 0x02	; 2
     490:	30 e0       	ldi	r19, 0x00	; 0
     492:	08 c0       	rjmp	.+16     	; 0x4a4 <is_prime+0x26>
		if((n % i) == 0)
     494:	cf 01       	movw	r24, r30
     496:	b9 01       	movw	r22, r18
     498:	0e 94 29 07 	call	0xe52	; 0xe52 <__divmodhi4>
     49c:	00 97       	sbiw	r24, 0x00	; 0
     49e:	41 f0       	breq	.+16     	; 0x4b0 <is_prime+0x32>
#include <compat/deprecated.h>
#include "prime.h"

int is_prime(int n) {
	int i;
	for(i = 2;i <= n/2;i++)
     4a0:	2f 5f       	subi	r18, 0xFF	; 255
     4a2:	3f 4f       	sbci	r19, 0xFF	; 255
     4a4:	c2 17       	cp	r28, r18
     4a6:	d3 07       	cpc	r29, r19
     4a8:	ac f7       	brge	.-22     	; 0x494 <is_prime+0x16>
		if((n % i) == 0)
			return(0);
	return(1);
     4aa:	81 e0       	ldi	r24, 0x01	; 1
     4ac:	90 e0       	ldi	r25, 0x00	; 0
     4ae:	02 c0       	rjmp	.+4      	; 0x4b4 <is_prime+0x36>

int is_prime(int n) {
	int i;
	for(i = 2;i <= n/2;i++)
		if((n % i) == 0)
			return(0);
     4b0:	80 e0       	ldi	r24, 0x00	; 0
     4b2:	90 e0       	ldi	r25, 0x00	; 0
	return(1);
}
     4b4:	df 91       	pop	r29
     4b6:	cf 91       	pop	r28
     4b8:	08 95       	ret

000004ba <app_prime>:

void app_prime(char *ap) {
     4ba:	cf 92       	push	r12
     4bc:	df 92       	push	r13
     4be:	ef 92       	push	r14
     4c0:	ff 92       	push	r15
     4c2:	0f 93       	push	r16
     4c4:	1f 93       	push	r17
     4c6:	cf 93       	push	r28
     4c8:	df 93       	push	r29
	int t = 2000, n, count = 0;
	if(ap) t = atoi(ap);
     4ca:	00 97       	sbiw	r24, 0x00	; 0
     4cc:	21 f0       	breq	.+8      	; 0x4d6 <app_prime+0x1c>
     4ce:	0e 94 7f 08 	call	0x10fe	; 0x10fe <atoi>
     4d2:	7c 01       	movw	r14, r24
     4d4:	04 c0       	rjmp	.+8      	; 0x4de <app_prime+0x24>
			return(0);
	return(1);
}

void app_prime(char *ap) {
	int t = 2000, n, count = 0;
     4d6:	90 ed       	ldi	r25, 0xD0	; 208
     4d8:	e9 2e       	mov	r14, r25
     4da:	97 e0       	ldi	r25, 0x07	; 7
     4dc:	f9 2e       	mov	r15, r25
     4de:	00 e0       	ldi	r16, 0x00	; 0
     4e0:	10 e0       	ldi	r17, 0x00	; 0
	if(ap) t = atoi(ap);
	for(n = 2;n <= t;n++) {
     4e2:	c2 e0       	ldi	r28, 0x02	; 2
     4e4:	d0 e0       	ldi	r29, 0x00	; 0
		if(is_prime(n)) {
			count++;
			printf("%d is a prime number !!! \n", n);
     4e6:	8b e2       	ldi	r24, 0x2B	; 43
     4e8:	c8 2e       	mov	r12, r24
     4ea:	82 e0       	ldi	r24, 0x02	; 2
     4ec:	d8 2e       	mov	r13, r24
}

void app_prime(char *ap) {
	int t = 2000, n, count = 0;
	if(ap) t = atoi(ap);
	for(n = 2;n <= t;n++) {
     4ee:	16 c0       	rjmp	.+44     	; 0x51c <app_prime+0x62>
		if(is_prime(n)) {
     4f0:	ce 01       	movw	r24, r28
     4f2:	0e 94 3f 02 	call	0x47e	; 0x47e <is_prime>
     4f6:	00 97       	sbiw	r24, 0x00	; 0
     4f8:	81 f0       	breq	.+32     	; 0x51a <app_prime+0x60>
			count++;
     4fa:	0f 5f       	subi	r16, 0xFF	; 255
     4fc:	1f 4f       	sbci	r17, 0xFF	; 255
			printf("%d is a prime number !!! \n", n);
     4fe:	00 d0       	rcall	.+0      	; 0x500 <app_prime+0x46>
     500:	0f 92       	push	r0
     502:	ed b7       	in	r30, 0x3d	; 61
     504:	fe b7       	in	r31, 0x3e	; 62
     506:	d2 82       	std	Z+2, r13	; 0x02
     508:	c1 82       	std	Z+1, r12	; 0x01
     50a:	d4 83       	std	Z+4, r29	; 0x04
     50c:	c3 83       	std	Z+3, r28	; 0x03
     50e:	0e 94 3b 09 	call	0x1276	; 0x1276 <printf>
     512:	0f 90       	pop	r0
     514:	0f 90       	pop	r0
     516:	0f 90       	pop	r0
     518:	0f 90       	pop	r0
}

void app_prime(char *ap) {
	int t = 2000, n, count = 0;
	if(ap) t = atoi(ap);
	for(n = 2;n <= t;n++) {
     51a:	21 96       	adiw	r28, 0x01	; 1
     51c:	ec 16       	cp	r14, r28
     51e:	fd 06       	cpc	r15, r29
     520:	3c f7       	brge	.-50     	; 0x4f0 <app_prime+0x36>
		if(is_prime(n)) {
			count++;
			printf("%d is a prime number !!! \n", n);
		}
	}
	printf("count = %d\n", count);
     522:	00 d0       	rcall	.+0      	; 0x524 <app_prime+0x6a>
     524:	0f 92       	push	r0
     526:	86 e4       	ldi	r24, 0x46	; 70
     528:	92 e0       	ldi	r25, 0x02	; 2
     52a:	ed b7       	in	r30, 0x3d	; 61
     52c:	fe b7       	in	r31, 0x3e	; 62
     52e:	92 83       	std	Z+2, r25	; 0x02
     530:	81 83       	std	Z+1, r24	; 0x01
     532:	14 83       	std	Z+4, r17	; 0x04
     534:	03 83       	std	Z+3, r16	; 0x03
     536:	0e 94 3b 09 	call	0x1276	; 0x1276 <printf>
     53a:	0f 90       	pop	r0
     53c:	0f 90       	pop	r0
     53e:	0f 90       	pop	r0
     540:	0f 90       	pop	r0
}
     542:	df 91       	pop	r29
     544:	cf 91       	pop	r28
     546:	1f 91       	pop	r17
     548:	0f 91       	pop	r16
     54a:	ff 90       	pop	r15
     54c:	ef 90       	pop	r14
     54e:	df 90       	pop	r13
     550:	cf 90       	pop	r12
     552:	08 95       	ret

00000554 <task_prime>:

void task_prime(char *ap) {
     554:	cf 92       	push	r12
     556:	df 92       	push	r13
     558:	ef 92       	push	r14
     55a:	ff 92       	push	r15
     55c:	0f 93       	push	r16
     55e:	1f 93       	push	r17
     560:	cf 93       	push	r28
     562:	df 93       	push	r29
	int n, t = 2000, count = 0;
	if(ap && *ap) t = atoi(ap);
     564:	00 97       	sbiw	r24, 0x00	; 0
     566:	41 f0       	breq	.+16     	; 0x578 <task_prime+0x24>
     568:	fc 01       	movw	r30, r24
     56a:	20 81       	ld	r18, Z
     56c:	22 23       	and	r18, r18
     56e:	21 f0       	breq	.+8      	; 0x578 <task_prime+0x24>
     570:	0e 94 7f 08 	call	0x10fe	; 0x10fe <atoi>
     574:	8c 01       	movw	r16, r24
     576:	02 c0       	rjmp	.+4      	; 0x57c <task_prime+0x28>
	}
	printf("count = %d\n", count);
}

void task_prime(char *ap) {
	int n, t = 2000, count = 0;
     578:	00 ed       	ldi	r16, 0xD0	; 208
     57a:	17 e0       	ldi	r17, 0x07	; 7
     57c:	ee 24       	eor	r14, r14
     57e:	ff 24       	eor	r15, r15
	if(ap && *ap) t = atoi(ap);
	for(n = 2;n <= t;n++) {
     580:	c2 e0       	ldi	r28, 0x02	; 2
     582:	d0 e0       	ldi	r29, 0x00	; 0
		if(is_prime(n)) {
			count++;
			printf("%d is a prime number !!! \n", n);
     584:	2b e2       	ldi	r18, 0x2B	; 43
     586:	c2 2e       	mov	r12, r18
     588:	22 e0       	ldi	r18, 0x02	; 2
     58a:	d2 2e       	mov	r13, r18
}

void task_prime(char *ap) {
	int n, t = 2000, count = 0;
	if(ap && *ap) t = atoi(ap);
	for(n = 2;n <= t;n++) {
     58c:	17 c0       	rjmp	.+46     	; 0x5bc <task_prime+0x68>
		if(is_prime(n)) {
     58e:	ce 01       	movw	r24, r28
     590:	0e 94 3f 02 	call	0x47e	; 0x47e <is_prime>
     594:	00 97       	sbiw	r24, 0x00	; 0
     596:	89 f0       	breq	.+34     	; 0x5ba <task_prime+0x66>
			count++;
     598:	08 94       	sec
     59a:	e1 1c       	adc	r14, r1
     59c:	f1 1c       	adc	r15, r1
			printf("%d is a prime number !!! \n", n);
     59e:	00 d0       	rcall	.+0      	; 0x5a0 <task_prime+0x4c>
     5a0:	0f 92       	push	r0
     5a2:	ed b7       	in	r30, 0x3d	; 61
     5a4:	fe b7       	in	r31, 0x3e	; 62
     5a6:	d2 82       	std	Z+2, r13	; 0x02
     5a8:	c1 82       	std	Z+1, r12	; 0x01
     5aa:	d4 83       	std	Z+4, r29	; 0x04
     5ac:	c3 83       	std	Z+3, r28	; 0x03
     5ae:	0e 94 3b 09 	call	0x1276	; 0x1276 <printf>
     5b2:	0f 90       	pop	r0
     5b4:	0f 90       	pop	r0
     5b6:	0f 90       	pop	r0
     5b8:	0f 90       	pop	r0
}

void task_prime(char *ap) {
	int n, t = 2000, count = 0;
	if(ap && *ap) t = atoi(ap);
	for(n = 2;n <= t;n++) {
     5ba:	21 96       	adiw	r28, 0x01	; 1
     5bc:	0c 17       	cp	r16, r28
     5be:	1d 07       	cpc	r17, r29
     5c0:	34 f7       	brge	.-52     	; 0x58e <task_prime+0x3a>
		if(is_prime(n)) {
			count++;
			printf("%d is a prime number !!! \n", n);
		}
	}
	printf("count = %d\n", count);
     5c2:	00 d0       	rcall	.+0      	; 0x5c4 <task_prime+0x70>
     5c4:	0f 92       	push	r0
     5c6:	86 e4       	ldi	r24, 0x46	; 70
     5c8:	92 e0       	ldi	r25, 0x02	; 2
     5ca:	ed b7       	in	r30, 0x3d	; 61
     5cc:	fe b7       	in	r31, 0x3e	; 62
     5ce:	92 83       	std	Z+2, r25	; 0x02
     5d0:	81 83       	std	Z+1, r24	; 0x01
     5d2:	f4 82       	std	Z+4, r15	; 0x04
     5d4:	e3 82       	std	Z+3, r14	; 0x03
     5d6:	0e 94 3b 09 	call	0x1276	; 0x1276 <printf>
     5da:	0f 90       	pop	r0
     5dc:	0f 90       	pop	r0
     5de:	0f 90       	pop	r0
     5e0:	0f 90       	pop	r0
}
     5e2:	df 91       	pop	r29
     5e4:	cf 91       	pop	r28
     5e6:	1f 91       	pop	r17
     5e8:	0f 91       	pop	r16
     5ea:	ff 90       	pop	r15
     5ec:	ef 90       	pop	r14
     5ee:	df 90       	pop	r13
     5f0:	cf 90       	pop	r12
     5f2:	08 95       	ret

000005f4 <q_init>:

char 	qi[QI_SIZE], qo[QO_SIZE];
int 	fi, ri, fo, ro;

void q_init() {
	fi = ri = fo = ro = 0;
     5f4:	10 92 1b 03 	sts	0x031B, r1
     5f8:	10 92 1a 03 	sts	0x031A, r1
     5fc:	10 92 19 03 	sts	0x0319, r1
     600:	10 92 18 03 	sts	0x0318, r1
     604:	10 92 1d 03 	sts	0x031D, r1
     608:	10 92 1c 03 	sts	0x031C, r1
     60c:	10 92 d7 02 	sts	0x02D7, r1
     610:	10 92 d6 02 	sts	0x02D6, r1
}
     614:	08 95       	ret

00000616 <qi_insert>:


int qi_insert(char ch) {
     616:	48 2f       	mov	r20, r24
	if((ri + 1) % QI_SIZE == fi)
     618:	20 91 1c 03 	lds	r18, 0x031C
     61c:	30 91 1d 03 	lds	r19, 0x031D
     620:	2f 5f       	subi	r18, 0xFF	; 255
     622:	3f 4f       	sbci	r19, 0xFF	; 255
     624:	c9 01       	movw	r24, r18
     626:	60 e4       	ldi	r22, 0x40	; 64
     628:	70 e0       	ldi	r23, 0x00	; 0
     62a:	0e 94 29 07 	call	0xe52	; 0xe52 <__divmodhi4>
     62e:	9c 01       	movw	r18, r24
     630:	80 91 d6 02 	lds	r24, 0x02D6
     634:	90 91 d7 02 	lds	r25, 0x02D7
     638:	28 17       	cp	r18, r24
     63a:	39 07       	cpc	r19, r25
     63c:	59 f0       	breq	.+22     	; 0x654 <qi_insert+0x3e>
		return(0);
	ri = (ri + 1) % QI_SIZE;
     63e:	30 93 1d 03 	sts	0x031D, r19
     642:	20 93 1c 03 	sts	0x031C, r18
	qi[ri] = ch;
     646:	22 5e       	subi	r18, 0xE2	; 226
     648:	3c 4f       	sbci	r19, 0xFC	; 252
     64a:	f9 01       	movw	r30, r18
     64c:	40 83       	st	Z, r20
	return(1);
     64e:	81 e0       	ldi	r24, 0x01	; 1
     650:	90 e0       	ldi	r25, 0x00	; 0
     652:	08 95       	ret
}


int qi_insert(char ch) {
	if((ri + 1) % QI_SIZE == fi)
		return(0);
     654:	80 e0       	ldi	r24, 0x00	; 0
     656:	90 e0       	ldi	r25, 0x00	; 0
	ri = (ri + 1) % QI_SIZE;
	qi[ri] = ch;
	return(1);
}
     658:	08 95       	ret

0000065a <qi_delete>:

int qi_delete() {
	if(ri == fi)
     65a:	80 91 d6 02 	lds	r24, 0x02D6
     65e:	90 91 d7 02 	lds	r25, 0x02D7
     662:	20 91 1c 03 	lds	r18, 0x031C
     666:	30 91 1d 03 	lds	r19, 0x031D
     66a:	28 17       	cp	r18, r24
     66c:	39 07       	cpc	r19, r25
     66e:	79 f0       	breq	.+30     	; 0x68e <qi_delete+0x34>
		return(0);
	fi = (fi + 1) % QI_SIZE;
     670:	01 96       	adiw	r24, 0x01	; 1
     672:	60 e4       	ldi	r22, 0x40	; 64
     674:	70 e0       	ldi	r23, 0x00	; 0
     676:	0e 94 29 07 	call	0xe52	; 0xe52 <__divmodhi4>
     67a:	90 93 d7 02 	sts	0x02D7, r25
     67e:	80 93 d6 02 	sts	0x02D6, r24
	return(qi[fi]);
     682:	82 5e       	subi	r24, 0xE2	; 226
     684:	9c 4f       	sbci	r25, 0xFC	; 252
     686:	fc 01       	movw	r30, r24
     688:	80 81       	ld	r24, Z
     68a:	90 e0       	ldi	r25, 0x00	; 0
     68c:	08 95       	ret
	return(1);
}

int qi_delete() {
	if(ri == fi)
		return(0);
     68e:	80 e0       	ldi	r24, 0x00	; 0
     690:	90 e0       	ldi	r25, 0x00	; 0
	fi = (fi + 1) % QI_SIZE;
	return(qi[fi]);
}
     692:	08 95       	ret

00000694 <qo_insert>:

int qo_insert(char ch) {
     694:	48 2f       	mov	r20, r24
	if((ro + 1) % QO_SIZE == fo)
     696:	20 91 1a 03 	lds	r18, 0x031A
     69a:	30 91 1b 03 	lds	r19, 0x031B
     69e:	2f 5f       	subi	r18, 0xFF	; 255
     6a0:	3f 4f       	sbci	r19, 0xFF	; 255
     6a2:	c9 01       	movw	r24, r18
     6a4:	60 e4       	ldi	r22, 0x40	; 64
     6a6:	70 e0       	ldi	r23, 0x00	; 0
     6a8:	0e 94 29 07 	call	0xe52	; 0xe52 <__divmodhi4>
     6ac:	9c 01       	movw	r18, r24
     6ae:	80 91 18 03 	lds	r24, 0x0318
     6b2:	90 91 19 03 	lds	r25, 0x0319
     6b6:	28 17       	cp	r18, r24
     6b8:	39 07       	cpc	r19, r25
     6ba:	59 f0       	breq	.+22     	; 0x6d2 <qo_insert+0x3e>
		return(0);
	ro = (ro + 1) % QO_SIZE;
     6bc:	30 93 1b 03 	sts	0x031B, r19
     6c0:	20 93 1a 03 	sts	0x031A, r18
	qo[ro] = ch;
     6c4:	28 52       	subi	r18, 0x28	; 40
     6c6:	3d 4f       	sbci	r19, 0xFD	; 253
     6c8:	f9 01       	movw	r30, r18
     6ca:	40 83       	st	Z, r20
	return(1);
     6cc:	81 e0       	ldi	r24, 0x01	; 1
     6ce:	90 e0       	ldi	r25, 0x00	; 0
     6d0:	08 95       	ret
	return(qi[fi]);
}

int qo_insert(char ch) {
	if((ro + 1) % QO_SIZE == fo)
		return(0);
     6d2:	80 e0       	ldi	r24, 0x00	; 0
     6d4:	90 e0       	ldi	r25, 0x00	; 0
	ro = (ro + 1) % QO_SIZE;
	qo[ro] = ch;
	return(1);
}
     6d6:	08 95       	ret

000006d8 <qo_delete>:

int qo_delete() {
	if(ro == fo)
     6d8:	80 91 18 03 	lds	r24, 0x0318
     6dc:	90 91 19 03 	lds	r25, 0x0319
     6e0:	20 91 1a 03 	lds	r18, 0x031A
     6e4:	30 91 1b 03 	lds	r19, 0x031B
     6e8:	28 17       	cp	r18, r24
     6ea:	39 07       	cpc	r19, r25
     6ec:	79 f0       	breq	.+30     	; 0x70c <qo_delete+0x34>
		return(0);
	fo = (fo + 1) % QO_SIZE;
     6ee:	01 96       	adiw	r24, 0x01	; 1
     6f0:	60 e4       	ldi	r22, 0x40	; 64
     6f2:	70 e0       	ldi	r23, 0x00	; 0
     6f4:	0e 94 29 07 	call	0xe52	; 0xe52 <__divmodhi4>
     6f8:	90 93 19 03 	sts	0x0319, r25
     6fc:	80 93 18 03 	sts	0x0318, r24
	return(qo[fo]);
     700:	88 52       	subi	r24, 0x28	; 40
     702:	9d 4f       	sbci	r25, 0xFD	; 253
     704:	fc 01       	movw	r30, r24
     706:	80 81       	ld	r24, Z
     708:	90 e0       	ldi	r25, 0x00	; 0
     70a:	08 95       	ret
	return(1);
}

int qo_delete() {
	if(ro == fo)
		return(0);
     70c:	80 e0       	ldi	r24, 0x00	; 0
     70e:	90 e0       	ldi	r25, 0x00	; 0
	fo = (fo + 1) % QO_SIZE;
	return(qo[fo]);
}
     710:	08 95       	ret

00000712 <qi_peek>:

int qi_peek() {
	if(fi == ri)
     712:	80 91 d6 02 	lds	r24, 0x02D6
     716:	90 91 d7 02 	lds	r25, 0x02D7
     71a:	20 91 1c 03 	lds	r18, 0x031C
     71e:	30 91 1d 03 	lds	r19, 0x031D
     722:	82 17       	cp	r24, r18
     724:	93 07       	cpc	r25, r19
     726:	59 f0       	breq	.+22     	; 0x73e <qi_peek+0x2c>
		return 0;
	else
		return(qi[(fi + 1) % QI_SIZE]);
     728:	01 96       	adiw	r24, 0x01	; 1
     72a:	60 e4       	ldi	r22, 0x40	; 64
     72c:	70 e0       	ldi	r23, 0x00	; 0
     72e:	0e 94 29 07 	call	0xe52	; 0xe52 <__divmodhi4>
     732:	82 5e       	subi	r24, 0xE2	; 226
     734:	9c 4f       	sbci	r25, 0xFC	; 252
     736:	fc 01       	movw	r30, r24
     738:	80 81       	ld	r24, Z
     73a:	90 e0       	ldi	r25, 0x00	; 0
     73c:	08 95       	ret
	return(qo[fo]);
}

int qi_peek() {
	if(fi == ri)
		return 0;
     73e:	80 e0       	ldi	r24, 0x00	; 0
     740:	90 e0       	ldi	r25, 0x00	; 0
	else
		return(qi[(fi + 1) % QI_SIZE]);
}
     742:	08 95       	ret

00000744 <get_timer>:
#include "uart.h"

struct timer *get_timer() {
	struct timer *tp;

	tp = (struct timer *)malloc(sizeof(*tp));
     744:	8e e0       	ldi	r24, 0x0E	; 14
     746:	90 e0       	ldi	r25, 0x00	; 0
     748:	0e 94 50 07 	call	0xea0	; 0xea0 <malloc>
	return(tp);
}
     74c:	08 95       	ret

0000074e <insert_timer>:

struct timer *Thead = NULL;
void insert_timer(struct task *tskp, int ms) {
     74e:	ef 92       	push	r14
     750:	ff 92       	push	r15
     752:	0f 93       	push	r16
     754:	1f 93       	push	r17
     756:	cf 93       	push	r28
     758:	df 93       	push	r29
     75a:	f8 2e       	mov	r15, r24
     75c:	e9 2e       	mov	r14, r25
     75e:	8b 01       	movw	r16, r22
	int 			total;
	struct timer 	*tp, *cp, *pp;

	tp = get_timer();
     760:	0e 94 a2 03 	call	0x744	; 0x744 <get_timer>
     764:	ec 01       	movw	r28, r24
	tp->task = *tskp;
     766:	dc 01       	movw	r26, r24
     768:	12 96       	adiw	r26, 0x02	; 2
     76a:	ef 2d       	mov	r30, r15
     76c:	fe 2d       	mov	r31, r14
     76e:	8a e0       	ldi	r24, 0x0A	; 10
     770:	01 90       	ld	r0, Z+
     772:	0d 92       	st	X+, r0
     774:	81 50       	subi	r24, 0x01	; 1
     776:	e1 f7       	brne	.-8      	; 0x770 <insert_timer+0x22>
	tp->time = ms;
     778:	19 83       	std	Y+1, r17	; 0x01
     77a:	08 83       	st	Y, r16

	if(Thead == NULL) {
     77c:	e0 91 d2 02 	lds	r30, 0x02D2
     780:	f0 91 d3 02 	lds	r31, 0x02D3
     784:	30 97       	sbiw	r30, 0x00	; 0
     786:	29 f4       	brne	.+10     	; 0x792 <insert_timer+0x44>
		Thead = tp, tp->link = NULL;
     788:	d0 93 d3 02 	sts	0x02D3, r29
     78c:	c0 93 d2 02 	sts	0x02D2, r28
     790:	2f c0       	rjmp	.+94     	; 0x7f0 <insert_timer+0xa2>

	tp = get_timer();
	tp->task = *tskp;
	tp->time = ms;

	if(Thead == NULL) {
     792:	40 e0       	ldi	r20, 0x00	; 0
     794:	50 e0       	ldi	r21, 0x00	; 0
     796:	20 e0       	ldi	r18, 0x00	; 0
     798:	30 e0       	ldi	r19, 0x00	; 0
     79a:	01 c0       	rjmp	.+2      	; 0x79e <insert_timer+0x50>
		return;
	}

	pp = NULL, total = 0;

	for(cp = Thead;cp;cp = cp->link) {
     79c:	fd 01       	movw	r30, r26
		total += cp->time;
     79e:	80 81       	ld	r24, Z
     7a0:	91 81       	ldd	r25, Z+1	; 0x01
     7a2:	28 0f       	add	r18, r24
     7a4:	39 1f       	adc	r19, r25
		if(total >= ms)
     7a6:	20 17       	cp	r18, r16
     7a8:	31 07       	cpc	r19, r17
     7aa:	34 f4       	brge	.+12     	; 0x7b8 <insert_timer+0x6a>
		return;
	}

	pp = NULL, total = 0;

	for(cp = Thead;cp;cp = cp->link) {
     7ac:	a4 85       	ldd	r26, Z+12	; 0x0c
     7ae:	b5 85       	ldd	r27, Z+13	; 0x0d
     7b0:	af 01       	movw	r20, r30
     7b2:	10 97       	sbiw	r26, 0x00	; 0
     7b4:	99 f7       	brne	.-26     	; 0x79c <insert_timer+0x4e>
     7b6:	01 c0       	rjmp	.+2      	; 0x7ba <insert_timer+0x6c>
		total += cp->time;
		if(total >= ms)
     7b8:	df 01       	movw	r26, r30
			break;
		pp = cp;
	}

	if(pp == NULL) {
     7ba:	41 15       	cp	r20, r1
     7bc:	51 05       	cpc	r21, r1
     7be:	79 f4       	brne	.+30     	; 0x7de <insert_timer+0x90>
		cp->time -= tp->time;
     7c0:	8d 91       	ld	r24, X+
     7c2:	9c 91       	ld	r25, X
     7c4:	11 97       	sbiw	r26, 0x01	; 1
     7c6:	80 1b       	sub	r24, r16
     7c8:	91 0b       	sbc	r25, r17
     7ca:	11 96       	adiw	r26, 0x01	; 1
     7cc:	9c 93       	st	X, r25
     7ce:	8e 93       	st	-X, r24
		tp->link = cp, Thead = tp;
     7d0:	bd 87       	std	Y+13, r27	; 0x0d
     7d2:	ac 87       	std	Y+12, r26	; 0x0c
     7d4:	d0 93 d3 02 	sts	0x02D3, r29
     7d8:	c0 93 d2 02 	sts	0x02D2, r28
     7dc:	24 c0       	rjmp	.+72     	; 0x826 <insert_timer+0xd8>
	}
	else if(cp == NULL) {
     7de:	10 97       	sbiw	r26, 0x00	; 0
     7e0:	51 f4       	brne	.+20     	; 0x7f6 <insert_timer+0xa8>
		tp->time -= total;
     7e2:	02 1b       	sub	r16, r18
     7e4:	13 0b       	sbc	r17, r19
     7e6:	19 83       	std	Y+1, r17	; 0x01
     7e8:	08 83       	st	Y, r16
		pp->link = tp;
     7ea:	fa 01       	movw	r30, r20
     7ec:	d5 87       	std	Z+13, r29	; 0x0d
     7ee:	c4 87       	std	Z+12, r28	; 0x0c
		tp->link = NULL;
     7f0:	1d 86       	std	Y+13, r1	; 0x0d
     7f2:	1c 86       	std	Y+12, r1	; 0x0c
     7f4:	18 c0       	rjmp	.+48     	; 0x826 <insert_timer+0xd8>
	}
	else {
		total -= cp->time;
     7f6:	8d 91       	ld	r24, X+
     7f8:	9c 91       	ld	r25, X
     7fa:	11 97       	sbiw	r26, 0x01	; 1
     7fc:	b9 01       	movw	r22, r18
     7fe:	68 1b       	sub	r22, r24
     800:	79 0b       	sbc	r23, r25
		tp->time -= total;
     802:	98 01       	movw	r18, r16
     804:	26 1b       	sub	r18, r22
     806:	37 0b       	sbc	r19, r23
     808:	39 83       	std	Y+1, r19	; 0x01
     80a:	28 83       	st	Y, r18
		cp->time -= tp->time;
     80c:	8d 91       	ld	r24, X+
     80e:	9c 91       	ld	r25, X
     810:	11 97       	sbiw	r26, 0x01	; 1
     812:	82 1b       	sub	r24, r18
     814:	93 0b       	sbc	r25, r19
     816:	11 96       	adiw	r26, 0x01	; 1
     818:	9c 93       	st	X, r25
     81a:	8e 93       	st	-X, r24
		pp->link = tp;
     81c:	fa 01       	movw	r30, r20
     81e:	d5 87       	std	Z+13, r29	; 0x0d
     820:	c4 87       	std	Z+12, r28	; 0x0c
		tp->link = cp;
     822:	bd 87       	std	Y+13, r27	; 0x0d
     824:	ac 87       	std	Y+12, r26	; 0x0c
	}
}
     826:	df 91       	pop	r29
     828:	cf 91       	pop	r28
     82a:	1f 91       	pop	r17
     82c:	0f 91       	pop	r16
     82e:	ff 90       	pop	r15
     830:	ef 90       	pop	r14
     832:	08 95       	ret

00000834 <tour_timer>:

void tour_timer() {
     834:	ef 92       	push	r14
     836:	ff 92       	push	r15
     838:	0f 93       	push	r16
     83a:	1f 93       	push	r17
     83c:	cf 93       	push	r28
     83e:	df 93       	push	r29
	struct timer *cp;
	int total = 0;

	printf("\n");
     840:	8a e0       	ldi	r24, 0x0A	; 10
     842:	90 e0       	ldi	r25, 0x00	; 0
     844:	0e 94 4d 09 	call	0x129a	; 0x129a <putchar>
	for(cp = Thead;cp != NULL;cp = cp->link) {
     848:	c0 91 d2 02 	lds	r28, 0x02D2
     84c:	d0 91 d3 02 	lds	r29, 0x02D3
	}
}

void tour_timer() {
	struct timer *cp;
	int total = 0;
     850:	00 e0       	ldi	r16, 0x00	; 0
     852:	10 e0       	ldi	r17, 0x00	; 0

	printf("\n");
	for(cp = Thead;cp != NULL;cp = cp->link) {
		total += cp->time;
		printf("-->%d(%d) ", cp->time, total);
     854:	82 e5       	ldi	r24, 0x52	; 82
     856:	e8 2e       	mov	r14, r24
     858:	82 e0       	ldi	r24, 0x02	; 2
     85a:	f8 2e       	mov	r15, r24
void tour_timer() {
	struct timer *cp;
	int total = 0;

	printf("\n");
	for(cp = Thead;cp != NULL;cp = cp->link) {
     85c:	20 c0       	rjmp	.+64     	; 0x89e <tour_timer+0x6a>
		total += cp->time;
     85e:	88 81       	ld	r24, Y
     860:	99 81       	ldd	r25, Y+1	; 0x01
     862:	08 0f       	add	r16, r24
     864:	19 1f       	adc	r17, r25
		printf("-->%d(%d) ", cp->time, total);
     866:	00 d0       	rcall	.+0      	; 0x868 <tour_timer+0x34>
     868:	00 d0       	rcall	.+0      	; 0x86a <tour_timer+0x36>
     86a:	ed b7       	in	r30, 0x3d	; 61
     86c:	fe b7       	in	r31, 0x3e	; 62
     86e:	31 96       	adiw	r30, 0x01	; 1
     870:	ad b7       	in	r26, 0x3d	; 61
     872:	be b7       	in	r27, 0x3e	; 62
     874:	12 96       	adiw	r26, 0x02	; 2
     876:	fc 92       	st	X, r15
     878:	ee 92       	st	-X, r14
     87a:	11 97       	sbiw	r26, 0x01	; 1
     87c:	93 83       	std	Z+3, r25	; 0x03
     87e:	82 83       	std	Z+2, r24	; 0x02
     880:	15 83       	std	Z+5, r17	; 0x05
     882:	04 83       	std	Z+4, r16	; 0x04
     884:	0e 94 3b 09 	call	0x1276	; 0x1276 <printf>
void tour_timer() {
	struct timer *cp;
	int total = 0;

	printf("\n");
	for(cp = Thead;cp != NULL;cp = cp->link) {
     888:	0c 84       	ldd	r0, Y+12	; 0x0c
     88a:	dd 85       	ldd	r29, Y+13	; 0x0d
     88c:	c0 2d       	mov	r28, r0
     88e:	8d b7       	in	r24, 0x3d	; 61
     890:	9e b7       	in	r25, 0x3e	; 62
     892:	06 96       	adiw	r24, 0x06	; 6
     894:	0f b6       	in	r0, 0x3f	; 63
     896:	f8 94       	cli
     898:	9e bf       	out	0x3e, r25	; 62
     89a:	0f be       	out	0x3f, r0	; 63
     89c:	8d bf       	out	0x3d, r24	; 61
     89e:	20 97       	sbiw	r28, 0x00	; 0
     8a0:	f1 f6       	brne	.-68     	; 0x85e <tour_timer+0x2a>
		total += cp->time;
		printf("-->%d(%d) ", cp->time, total);
	}
	printf("\n");
     8a2:	8a e0       	ldi	r24, 0x0A	; 10
     8a4:	90 e0       	ldi	r25, 0x00	; 0
     8a6:	0e 94 4d 09 	call	0x129a	; 0x129a <putchar>
}
     8aa:	df 91       	pop	r29
     8ac:	cf 91       	pop	r28
     8ae:	1f 91       	pop	r17
     8b0:	0f 91       	pop	r16
     8b2:	ff 90       	pop	r15
     8b4:	ef 90       	pop	r14
     8b6:	08 95       	ret

000008b8 <free_timer>:

void free_timer() {
	struct timer *cp;

	for( ;Thead != NULL; ) {
     8b8:	09 c0       	rjmp	.+18     	; 0x8cc <free_timer+0x14>
		cp = Thead;
		Thead = cp->link;
     8ba:	fc 01       	movw	r30, r24
     8bc:	24 85       	ldd	r18, Z+12	; 0x0c
     8be:	35 85       	ldd	r19, Z+13	; 0x0d
     8c0:	30 93 d3 02 	sts	0x02D3, r19
     8c4:	20 93 d2 02 	sts	0x02D2, r18
		free(cp);
     8c8:	0e 94 e6 07 	call	0xfcc	; 0xfcc <free>
}

void free_timer() {
	struct timer *cp;

	for( ;Thead != NULL; ) {
     8cc:	80 91 d2 02 	lds	r24, 0x02D2
     8d0:	90 91 d3 02 	lds	r25, 0x02D3
     8d4:	00 97       	sbiw	r24, 0x00	; 0
     8d6:	89 f7       	brne	.-30     	; 0x8ba <free_timer+0x2>
		cp = Thead;
		Thead = cp->link;
		free(cp);
	}
}
     8d8:	08 95       	ret

000008da <timer_init>:

void timer_init() {
	TCNT2 = 0;
     8da:	10 92 b2 00 	sts	0x00B2, r1
	sbi(ASSR, AS2);
     8de:	e6 eb       	ldi	r30, 0xB6	; 182
     8e0:	f0 e0       	ldi	r31, 0x00	; 0
     8e2:	80 81       	ld	r24, Z
     8e4:	80 62       	ori	r24, 0x20	; 32
     8e6:	80 83       	st	Z, r24
	sbi(TIMSK2, TOIE2);
     8e8:	e0 e7       	ldi	r30, 0x70	; 112
     8ea:	f0 e0       	ldi	r31, 0x00	; 0
     8ec:	80 81       	ld	r24, Z
     8ee:	81 60       	ori	r24, 0x01	; 1
     8f0:	80 83       	st	Z, r24
	sbi(TCCR2B, CS20);	sbi(TCCR2B, CS21);
     8f2:	e1 eb       	ldi	r30, 0xB1	; 177
     8f4:	f0 e0       	ldi	r31, 0x00	; 0
     8f6:	80 81       	ld	r24, Z
     8f8:	81 60       	ori	r24, 0x01	; 1
     8fa:	80 83       	st	Z, r24
     8fc:	80 81       	ld	r24, Z
     8fe:	82 60       	ori	r24, 0x02	; 2
     900:	80 83       	st	Z, r24
}
     902:	08 95       	ret

00000904 <task_init>:

struct task Task_q[MAX_TASK];
volatile int Task_f, Task_r;

void task_init() {
	Task_f = Task_r = 0;
     904:	10 92 5f 03 	sts	0x035F, r1
     908:	10 92 5e 03 	sts	0x035E, r1
     90c:	10 92 01 04 	sts	0x0401, r1
     910:	10 92 00 04 	sts	0x0400, r1
}
     914:	08 95       	ret

00000916 <task_insert>:

int task_insert(struct task *tskp) {
     916:	cf 93       	push	r28
     918:	df 93       	push	r29
     91a:	48 2f       	mov	r20, r24
     91c:	e9 2f       	mov	r30, r25
	if((Task_r + 1) % MAX_TASK == Task_f)
     91e:	80 91 5e 03 	lds	r24, 0x035E
     922:	90 91 5f 03 	lds	r25, 0x035F
     926:	c0 91 00 04 	lds	r28, 0x0400
     92a:	d0 91 01 04 	lds	r29, 0x0401
     92e:	01 96       	adiw	r24, 0x01	; 1
     930:	20 e1       	ldi	r18, 0x10	; 16
     932:	30 e0       	ldi	r19, 0x00	; 0
     934:	b9 01       	movw	r22, r18
     936:	0e 94 29 07 	call	0xe52	; 0xe52 <__divmodhi4>
     93a:	8c 17       	cp	r24, r28
     93c:	9d 07       	cpc	r25, r29
     93e:	31 f1       	breq	.+76     	; 0x98c <task_insert+0x76>
		return(0);
	Task_r = (Task_r + 1) % MAX_TASK;
     940:	80 91 5e 03 	lds	r24, 0x035E
     944:	90 91 5f 03 	lds	r25, 0x035F
     948:	01 96       	adiw	r24, 0x01	; 1
     94a:	b9 01       	movw	r22, r18
     94c:	0e 94 29 07 	call	0xe52	; 0xe52 <__divmodhi4>
     950:	90 93 5f 03 	sts	0x035F, r25
     954:	80 93 5e 03 	sts	0x035E, r24
	Task_q[Task_r] = *tskp;
     958:	80 91 5e 03 	lds	r24, 0x035E
     95c:	90 91 5f 03 	lds	r25, 0x035F
     960:	dc 01       	movw	r26, r24
     962:	aa 0f       	add	r26, r26
     964:	bb 1f       	adc	r27, r27
     966:	63 e0       	ldi	r22, 0x03	; 3
     968:	88 0f       	add	r24, r24
     96a:	99 1f       	adc	r25, r25
     96c:	6a 95       	dec	r22
     96e:	e1 f7       	brne	.-8      	; 0x968 <task_insert+0x52>
     970:	a8 0f       	add	r26, r24
     972:	b9 1f       	adc	r27, r25
     974:	a0 5a       	subi	r26, 0xA0	; 160
     976:	bc 4f       	sbci	r27, 0xFC	; 252
     978:	c4 2f       	mov	r28, r20
     97a:	de 2f       	mov	r29, r30
     97c:	8a e0       	ldi	r24, 0x0A	; 10
     97e:	09 90       	ld	r0, Y+
     980:	0d 92       	st	X+, r0
     982:	81 50       	subi	r24, 0x01	; 1
     984:	e1 f7       	brne	.-8      	; 0x97e <task_insert+0x68>
	return(1);
     986:	81 e0       	ldi	r24, 0x01	; 1
     988:	90 e0       	ldi	r25, 0x00	; 0
     98a:	02 c0       	rjmp	.+4      	; 0x990 <task_insert+0x7a>
	Task_f = Task_r = 0;
}

int task_insert(struct task *tskp) {
	if((Task_r + 1) % MAX_TASK == Task_f)
		return(0);
     98c:	80 e0       	ldi	r24, 0x00	; 0
     98e:	90 e0       	ldi	r25, 0x00	; 0
	Task_r = (Task_r + 1) % MAX_TASK;
	Task_q[Task_r] = *tskp;
	return(1);
}
     990:	df 91       	pop	r29
     992:	cf 91       	pop	r28
     994:	08 95       	ret

00000996 <timer_expire>:
	sbi(ASSR, AS2);
	sbi(TIMSK2, TOIE2);
	sbi(TCCR2B, CS20);	sbi(TCCR2B, CS21);
}

void timer_expire(void) {
     996:	cf 93       	push	r28
     998:	df 93       	push	r29
	struct timer *tp;

	for( ;Thead != NULL && !Thead->time;) {
     99a:	0d c0       	rjmp	.+26     	; 0x9b6 <timer_expire+0x20>
		tp = Thead, Thead = tp->link;
     99c:	8c 85       	ldd	r24, Y+12	; 0x0c
     99e:	9d 85       	ldd	r25, Y+13	; 0x0d
     9a0:	90 93 d3 02 	sts	0x02D3, r25
     9a4:	80 93 d2 02 	sts	0x02D2, r24
		task_insert(&tp->task);
     9a8:	ce 01       	movw	r24, r28
     9aa:	02 96       	adiw	r24, 0x02	; 2
     9ac:	0e 94 8b 04 	call	0x916	; 0x916 <task_insert>
		free(tp);
     9b0:	ce 01       	movw	r24, r28
     9b2:	0e 94 e6 07 	call	0xfcc	; 0xfcc <free>
}

void timer_expire(void) {
	struct timer *tp;

	for( ;Thead != NULL && !Thead->time;) {
     9b6:	c0 91 d2 02 	lds	r28, 0x02D2
     9ba:	d0 91 d3 02 	lds	r29, 0x02D3
     9be:	20 97       	sbiw	r28, 0x00	; 0
     9c0:	21 f0       	breq	.+8      	; 0x9ca <timer_expire+0x34>
     9c2:	88 81       	ld	r24, Y
     9c4:	99 81       	ldd	r25, Y+1	; 0x01
     9c6:	00 97       	sbiw	r24, 0x00	; 0
     9c8:	49 f3       	breq	.-46     	; 0x99c <timer_expire+0x6>
		tp = Thead, Thead = tp->link;
		task_insert(&tp->task);
		free(tp);
	}
}
     9ca:	df 91       	pop	r29
     9cc:	cf 91       	pop	r28
     9ce:	08 95       	ret

000009d0 <__vector_15>:

ISR(TIMER2_OVF_vect) {
     9d0:	1f 92       	push	r1
     9d2:	0f 92       	push	r0
     9d4:	0f b6       	in	r0, 0x3f	; 63
     9d6:	0f 92       	push	r0
     9d8:	0b b6       	in	r0, 0x3b	; 59
     9da:	0f 92       	push	r0
     9dc:	11 24       	eor	r1, r1
     9de:	2f 93       	push	r18
     9e0:	3f 93       	push	r19
     9e2:	4f 93       	push	r20
     9e4:	5f 93       	push	r21
     9e6:	6f 93       	push	r22
     9e8:	7f 93       	push	r23
     9ea:	8f 93       	push	r24
     9ec:	9f 93       	push	r25
     9ee:	af 93       	push	r26
     9f0:	bf 93       	push	r27
     9f2:	ef 93       	push	r30
     9f4:	ff 93       	push	r31
	if(!Thead)
     9f6:	e0 91 d2 02 	lds	r30, 0x02D2
     9fa:	f0 91 d3 02 	lds	r31, 0x02D3
     9fe:	30 97       	sbiw	r30, 0x00	; 0
     a00:	49 f0       	breq	.+18     	; 0xa14 <__vector_15+0x44>
		return;
	if(--Thead->time == 0)
     a02:	80 81       	ld	r24, Z
     a04:	91 81       	ldd	r25, Z+1	; 0x01
     a06:	01 97       	sbiw	r24, 0x01	; 1
     a08:	91 83       	std	Z+1, r25	; 0x01
     a0a:	80 83       	st	Z, r24
     a0c:	00 97       	sbiw	r24, 0x00	; 0
     a0e:	11 f4       	brne	.+4      	; 0xa14 <__vector_15+0x44>
		timer_expire();
     a10:	0e 94 cb 04 	call	0x996	; 0x996 <timer_expire>
}
     a14:	ff 91       	pop	r31
     a16:	ef 91       	pop	r30
     a18:	bf 91       	pop	r27
     a1a:	af 91       	pop	r26
     a1c:	9f 91       	pop	r25
     a1e:	8f 91       	pop	r24
     a20:	7f 91       	pop	r23
     a22:	6f 91       	pop	r22
     a24:	5f 91       	pop	r21
     a26:	4f 91       	pop	r20
     a28:	3f 91       	pop	r19
     a2a:	2f 91       	pop	r18
     a2c:	0f 90       	pop	r0
     a2e:	0b be       	out	0x3b, r0	; 59
     a30:	0f 90       	pop	r0
     a32:	0f be       	out	0x3f, r0	; 63
     a34:	0f 90       	pop	r0
     a36:	1f 90       	pop	r1
     a38:	18 95       	reti

00000a3a <task_delete>:
	Task_r = (Task_r + 1) % MAX_TASK;
	Task_q[Task_r] = *tskp;
	return(1);
}

int task_delete(struct task *tskp) {
     a3a:	9c 01       	movw	r18, r24
	if(Task_r == Task_f)
     a3c:	40 91 5e 03 	lds	r20, 0x035E
     a40:	50 91 5f 03 	lds	r21, 0x035F
     a44:	80 91 00 04 	lds	r24, 0x0400
     a48:	90 91 01 04 	lds	r25, 0x0401
     a4c:	48 17       	cp	r20, r24
     a4e:	59 07       	cpc	r21, r25
     a50:	31 f1       	breq	.+76     	; 0xa9e <task_delete+0x64>
		return(0);
	Task_f = (Task_f + 1) % MAX_TASK;
     a52:	80 91 00 04 	lds	r24, 0x0400
     a56:	90 91 01 04 	lds	r25, 0x0401
     a5a:	01 96       	adiw	r24, 0x01	; 1
     a5c:	60 e1       	ldi	r22, 0x10	; 16
     a5e:	70 e0       	ldi	r23, 0x00	; 0
     a60:	0e 94 29 07 	call	0xe52	; 0xe52 <__divmodhi4>
     a64:	90 93 01 04 	sts	0x0401, r25
     a68:	80 93 00 04 	sts	0x0400, r24
	*tskp = Task_q[Task_f];
     a6c:	80 91 00 04 	lds	r24, 0x0400
     a70:	90 91 01 04 	lds	r25, 0x0401
     a74:	fc 01       	movw	r30, r24
     a76:	ee 0f       	add	r30, r30
     a78:	ff 1f       	adc	r31, r31
     a7a:	a3 e0       	ldi	r26, 0x03	; 3
     a7c:	88 0f       	add	r24, r24
     a7e:	99 1f       	adc	r25, r25
     a80:	aa 95       	dec	r26
     a82:	e1 f7       	brne	.-8      	; 0xa7c <task_delete+0x42>
     a84:	e8 0f       	add	r30, r24
     a86:	f9 1f       	adc	r31, r25
     a88:	d9 01       	movw	r26, r18
     a8a:	e0 5a       	subi	r30, 0xA0	; 160
     a8c:	fc 4f       	sbci	r31, 0xFC	; 252
     a8e:	8a e0       	ldi	r24, 0x0A	; 10
     a90:	01 90       	ld	r0, Z+
     a92:	0d 92       	st	X+, r0
     a94:	81 50       	subi	r24, 0x01	; 1
     a96:	e1 f7       	brne	.-8      	; 0xa90 <task_delete+0x56>
	return(1);
     a98:	81 e0       	ldi	r24, 0x01	; 1
     a9a:	90 e0       	ldi	r25, 0x00	; 0
     a9c:	08 95       	ret
	return(1);
}

int task_delete(struct task *tskp) {
	if(Task_r == Task_f)
		return(0);
     a9e:	80 e0       	ldi	r24, 0x00	; 0
     aa0:	90 e0       	ldi	r25, 0x00	; 0
	Task_f = (Task_f + 1) % MAX_TASK;
	*tskp = Task_q[Task_f];
	return(1);
}
     aa2:	08 95       	ret

00000aa4 <task_cmd>:

void task_cmd(char *arg) {
     aa4:	af 92       	push	r10
     aa6:	bf 92       	push	r11
     aa8:	cf 92       	push	r12
     aaa:	df 92       	push	r13
     aac:	ef 92       	push	r14
     aae:	ff 92       	push	r15
     ab0:	0f 93       	push	r16
     ab2:	1f 93       	push	r17
     ab4:	cf 93       	push	r28
     ab6:	df 93       	push	r29
     ab8:	cd b7       	in	r28, 0x3d	; 61
     aba:	de b7       	in	r29, 0x3e	; 62
     abc:	ca 54       	subi	r28, 0x4A	; 74
     abe:	d0 40       	sbci	r29, 0x00	; 0
     ac0:	0f b6       	in	r0, 0x3f	; 63
     ac2:	f8 94       	cli
     ac4:	de bf       	out	0x3e, r29	; 62
     ac6:	0f be       	out	0x3f, r0	; 63
     ac8:	cd bf       	out	0x3d, r28	; 61
	char buf[64], *cp0, *cp1, *cp2, *cp3;
	struct task task;
	int ms;

	if(!uart_peek())	return;
     aca:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <uart_peek>
     ace:	00 97       	sbiw	r24, 0x00	; 0
     ad0:	09 f4       	brne	.+2      	; 0xad4 <task_cmd+0x30>
     ad2:	7c c0       	rjmp	.+248    	; 0xbcc <task_cmd+0x128>
	if(gets(buf) == NULL) {
     ad4:	ce 01       	movw	r24, r28
     ad6:	0b 96       	adiw	r24, 0x0b	; 11
     ad8:	0e 94 15 09 	call	0x122a	; 0x122a <gets>
     adc:	00 97       	sbiw	r24, 0x00	; 0
     ade:	29 f4       	brne	.+10     	; 0xaea <task_cmd+0x46>
		printf("logout, good bye !!!\n");
     ae0:	8d e5       	ldi	r24, 0x5D	; 93
     ae2:	92 e0       	ldi	r25, 0x02	; 2
     ae4:	0e 94 54 09 	call	0x12a8	; 0x12a8 <puts>
     ae8:	ff cf       	rjmp	.-2      	; 0xae8 <task_cmd+0x44>
		while(1);
	}

	cp0 = strtok(buf, 	" \t\n\r");
     aea:	ce 01       	movw	r24, r28
     aec:	0b 96       	adiw	r24, 0x0b	; 11
     aee:	62 e7       	ldi	r22, 0x72	; 114
     af0:	72 e0       	ldi	r23, 0x02	; 2
     af2:	0e 94 9d 08 	call	0x113a	; 0x113a <strtok>
     af6:	8c 01       	movw	r16, r24
	cp1 = strtok(NULL, 	" \t\n\r");
     af8:	80 e0       	ldi	r24, 0x00	; 0
     afa:	90 e0       	ldi	r25, 0x00	; 0
     afc:	62 e7       	ldi	r22, 0x72	; 114
     afe:	72 e0       	ldi	r23, 0x02	; 2
     b00:	0e 94 9d 08 	call	0x113a	; 0x113a <strtok>
     b04:	7c 01       	movw	r14, r24
	cp2 = strtok(NULL, 	" \t\n\r");
     b06:	80 e0       	ldi	r24, 0x00	; 0
     b08:	90 e0       	ldi	r25, 0x00	; 0
     b0a:	62 e7       	ldi	r22, 0x72	; 114
     b0c:	72 e0       	ldi	r23, 0x02	; 2
     b0e:	0e 94 9d 08 	call	0x113a	; 0x113a <strtok>
     b12:	5c 01       	movw	r10, r24
	cp3 = strtok(NULL, 	" \t\n\r");
     b14:	80 e0       	ldi	r24, 0x00	; 0
     b16:	90 e0       	ldi	r25, 0x00	; 0
     b18:	62 e7       	ldi	r22, 0x72	; 114
     b1a:	72 e0       	ldi	r23, 0x02	; 2
     b1c:	0e 94 9d 08 	call	0x113a	; 0x113a <strtok>
     b20:	6c 01       	movw	r12, r24

	if(cp0 == NULL) {
     b22:	01 15       	cp	r16, r1
     b24:	11 05       	cpc	r17, r1
     b26:	09 f4       	brne	.+2      	; 0xb2a <task_cmd+0x86>
     b28:	45 c0       	rjmp	.+138    	; 0xbb4 <task_cmd+0x110>
		printf("$ "); return;
	}
	if(!strcmp(cp0, "prime"))
     b2a:	c8 01       	movw	r24, r16
     b2c:	6a e7       	ldi	r22, 0x7A	; 122
     b2e:	72 e0       	ldi	r23, 0x02	; 2
     b30:	0e 94 a2 08 	call	0x1144	; 0x1144 <strcmp>
     b34:	00 97       	sbiw	r24, 0x00	; 0
     b36:	21 f4       	brne	.+8      	; 0xb40 <task_cmd+0x9c>
		task_prime(cp1);
     b38:	c7 01       	movw	r24, r14
     b3a:	0e 94 aa 02 	call	0x554	; 0x554 <task_prime>
     b3e:	3a c0       	rjmp	.+116    	; 0xbb4 <task_cmd+0x110>
	else if(!strcmp(cp0, "timer")) {
     b40:	c8 01       	movw	r24, r16
     b42:	60 e8       	ldi	r22, 0x80	; 128
     b44:	72 e0       	ldi	r23, 0x02	; 2
     b46:	0e 94 a2 08 	call	0x1144	; 0x1144 <strcmp>
     b4a:	00 97       	sbiw	r24, 0x00	; 0
     b4c:	79 f5       	brne	.+94     	; 0xbac <task_cmd+0x108>
		if(cp1 == NULL) {
     b4e:	e1 14       	cp	r14, r1
     b50:	f1 04       	cpc	r15, r1
     b52:	19 f4       	brne	.+6      	; 0xb5a <task_cmd+0xb6>
			printf("!!!-222\n");
     b54:	86 e8       	ldi	r24, 0x86	; 134
     b56:	92 e0       	ldi	r25, 0x02	; 2
     b58:	2b c0       	rjmp	.+86     	; 0xbb0 <task_cmd+0x10c>
			printf("$ ");
			return;
		}
		ms = atoi(cp1) / 256;
     b5a:	c7 01       	movw	r24, r14
     b5c:	0e 94 7f 08 	call	0x10fe	; 0x10fe <atoi>
     b60:	8c 01       	movw	r16, r24
		if(!strcmp(cp2, "prime")) {
     b62:	c5 01       	movw	r24, r10
     b64:	6a e7       	ldi	r22, 0x7A	; 122
     b66:	72 e0       	ldi	r23, 0x02	; 2
     b68:	0e 94 a2 08 	call	0x1144	; 0x1144 <strcmp>
     b6c:	00 97       	sbiw	r24, 0x00	; 0
     b6e:	d9 f4       	brne	.+54     	; 0xba6 <task_cmd+0x102>
			task.fun = task_prime;
     b70:	8a ea       	ldi	r24, 0xAA	; 170
     b72:	92 e0       	ldi	r25, 0x02	; 2
     b74:	9a 83       	std	Y+2, r25	; 0x02
     b76:	89 83       	std	Y+1, r24	; 0x01
			if(cp3)	strcpy(task.arg, cp3);
     b78:	ce 01       	movw	r24, r28
     b7a:	03 96       	adiw	r24, 0x03	; 3
     b7c:	c1 14       	cp	r12, r1
     b7e:	d1 04       	cpc	r13, r1
     b80:	11 f0       	breq	.+4      	; 0xb86 <task_cmd+0xe2>
     b82:	b6 01       	movw	r22, r12
     b84:	02 c0       	rjmp	.+4      	; 0xb8a <task_cmd+0xe6>
			else	strcpy(task.arg, "");
     b86:	6e e8       	ldi	r22, 0x8E	; 142
     b88:	72 e0       	ldi	r23, 0x02	; 2
     b8a:	0e 94 ab 08 	call	0x1156	; 0x1156 <strcpy>
			cli();
     b8e:	f8 94       	cli
		if(cp1 == NULL) {
			printf("!!!-222\n");
			printf("$ ");
			return;
		}
		ms = atoi(cp1) / 256;
     b90:	c8 01       	movw	r24, r16
     b92:	60 e0       	ldi	r22, 0x00	; 0
     b94:	71 e0       	ldi	r23, 0x01	; 1
     b96:	0e 94 29 07 	call	0xe52	; 0xe52 <__divmodhi4>
		if(!strcmp(cp2, "prime")) {
			task.fun = task_prime;
			if(cp3)	strcpy(task.arg, cp3);
			else	strcpy(task.arg, "");
			cli();
			insert_timer(&task, ms);
     b9a:	ce 01       	movw	r24, r28
     b9c:	01 96       	adiw	r24, 0x01	; 1
     b9e:	0e 94 a7 03 	call	0x74e	; 0x74e <insert_timer>
			sei();
     ba2:	78 94       	sei
     ba4:	07 c0       	rjmp	.+14     	; 0xbb4 <task_cmd+0x110>
		}
		else printf("!!!-333\n");
     ba6:	8f e8       	ldi	r24, 0x8F	; 143
     ba8:	92 e0       	ldi	r25, 0x02	; 2
     baa:	02 c0       	rjmp	.+4      	; 0xbb0 <task_cmd+0x10c>
	}
	else printf("Unknown command...\n");
     bac:	87 e9       	ldi	r24, 0x97	; 151
     bae:	92 e0       	ldi	r25, 0x02	; 2
     bb0:	0e 94 54 09 	call	0x12a8	; 0x12a8 <puts>
	printf("$ ");
     bb4:	0f 92       	push	r0
     bb6:	0f 92       	push	r0
     bb8:	87 e7       	ldi	r24, 0x77	; 119
     bba:	92 e0       	ldi	r25, 0x02	; 2
     bbc:	ed b7       	in	r30, 0x3d	; 61
     bbe:	fe b7       	in	r31, 0x3e	; 62
     bc0:	92 83       	std	Z+2, r25	; 0x02
     bc2:	81 83       	std	Z+1, r24	; 0x01
     bc4:	0e 94 3b 09 	call	0x1276	; 0x1276 <printf>
     bc8:	0f 90       	pop	r0
     bca:	0f 90       	pop	r0
}
     bcc:	c6 5b       	subi	r28, 0xB6	; 182
     bce:	df 4f       	sbci	r29, 0xFF	; 255
     bd0:	0f b6       	in	r0, 0x3f	; 63
     bd2:	f8 94       	cli
     bd4:	de bf       	out	0x3e, r29	; 62
     bd6:	0f be       	out	0x3f, r0	; 63
     bd8:	cd bf       	out	0x3d, r28	; 61
     bda:	df 91       	pop	r29
     bdc:	cf 91       	pop	r28
     bde:	1f 91       	pop	r17
     be0:	0f 91       	pop	r16
     be2:	ff 90       	pop	r15
     be4:	ef 90       	pop	r14
     be6:	df 90       	pop	r13
     be8:	cf 90       	pop	r12
     bea:	bf 90       	pop	r11
     bec:	af 90       	pop	r10
     bee:	08 95       	ret

00000bf0 <uart_getchar>:

int uart_getchar(FILE *stream) {
	char ch;

	do {
		cli();
     bf0:	f8 94       	cli
		ch = qi_delete();
     bf2:	0e 94 2d 03 	call	0x65a	; 0x65a <qi_delete>
		sei();
     bf6:	78 94       	sei
	} while (ch == 0);
     bf8:	88 23       	and	r24, r24
     bfa:	d1 f3       	breq	.-12     	; 0xbf0 <uart_getchar>

	if(ch == EOT)	return(-1);
     bfc:	84 30       	cpi	r24, 0x04	; 4
     bfe:	11 f0       	breq	.+4      	; 0xc04 <uart_getchar+0x14>
	else			return(ch);
     c00:	90 e0       	ldi	r25, 0x00	; 0
     c02:	08 95       	ret
		cli();
		ch = qi_delete();
		sei();
	} while (ch == 0);

	if(ch == EOT)	return(-1);
     c04:	8f ef       	ldi	r24, 0xFF	; 255
     c06:	9f ef       	ldi	r25, 0xFF	; 255
	else			return(ch);
}
     c08:	08 95       	ret

00000c0a <uart_putchar>:
	sbi(UCSR0B, TXCIE0);
	sbi(UCSR0B, RXEN0);
	sbi(UCSR0B, RXCIE0);
}

int uart_putchar(char ch, FILE *stream) {
     c0a:	cf 93       	push	r28
     c0c:	c8 2f       	mov	r28, r24
	if(ch == '\n')	uart_putchar('\r', stream);
     c0e:	8a 30       	cpi	r24, 0x0A	; 10
     c10:	19 f4       	brne	.+6      	; 0xc18 <uart_putchar+0xe>
     c12:	8d e0       	ldi	r24, 0x0D	; 13
     c14:	0e 94 05 06 	call	0xc0a	; 0xc0a <uart_putchar>
	
	cli();
     c18:	f8 94       	cli
	if(!uart_busy) {
     c1a:	80 91 02 04 	lds	r24, 0x0402
     c1e:	88 23       	and	r24, r24
     c20:	59 f4       	brne	.+22     	; 0xc38 <uart_putchar+0x2e>
		UDR0 = ch;
     c22:	c0 93 c6 00 	sts	0x00C6, r28
		uart_busy = 1;
     c26:	81 e0       	ldi	r24, 0x01	; 1
     c28:	80 93 02 04 	sts	0x0402, r24
     c2c:	0a c0       	rjmp	.+20     	; 0xc42 <uart_putchar+0x38>
	} 
	else {
		while(qo_insert(ch) == 0) {
			sei();
     c2e:	78 94       	sei
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     c30:	86 ef       	ldi	r24, 0xF6	; 246
     c32:	8a 95       	dec	r24
     c34:	f1 f7       	brne	.-4      	; 0xc32 <uart_putchar+0x28>
			_delay_us(100);
			cli();
     c36:	f8 94       	cli
	if(!uart_busy) {
		UDR0 = ch;
		uart_busy = 1;
	} 
	else {
		while(qo_insert(ch) == 0) {
     c38:	8c 2f       	mov	r24, r28
     c3a:	0e 94 4a 03 	call	0x694	; 0x694 <qo_insert>
     c3e:	00 97       	sbiw	r24, 0x00	; 0
     c40:	b1 f3       	breq	.-20     	; 0xc2e <uart_putchar+0x24>
			sei();
			_delay_us(100);
			cli();
		}
	}
	sei();
     c42:	78 94       	sei

	return(1);
}
     c44:	81 e0       	ldi	r24, 0x01	; 1
     c46:	90 e0       	ldi	r25, 0x00	; 0
     c48:	cf 91       	pop	r28
     c4a:	08 95       	ret

00000c4c <uart_init>:
FILE	Mystdout = FDEV_SETUP_STREAM(uart_putchar, NULL, _FDEV_SETUP_WRITE);
FILE	Mystdin = FDEV_SETUP_STREAM(NULL, uart_getchar, _FDEV_SETUP_READ);
char	uart_busy;

void uart_init() {
	stdin = &Mystdin; stdout = &Mystdout;
     c4c:	8b ea       	ldi	r24, 0xAB	; 171
     c4e:	92 e0       	ldi	r25, 0x02	; 2
     c50:	90 93 08 04 	sts	0x0408, r25
     c54:	80 93 07 04 	sts	0x0407, r24
     c58:	89 eb       	ldi	r24, 0xB9	; 185
     c5a:	92 e0       	ldi	r25, 0x02	; 2
     c5c:	90 93 0a 04 	sts	0x040A, r25
     c60:	80 93 09 04 	sts	0x0409, r24
	q_init();
     c64:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <q_init>
	uart_busy = 0;
     c68:	10 92 02 04 	sts	0x0402, r1
	
	UBRR0H = 0x00; UBRR0L = 0x07;
     c6c:	10 92 c5 00 	sts	0x00C5, r1
     c70:	87 e0       	ldi	r24, 0x07	; 7
     c72:	80 93 c4 00 	sts	0x00C4, r24
	sbi(UCSR0A, U2X0);
     c76:	e0 ec       	ldi	r30, 0xC0	; 192
     c78:	f0 e0       	ldi	r31, 0x00	; 0
     c7a:	80 81       	ld	r24, Z
     c7c:	82 60       	ori	r24, 0x02	; 2
     c7e:	80 83       	st	Z, r24
	sbi(UCSR0B, TXEN0);
     c80:	e1 ec       	ldi	r30, 0xC1	; 193
     c82:	f0 e0       	ldi	r31, 0x00	; 0
     c84:	80 81       	ld	r24, Z
     c86:	88 60       	ori	r24, 0x08	; 8
     c88:	80 83       	st	Z, r24
	sbi(UCSR0B, TXCIE0);
     c8a:	80 81       	ld	r24, Z
     c8c:	80 64       	ori	r24, 0x40	; 64
     c8e:	80 83       	st	Z, r24
	sbi(UCSR0B, RXEN0);
     c90:	80 81       	ld	r24, Z
     c92:	80 61       	ori	r24, 0x10	; 16
     c94:	80 83       	st	Z, r24
	sbi(UCSR0B, RXCIE0);
     c96:	80 81       	ld	r24, Z
     c98:	80 68       	ori	r24, 0x80	; 128
     c9a:	80 83       	st	Z, r24
}
     c9c:	08 95       	ret

00000c9e <uart_echo>:

	if(ch == EOT)	return(-1);
	else			return(ch);
}

void uart_echo (char ch) {
     c9e:	cf 93       	push	r28
     ca0:	c8 2f       	mov	r28, r24
	if(ch == '\n')	uart_echo('\r');
     ca2:	8a 30       	cpi	r24, 0x0A	; 10
     ca4:	19 f4       	brne	.+6      	; 0xcac <uart_echo+0xe>
     ca6:	8d e0       	ldi	r24, 0x0D	; 13
     ca8:	0e 94 4f 06 	call	0xc9e	; 0xc9e <uart_echo>
	if(!uart_busy) {
     cac:	80 91 02 04 	lds	r24, 0x0402
     cb0:	88 23       	and	r24, r24
     cb2:	31 f4       	brne	.+12     	; 0xcc0 <uart_echo+0x22>
		UDR0 = ch;
     cb4:	c0 93 c6 00 	sts	0x00C6, r28
		uart_busy = 1;
     cb8:	81 e0       	ldi	r24, 0x01	; 1
     cba:	80 93 02 04 	sts	0x0402, r24
     cbe:	03 c0       	rjmp	.+6      	; 0xcc6 <uart_echo+0x28>
	}
	else	qo_insert(ch);
     cc0:	8c 2f       	mov	r24, r28
     cc2:	0e 94 4a 03 	call	0x694	; 0x694 <qo_insert>
}
     cc6:	cf 91       	pop	r28
     cc8:	08 95       	ret

00000cca <__vector_27>:

ISR(USART0_TX_vect) {
     cca:	1f 92       	push	r1
     ccc:	0f 92       	push	r0
     cce:	0f b6       	in	r0, 0x3f	; 63
     cd0:	0f 92       	push	r0
     cd2:	0b b6       	in	r0, 0x3b	; 59
     cd4:	0f 92       	push	r0
     cd6:	11 24       	eor	r1, r1
     cd8:	2f 93       	push	r18
     cda:	3f 93       	push	r19
     cdc:	4f 93       	push	r20
     cde:	5f 93       	push	r21
     ce0:	6f 93       	push	r22
     ce2:	7f 93       	push	r23
     ce4:	8f 93       	push	r24
     ce6:	9f 93       	push	r25
     ce8:	af 93       	push	r26
     cea:	bf 93       	push	r27
     cec:	ef 93       	push	r30
     cee:	ff 93       	push	r31
   char ch;

   if((ch = qo_delete()) == 0)
     cf0:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <qo_delete>
     cf4:	88 23       	and	r24, r24
     cf6:	19 f4       	brne	.+6      	; 0xcfe <__vector_27+0x34>
      uart_busy = 0;
     cf8:	10 92 02 04 	sts	0x0402, r1
     cfc:	02 c0       	rjmp	.+4      	; 0xd02 <__vector_27+0x38>
   else
      UDR0 = ch;
     cfe:	80 93 c6 00 	sts	0x00C6, r24
}
     d02:	ff 91       	pop	r31
     d04:	ef 91       	pop	r30
     d06:	bf 91       	pop	r27
     d08:	af 91       	pop	r26
     d0a:	9f 91       	pop	r25
     d0c:	8f 91       	pop	r24
     d0e:	7f 91       	pop	r23
     d10:	6f 91       	pop	r22
     d12:	5f 91       	pop	r21
     d14:	4f 91       	pop	r20
     d16:	3f 91       	pop	r19
     d18:	2f 91       	pop	r18
     d1a:	0f 90       	pop	r0
     d1c:	0b be       	out	0x3b, r0	; 59
     d1e:	0f 90       	pop	r0
     d20:	0f be       	out	0x3f, r0	; 63
     d22:	0f 90       	pop	r0
     d24:	1f 90       	pop	r1
     d26:	18 95       	reti

00000d28 <__vector_25>:

static int echo_mode = 1;

ISR(USART0_RX_vect) {
     d28:	1f 92       	push	r1
     d2a:	0f 92       	push	r0
     d2c:	0f b6       	in	r0, 0x3f	; 63
     d2e:	0f 92       	push	r0
     d30:	0b b6       	in	r0, 0x3b	; 59
     d32:	0f 92       	push	r0
     d34:	11 24       	eor	r1, r1
     d36:	1f 93       	push	r17
     d38:	2f 93       	push	r18
     d3a:	3f 93       	push	r19
     d3c:	4f 93       	push	r20
     d3e:	5f 93       	push	r21
     d40:	6f 93       	push	r22
     d42:	7f 93       	push	r23
     d44:	8f 93       	push	r24
     d46:	9f 93       	push	r25
     d48:	af 93       	push	r26
     d4a:	bf 93       	push	r27
     d4c:	ef 93       	push	r30
     d4e:	ff 93       	push	r31
     d50:	cf 93       	push	r28
     d52:	df 93       	push	r29
     d54:	cd b7       	in	r28, 0x3d	; 61
     d56:	de b7       	in	r29, 0x3e	; 62
     d58:	2a 97       	sbiw	r28, 0x0a	; 10
     d5a:	de bf       	out	0x3e, r29	; 62
     d5c:	cd bf       	out	0x3d, r28	; 61
	struct task task;
	char ch;

	ch = UDR0;
     d5e:	10 91 c6 00 	lds	r17, 0x00C6

	if(ch == ESC) {
     d62:	1b 31       	cpi	r17, 0x1B	; 27
     d64:	61 f4       	brne	.+24     	; 0xd7e <__vector_25+0x56>
		echo_mode = (echo_mode + 1) & 0x01;
     d66:	80 91 c7 02 	lds	r24, 0x02C7
     d6a:	90 91 c8 02 	lds	r25, 0x02C8
     d6e:	01 96       	adiw	r24, 0x01	; 1
     d70:	81 70       	andi	r24, 0x01	; 1
     d72:	90 70       	andi	r25, 0x00	; 0
     d74:	90 93 c8 02 	sts	0x02C8, r25
     d78:	80 93 c7 02 	sts	0x02C7, r24
		return;
     d7c:	24 c0       	rjmp	.+72     	; 0xdc6 <__vector_25+0x9e>
	}
	
	if(ch != EOT) {
     d7e:	14 30       	cpi	r17, 0x04	; 4
     d80:	69 f0       	breq	.+26     	; 0xd9c <__vector_25+0x74>
		if(ch == '\r')	ch = '\n';
     d82:	1d 30       	cpi	r17, 0x0D	; 13
     d84:	09 f4       	brne	.+2      	; 0xd88 <__vector_25+0x60>
     d86:	1a e0       	ldi	r17, 0x0A	; 10
		if(echo_mode)	uart_echo(ch);
     d88:	20 91 c7 02 	lds	r18, 0x02C7
     d8c:	30 91 c8 02 	lds	r19, 0x02C8
     d90:	21 15       	cp	r18, r1
     d92:	31 05       	cpc	r19, r1
     d94:	19 f0       	breq	.+6      	; 0xd9c <__vector_25+0x74>
     d96:	81 2f       	mov	r24, r17
     d98:	0e 94 4f 06 	call	0xc9e	; 0xc9e <uart_echo>
	}
	qi_insert(ch);
     d9c:	81 2f       	mov	r24, r17
     d9e:	0e 94 0b 03 	call	0x616	; 0x616 <qi_insert>

	if(ch == EOT || ch == '\n') {
     da2:	14 30       	cpi	r17, 0x04	; 4
     da4:	11 f0       	breq	.+4      	; 0xdaa <__vector_25+0x82>
     da6:	1a 30       	cpi	r17, 0x0A	; 10
     da8:	71 f4       	brne	.+28     	; 0xdc6 <__vector_25+0x9e>
		task.fun = task_cmd;
     daa:	82 e5       	ldi	r24, 0x52	; 82
     dac:	95 e0       	ldi	r25, 0x05	; 5
     dae:	9a 83       	std	Y+2, r25	; 0x02
     db0:	89 83       	std	Y+1, r24	; 0x01
		strcpy(task.arg, "");
     db2:	ce 01       	movw	r24, r28
     db4:	03 96       	adiw	r24, 0x03	; 3
     db6:	6a ea       	ldi	r22, 0xAA	; 170
     db8:	72 e0       	ldi	r23, 0x02	; 2
     dba:	0e 94 ab 08 	call	0x1156	; 0x1156 <strcpy>
		task_insert(&task);
     dbe:	ce 01       	movw	r24, r28
     dc0:	01 96       	adiw	r24, 0x01	; 1
     dc2:	0e 94 8b 04 	call	0x916	; 0x916 <task_insert>
	}
}
     dc6:	2a 96       	adiw	r28, 0x0a	; 10
     dc8:	de bf       	out	0x3e, r29	; 62
     dca:	cd bf       	out	0x3d, r28	; 61
     dcc:	df 91       	pop	r29
     dce:	cf 91       	pop	r28
     dd0:	ff 91       	pop	r31
     dd2:	ef 91       	pop	r30
     dd4:	bf 91       	pop	r27
     dd6:	af 91       	pop	r26
     dd8:	9f 91       	pop	r25
     dda:	8f 91       	pop	r24
     ddc:	7f 91       	pop	r23
     dde:	6f 91       	pop	r22
     de0:	5f 91       	pop	r21
     de2:	4f 91       	pop	r20
     de4:	3f 91       	pop	r19
     de6:	2f 91       	pop	r18
     de8:	1f 91       	pop	r17
     dea:	0f 90       	pop	r0
     dec:	0b be       	out	0x3b, r0	; 59
     dee:	0f 90       	pop	r0
     df0:	0f be       	out	0x3f, r0	; 63
     df2:	0f 90       	pop	r0
     df4:	1f 90       	pop	r1
     df6:	18 95       	reti

00000df8 <uart_peek>:

int uart_peek() {
	return(qi_peek());
     df8:	0e 94 89 03 	call	0x712	; 0x712 <qi_peek>
}
     dfc:	08 95       	ret

00000dfe <main>:
#include "prime.h"
#include "queue.h"
#include "link.h"
#include "timer_task.h"

int main() {
     dfe:	cf 93       	push	r28
     e00:	df 93       	push	r29
     e02:	cd b7       	in	r28, 0x3d	; 61
     e04:	de b7       	in	r29, 0x3e	; 62
     e06:	2a 97       	sbiw	r28, 0x0a	; 10
     e08:	0f b6       	in	r0, 0x3f	; 63
     e0a:	f8 94       	cli
     e0c:	de bf       	out	0x3e, r29	; 62
     e0e:	0f be       	out	0x3f, r0	; 63
     e10:	cd bf       	out	0x3d, r28	; 61
	int 	tag;
	struct 	task task;

	uart_init();
     e12:	0e 94 26 06 	call	0xc4c	; 0xc4c <uart_init>
	task_init();
     e16:	0e 94 82 04 	call	0x904	; 0x904 <task_init>
	timer_init();
     e1a:	0e 94 6d 04 	call	0x8da	; 0x8da <timer_init>

	printf("$ ");
     e1e:	0f 92       	push	r0
     e20:	0f 92       	push	r0
     e22:	88 e2       	ldi	r24, 0x28	; 40
     e24:	92 e0       	ldi	r25, 0x02	; 2
     e26:	ed b7       	in	r30, 0x3d	; 61
     e28:	fe b7       	in	r31, 0x3e	; 62
     e2a:	92 83       	std	Z+2, r25	; 0x02
     e2c:	81 83       	std	Z+1, r24	; 0x01
     e2e:	0e 94 3b 09 	call	0x1276	; 0x1276 <printf>
     e32:	0f 90       	pop	r0
     e34:	0f 90       	pop	r0

	while(1) {
		cli();
     e36:	f8 94       	cli
		tag = task_delete(&task);
     e38:	ce 01       	movw	r24, r28
     e3a:	01 96       	adiw	r24, 0x01	; 1
     e3c:	0e 94 1d 05 	call	0xa3a	; 0xa3a <task_delete>
		sei();
     e40:	78 94       	sei
		if(tag)
     e42:	00 97       	sbiw	r24, 0x00	; 0
     e44:	c1 f3       	breq	.-16     	; 0xe36 <main+0x38>
			(*(task.fun))(task.arg);
     e46:	e9 81       	ldd	r30, Y+1	; 0x01
     e48:	fa 81       	ldd	r31, Y+2	; 0x02
     e4a:	ce 01       	movw	r24, r28
     e4c:	03 96       	adiw	r24, 0x03	; 3
     e4e:	19 95       	eicall
     e50:	f2 cf       	rjmp	.-28     	; 0xe36 <main+0x38>

00000e52 <__divmodhi4>:
     e52:	97 fb       	bst	r25, 7
     e54:	09 2e       	mov	r0, r25
     e56:	07 26       	eor	r0, r23
     e58:	0a d0       	rcall	.+20     	; 0xe6e <__divmodhi4_neg1>
     e5a:	77 fd       	sbrc	r23, 7
     e5c:	04 d0       	rcall	.+8      	; 0xe66 <__divmodhi4_neg2>
     e5e:	0c d0       	rcall	.+24     	; 0xe78 <__udivmodhi4>
     e60:	06 d0       	rcall	.+12     	; 0xe6e <__divmodhi4_neg1>
     e62:	00 20       	and	r0, r0
     e64:	1a f4       	brpl	.+6      	; 0xe6c <__divmodhi4_exit>

00000e66 <__divmodhi4_neg2>:
     e66:	70 95       	com	r23
     e68:	61 95       	neg	r22
     e6a:	7f 4f       	sbci	r23, 0xFF	; 255

00000e6c <__divmodhi4_exit>:
     e6c:	08 95       	ret

00000e6e <__divmodhi4_neg1>:
     e6e:	f6 f7       	brtc	.-4      	; 0xe6c <__divmodhi4_exit>
     e70:	90 95       	com	r25
     e72:	81 95       	neg	r24
     e74:	9f 4f       	sbci	r25, 0xFF	; 255
     e76:	08 95       	ret

00000e78 <__udivmodhi4>:
     e78:	aa 1b       	sub	r26, r26
     e7a:	bb 1b       	sub	r27, r27
     e7c:	51 e1       	ldi	r21, 0x11	; 17
     e7e:	07 c0       	rjmp	.+14     	; 0xe8e <__udivmodhi4_ep>

00000e80 <__udivmodhi4_loop>:
     e80:	aa 1f       	adc	r26, r26
     e82:	bb 1f       	adc	r27, r27
     e84:	a6 17       	cp	r26, r22
     e86:	b7 07       	cpc	r27, r23
     e88:	10 f0       	brcs	.+4      	; 0xe8e <__udivmodhi4_ep>
     e8a:	a6 1b       	sub	r26, r22
     e8c:	b7 0b       	sbc	r27, r23

00000e8e <__udivmodhi4_ep>:
     e8e:	88 1f       	adc	r24, r24
     e90:	99 1f       	adc	r25, r25
     e92:	5a 95       	dec	r21
     e94:	a9 f7       	brne	.-22     	; 0xe80 <__udivmodhi4_loop>
     e96:	80 95       	com	r24
     e98:	90 95       	com	r25
     e9a:	bc 01       	movw	r22, r24
     e9c:	cd 01       	movw	r24, r26
     e9e:	08 95       	ret

00000ea0 <malloc>:
     ea0:	cf 93       	push	r28
     ea2:	df 93       	push	r29
     ea4:	ac 01       	movw	r20, r24
     ea6:	82 30       	cpi	r24, 0x02	; 2
     ea8:	91 05       	cpc	r25, r1
     eaa:	10 f4       	brcc	.+4      	; 0xeb0 <malloc+0x10>
     eac:	42 e0       	ldi	r20, 0x02	; 2
     eae:	50 e0       	ldi	r21, 0x00	; 0
     eb0:	e0 91 05 04 	lds	r30, 0x0405
     eb4:	f0 91 06 04 	lds	r31, 0x0406
     eb8:	20 e0       	ldi	r18, 0x00	; 0
     eba:	30 e0       	ldi	r19, 0x00	; 0
     ebc:	a0 e0       	ldi	r26, 0x00	; 0
     ebe:	b0 e0       	ldi	r27, 0x00	; 0
     ec0:	24 c0       	rjmp	.+72     	; 0xf0a <malloc+0x6a>
     ec2:	80 81       	ld	r24, Z
     ec4:	91 81       	ldd	r25, Z+1	; 0x01
     ec6:	84 17       	cp	r24, r20
     ec8:	95 07       	cpc	r25, r21
     eca:	d0 f0       	brcs	.+52     	; 0xf00 <malloc+0x60>
     ecc:	84 17       	cp	r24, r20
     ece:	95 07       	cpc	r25, r21
     ed0:	71 f4       	brne	.+28     	; 0xeee <malloc+0x4e>
     ed2:	82 81       	ldd	r24, Z+2	; 0x02
     ed4:	93 81       	ldd	r25, Z+3	; 0x03
     ed6:	10 97       	sbiw	r26, 0x00	; 0
     ed8:	29 f0       	breq	.+10     	; 0xee4 <malloc+0x44>
     eda:	13 96       	adiw	r26, 0x03	; 3
     edc:	9c 93       	st	X, r25
     ede:	8e 93       	st	-X, r24
     ee0:	12 97       	sbiw	r26, 0x02	; 2
     ee2:	2c c0       	rjmp	.+88     	; 0xf3c <malloc+0x9c>
     ee4:	90 93 06 04 	sts	0x0406, r25
     ee8:	80 93 05 04 	sts	0x0405, r24
     eec:	27 c0       	rjmp	.+78     	; 0xf3c <malloc+0x9c>
     eee:	21 15       	cp	r18, r1
     ef0:	31 05       	cpc	r19, r1
     ef2:	19 f0       	breq	.+6      	; 0xefa <malloc+0x5a>
     ef4:	82 17       	cp	r24, r18
     ef6:	93 07       	cpc	r25, r19
     ef8:	18 f4       	brcc	.+6      	; 0xf00 <malloc+0x60>
     efa:	9c 01       	movw	r18, r24
     efc:	bd 01       	movw	r22, r26
     efe:	ef 01       	movw	r28, r30
     f00:	92 81       	ldd	r25, Z+2	; 0x02
     f02:	83 81       	ldd	r24, Z+3	; 0x03
     f04:	df 01       	movw	r26, r30
     f06:	e9 2f       	mov	r30, r25
     f08:	f8 2f       	mov	r31, r24
     f0a:	30 97       	sbiw	r30, 0x00	; 0
     f0c:	d1 f6       	brne	.-76     	; 0xec2 <malloc+0x22>
     f0e:	21 15       	cp	r18, r1
     f10:	31 05       	cpc	r19, r1
     f12:	f9 f0       	breq	.+62     	; 0xf52 <malloc+0xb2>
     f14:	c9 01       	movw	r24, r18
     f16:	84 1b       	sub	r24, r20
     f18:	95 0b       	sbc	r25, r21
     f1a:	84 30       	cpi	r24, 0x04	; 4
     f1c:	91 05       	cpc	r25, r1
     f1e:	80 f4       	brcc	.+32     	; 0xf40 <malloc+0xa0>
     f20:	8a 81       	ldd	r24, Y+2	; 0x02
     f22:	9b 81       	ldd	r25, Y+3	; 0x03
     f24:	61 15       	cp	r22, r1
     f26:	71 05       	cpc	r23, r1
     f28:	21 f0       	breq	.+8      	; 0xf32 <malloc+0x92>
     f2a:	fb 01       	movw	r30, r22
     f2c:	93 83       	std	Z+3, r25	; 0x03
     f2e:	82 83       	std	Z+2, r24	; 0x02
     f30:	04 c0       	rjmp	.+8      	; 0xf3a <malloc+0x9a>
     f32:	90 93 06 04 	sts	0x0406, r25
     f36:	80 93 05 04 	sts	0x0405, r24
     f3a:	fe 01       	movw	r30, r28
     f3c:	32 96       	adiw	r30, 0x02	; 2
     f3e:	42 c0       	rjmp	.+132    	; 0xfc4 <malloc+0x124>
     f40:	fe 01       	movw	r30, r28
     f42:	e8 0f       	add	r30, r24
     f44:	f9 1f       	adc	r31, r25
     f46:	41 93       	st	Z+, r20
     f48:	51 93       	st	Z+, r21
     f4a:	02 97       	sbiw	r24, 0x02	; 2
     f4c:	99 83       	std	Y+1, r25	; 0x01
     f4e:	88 83       	st	Y, r24
     f50:	39 c0       	rjmp	.+114    	; 0xfc4 <malloc+0x124>
     f52:	80 91 03 04 	lds	r24, 0x0403
     f56:	90 91 04 04 	lds	r25, 0x0404
     f5a:	00 97       	sbiw	r24, 0x00	; 0
     f5c:	41 f4       	brne	.+16     	; 0xf6e <malloc+0xce>
     f5e:	80 91 cb 02 	lds	r24, 0x02CB
     f62:	90 91 cc 02 	lds	r25, 0x02CC
     f66:	90 93 04 04 	sts	0x0404, r25
     f6a:	80 93 03 04 	sts	0x0403, r24
     f6e:	20 91 c9 02 	lds	r18, 0x02C9
     f72:	30 91 ca 02 	lds	r19, 0x02CA
     f76:	21 15       	cp	r18, r1
     f78:	31 05       	cpc	r19, r1
     f7a:	41 f4       	brne	.+16     	; 0xf8c <malloc+0xec>
     f7c:	2d b7       	in	r18, 0x3d	; 61
     f7e:	3e b7       	in	r19, 0x3e	; 62
     f80:	80 91 cd 02 	lds	r24, 0x02CD
     f84:	90 91 ce 02 	lds	r25, 0x02CE
     f88:	28 1b       	sub	r18, r24
     f8a:	39 0b       	sbc	r19, r25
     f8c:	e0 91 03 04 	lds	r30, 0x0403
     f90:	f0 91 04 04 	lds	r31, 0x0404
     f94:	e2 17       	cp	r30, r18
     f96:	f3 07       	cpc	r31, r19
     f98:	98 f4       	brcc	.+38     	; 0xfc0 <malloc+0x120>
     f9a:	2e 1b       	sub	r18, r30
     f9c:	3f 0b       	sbc	r19, r31
     f9e:	24 17       	cp	r18, r20
     fa0:	35 07       	cpc	r19, r21
     fa2:	70 f0       	brcs	.+28     	; 0xfc0 <malloc+0x120>
     fa4:	ca 01       	movw	r24, r20
     fa6:	02 96       	adiw	r24, 0x02	; 2
     fa8:	28 17       	cp	r18, r24
     faa:	39 07       	cpc	r19, r25
     fac:	48 f0       	brcs	.+18     	; 0xfc0 <malloc+0x120>
     fae:	8e 0f       	add	r24, r30
     fb0:	9f 1f       	adc	r25, r31
     fb2:	90 93 04 04 	sts	0x0404, r25
     fb6:	80 93 03 04 	sts	0x0403, r24
     fba:	41 93       	st	Z+, r20
     fbc:	51 93       	st	Z+, r21
     fbe:	02 c0       	rjmp	.+4      	; 0xfc4 <malloc+0x124>
     fc0:	e0 e0       	ldi	r30, 0x00	; 0
     fc2:	f0 e0       	ldi	r31, 0x00	; 0
     fc4:	cf 01       	movw	r24, r30
     fc6:	df 91       	pop	r29
     fc8:	cf 91       	pop	r28
     fca:	08 95       	ret

00000fcc <free>:
     fcc:	0f 93       	push	r16
     fce:	1f 93       	push	r17
     fd0:	cf 93       	push	r28
     fd2:	df 93       	push	r29
     fd4:	9c 01       	movw	r18, r24
     fd6:	00 97       	sbiw	r24, 0x00	; 0
     fd8:	09 f4       	brne	.+2      	; 0xfdc <free+0x10>
     fda:	8c c0       	rjmp	.+280    	; 0x10f4 <free+0x128>
     fdc:	dc 01       	movw	r26, r24
     fde:	12 97       	sbiw	r26, 0x02	; 2
     fe0:	13 96       	adiw	r26, 0x03	; 3
     fe2:	1c 92       	st	X, r1
     fe4:	1e 92       	st	-X, r1
     fe6:	12 97       	sbiw	r26, 0x02	; 2
     fe8:	60 91 05 04 	lds	r22, 0x0405
     fec:	70 91 06 04 	lds	r23, 0x0406
     ff0:	61 15       	cp	r22, r1
     ff2:	71 05       	cpc	r23, r1
     ff4:	89 f4       	brne	.+34     	; 0x1018 <free+0x4c>
     ff6:	8d 91       	ld	r24, X+
     ff8:	9c 91       	ld	r25, X
     ffa:	11 97       	sbiw	r26, 0x01	; 1
     ffc:	82 0f       	add	r24, r18
     ffe:	93 1f       	adc	r25, r19
    1000:	20 91 03 04 	lds	r18, 0x0403
    1004:	30 91 04 04 	lds	r19, 0x0404
    1008:	28 17       	cp	r18, r24
    100a:	39 07       	cpc	r19, r25
    100c:	69 f5       	brne	.+90     	; 0x1068 <free+0x9c>
    100e:	b0 93 04 04 	sts	0x0404, r27
    1012:	a0 93 03 04 	sts	0x0403, r26
    1016:	6e c0       	rjmp	.+220    	; 0x10f4 <free+0x128>
    1018:	fb 01       	movw	r30, r22
    101a:	40 e0       	ldi	r20, 0x00	; 0
    101c:	50 e0       	ldi	r21, 0x00	; 0
    101e:	01 c0       	rjmp	.+2      	; 0x1022 <free+0x56>
    1020:	fc 01       	movw	r30, r24
    1022:	ea 17       	cp	r30, r26
    1024:	fb 07       	cpc	r31, r27
    1026:	30 f4       	brcc	.+12     	; 0x1034 <free+0x68>
    1028:	82 81       	ldd	r24, Z+2	; 0x02
    102a:	93 81       	ldd	r25, Z+3	; 0x03
    102c:	af 01       	movw	r20, r30
    102e:	00 97       	sbiw	r24, 0x00	; 0
    1030:	b9 f7       	brne	.-18     	; 0x1020 <free+0x54>
    1032:	1f c0       	rjmp	.+62     	; 0x1072 <free+0xa6>
    1034:	e9 01       	movw	r28, r18
    1036:	22 97       	sbiw	r28, 0x02	; 2
    1038:	fb 83       	std	Y+3, r31	; 0x03
    103a:	ea 83       	std	Y+2, r30	; 0x02
    103c:	08 81       	ld	r16, Y
    103e:	19 81       	ldd	r17, Y+1	; 0x01
    1040:	c9 01       	movw	r24, r18
    1042:	80 0f       	add	r24, r16
    1044:	91 1f       	adc	r25, r17
    1046:	8e 17       	cp	r24, r30
    1048:	9f 07       	cpc	r25, r31
    104a:	59 f4       	brne	.+22     	; 0x1062 <free+0x96>
    104c:	80 81       	ld	r24, Z
    104e:	91 81       	ldd	r25, Z+1	; 0x01
    1050:	80 0f       	add	r24, r16
    1052:	91 1f       	adc	r25, r17
    1054:	02 96       	adiw	r24, 0x02	; 2
    1056:	99 83       	std	Y+1, r25	; 0x01
    1058:	88 83       	st	Y, r24
    105a:	82 81       	ldd	r24, Z+2	; 0x02
    105c:	93 81       	ldd	r25, Z+3	; 0x03
    105e:	9b 83       	std	Y+3, r25	; 0x03
    1060:	8a 83       	std	Y+2, r24	; 0x02
    1062:	41 15       	cp	r20, r1
    1064:	51 05       	cpc	r21, r1
    1066:	29 f4       	brne	.+10     	; 0x1072 <free+0xa6>
    1068:	b0 93 06 04 	sts	0x0406, r27
    106c:	a0 93 05 04 	sts	0x0405, r26
    1070:	41 c0       	rjmp	.+130    	; 0x10f4 <free+0x128>
    1072:	fa 01       	movw	r30, r20
    1074:	b3 83       	std	Z+3, r27	; 0x03
    1076:	a2 83       	std	Z+2, r26	; 0x02
    1078:	c1 91       	ld	r28, Z+
    107a:	d1 91       	ld	r29, Z+
    107c:	ec 0f       	add	r30, r28
    107e:	fd 1f       	adc	r31, r29
    1080:	ae 17       	cp	r26, r30
    1082:	bf 07       	cpc	r27, r31
    1084:	81 f4       	brne	.+32     	; 0x10a6 <free+0xda>
    1086:	f9 01       	movw	r30, r18
    1088:	92 91       	ld	r25, -Z
    108a:	82 91       	ld	r24, -Z
    108c:	8c 0f       	add	r24, r28
    108e:	9d 1f       	adc	r25, r29
    1090:	02 96       	adiw	r24, 0x02	; 2
    1092:	da 01       	movw	r26, r20
    1094:	11 96       	adiw	r26, 0x01	; 1
    1096:	9c 93       	st	X, r25
    1098:	8e 93       	st	-X, r24
    109a:	82 81       	ldd	r24, Z+2	; 0x02
    109c:	93 81       	ldd	r25, Z+3	; 0x03
    109e:	13 96       	adiw	r26, 0x03	; 3
    10a0:	9c 93       	st	X, r25
    10a2:	8e 93       	st	-X, r24
    10a4:	12 97       	sbiw	r26, 0x02	; 2
    10a6:	e0 e0       	ldi	r30, 0x00	; 0
    10a8:	f0 e0       	ldi	r31, 0x00	; 0
    10aa:	02 c0       	rjmp	.+4      	; 0x10b0 <free+0xe4>
    10ac:	fb 01       	movw	r30, r22
    10ae:	bc 01       	movw	r22, r24
    10b0:	db 01       	movw	r26, r22
    10b2:	12 96       	adiw	r26, 0x02	; 2
    10b4:	8d 91       	ld	r24, X+
    10b6:	9c 91       	ld	r25, X
    10b8:	13 97       	sbiw	r26, 0x03	; 3
    10ba:	00 97       	sbiw	r24, 0x00	; 0
    10bc:	b9 f7       	brne	.-18     	; 0x10ac <free+0xe0>
    10be:	cb 01       	movw	r24, r22
    10c0:	02 96       	adiw	r24, 0x02	; 2
    10c2:	2d 91       	ld	r18, X+
    10c4:	3c 91       	ld	r19, X
    10c6:	11 97       	sbiw	r26, 0x01	; 1
    10c8:	82 0f       	add	r24, r18
    10ca:	93 1f       	adc	r25, r19
    10cc:	20 91 03 04 	lds	r18, 0x0403
    10d0:	30 91 04 04 	lds	r19, 0x0404
    10d4:	28 17       	cp	r18, r24
    10d6:	39 07       	cpc	r19, r25
    10d8:	69 f4       	brne	.+26     	; 0x10f4 <free+0x128>
    10da:	30 97       	sbiw	r30, 0x00	; 0
    10dc:	29 f4       	brne	.+10     	; 0x10e8 <free+0x11c>
    10de:	10 92 06 04 	sts	0x0406, r1
    10e2:	10 92 05 04 	sts	0x0405, r1
    10e6:	02 c0       	rjmp	.+4      	; 0x10ec <free+0x120>
    10e8:	13 82       	std	Z+3, r1	; 0x03
    10ea:	12 82       	std	Z+2, r1	; 0x02
    10ec:	70 93 04 04 	sts	0x0404, r23
    10f0:	60 93 03 04 	sts	0x0403, r22
    10f4:	df 91       	pop	r29
    10f6:	cf 91       	pop	r28
    10f8:	1f 91       	pop	r17
    10fa:	0f 91       	pop	r16
    10fc:	08 95       	ret

000010fe <atoi>:
    10fe:	fc 01       	movw	r30, r24
    1100:	88 27       	eor	r24, r24
    1102:	99 27       	eor	r25, r25
    1104:	e8 94       	clt
    1106:	21 91       	ld	r18, Z+
    1108:	20 32       	cpi	r18, 0x20	; 32
    110a:	e9 f3       	breq	.-6      	; 0x1106 <atoi+0x8>
    110c:	29 30       	cpi	r18, 0x09	; 9
    110e:	10 f0       	brcs	.+4      	; 0x1114 <atoi+0x16>
    1110:	2e 30       	cpi	r18, 0x0E	; 14
    1112:	c8 f3       	brcs	.-14     	; 0x1106 <atoi+0x8>
    1114:	2b 32       	cpi	r18, 0x2B	; 43
    1116:	41 f0       	breq	.+16     	; 0x1128 <atoi+0x2a>
    1118:	2d 32       	cpi	r18, 0x2D	; 45
    111a:	39 f4       	brne	.+14     	; 0x112a <atoi+0x2c>
    111c:	68 94       	set
    111e:	04 c0       	rjmp	.+8      	; 0x1128 <atoi+0x2a>
    1120:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <__mulhi_const_10>
    1124:	82 0f       	add	r24, r18
    1126:	91 1d       	adc	r25, r1
    1128:	21 91       	ld	r18, Z+
    112a:	20 53       	subi	r18, 0x30	; 48
    112c:	2a 30       	cpi	r18, 0x0A	; 10
    112e:	c0 f3       	brcs	.-16     	; 0x1120 <atoi+0x22>
    1130:	1e f4       	brtc	.+6      	; 0x1138 <atoi+0x3a>
    1132:	90 95       	com	r25
    1134:	81 95       	neg	r24
    1136:	9f 4f       	sbci	r25, 0xFF	; 255
    1138:	08 95       	ret

0000113a <strtok>:
    113a:	44 ed       	ldi	r20, 0xD4	; 212
    113c:	52 e0       	ldi	r21, 0x02	; 2
    113e:	0e 94 b2 08 	call	0x1164	; 0x1164 <strtok_r>
    1142:	08 95       	ret

00001144 <strcmp>:
    1144:	fb 01       	movw	r30, r22
    1146:	dc 01       	movw	r26, r24
    1148:	8d 91       	ld	r24, X+
    114a:	01 90       	ld	r0, Z+
    114c:	80 19       	sub	r24, r0
    114e:	01 10       	cpse	r0, r1
    1150:	d9 f3       	breq	.-10     	; 0x1148 <strcmp+0x4>
    1152:	99 0b       	sbc	r25, r25
    1154:	08 95       	ret

00001156 <strcpy>:
    1156:	fb 01       	movw	r30, r22
    1158:	dc 01       	movw	r26, r24
    115a:	01 90       	ld	r0, Z+
    115c:	0d 92       	st	X+, r0
    115e:	00 20       	and	r0, r0
    1160:	e1 f7       	brne	.-8      	; 0x115a <strcpy+0x4>
    1162:	08 95       	ret

00001164 <strtok_r>:
    1164:	fa 01       	movw	r30, r20
    1166:	a1 91       	ld	r26, Z+
    1168:	b0 81       	ld	r27, Z
    116a:	00 97       	sbiw	r24, 0x00	; 0
    116c:	19 f4       	brne	.+6      	; 0x1174 <strtok_r+0x10>
    116e:	10 97       	sbiw	r26, 0x00	; 0
    1170:	e1 f0       	breq	.+56     	; 0x11aa <strtok_r+0x46>
    1172:	cd 01       	movw	r24, r26
    1174:	dc 01       	movw	r26, r24
    1176:	cd 01       	movw	r24, r26
    1178:	0d 90       	ld	r0, X+
    117a:	00 20       	and	r0, r0
    117c:	11 f4       	brne	.+4      	; 0x1182 <strtok_r+0x1e>
    117e:	c0 01       	movw	r24, r0
    1180:	13 c0       	rjmp	.+38     	; 0x11a8 <strtok_r+0x44>
    1182:	fb 01       	movw	r30, r22
    1184:	21 91       	ld	r18, Z+
    1186:	22 23       	and	r18, r18
    1188:	19 f0       	breq	.+6      	; 0x1190 <strtok_r+0x2c>
    118a:	20 15       	cp	r18, r0
    118c:	d9 f7       	brne	.-10     	; 0x1184 <strtok_r+0x20>
    118e:	f3 cf       	rjmp	.-26     	; 0x1176 <strtok_r+0x12>
    1190:	fb 01       	movw	r30, r22
    1192:	21 91       	ld	r18, Z+
    1194:	20 15       	cp	r18, r0
    1196:	19 f4       	brne	.+6      	; 0x119e <strtok_r+0x3a>
    1198:	1e 92       	st	-X, r1
    119a:	11 96       	adiw	r26, 0x01	; 1
    119c:	06 c0       	rjmp	.+12     	; 0x11aa <strtok_r+0x46>
    119e:	22 23       	and	r18, r18
    11a0:	c1 f7       	brne	.-16     	; 0x1192 <strtok_r+0x2e>
    11a2:	0d 90       	ld	r0, X+
    11a4:	00 20       	and	r0, r0
    11a6:	a1 f7       	brne	.-24     	; 0x1190 <strtok_r+0x2c>
    11a8:	d0 01       	movw	r26, r0
    11aa:	fa 01       	movw	r30, r20
    11ac:	a1 93       	st	Z+, r26
    11ae:	b0 83       	st	Z, r27
    11b0:	08 95       	ret

000011b2 <__mulhi_const_10>:
    11b2:	7a e0       	ldi	r23, 0x0A	; 10
    11b4:	97 9f       	mul	r25, r23
    11b6:	90 2d       	mov	r25, r0
    11b8:	87 9f       	mul	r24, r23
    11ba:	80 2d       	mov	r24, r0
    11bc:	91 0d       	add	r25, r1
    11be:	11 24       	eor	r1, r1
    11c0:	08 95       	ret

000011c2 <fgets>:
    11c2:	cf 92       	push	r12
    11c4:	df 92       	push	r13
    11c6:	ef 92       	push	r14
    11c8:	ff 92       	push	r15
    11ca:	0f 93       	push	r16
    11cc:	1f 93       	push	r17
    11ce:	cf 93       	push	r28
    11d0:	df 93       	push	r29
    11d2:	8c 01       	movw	r16, r24
    11d4:	6a 01       	movw	r12, r20
    11d6:	fa 01       	movw	r30, r20
    11d8:	83 81       	ldd	r24, Z+3	; 0x03
    11da:	80 ff       	sbrs	r24, 0
    11dc:	1a c0       	rjmp	.+52     	; 0x1212 <fgets+0x50>
    11de:	16 16       	cp	r1, r22
    11e0:	17 06       	cpc	r1, r23
    11e2:	bc f4       	brge	.+46     	; 0x1212 <fgets+0x50>
    11e4:	7b 01       	movw	r14, r22
    11e6:	e8 01       	movw	r28, r16
    11e8:	0e c0       	rjmp	.+28     	; 0x1206 <fgets+0x44>
    11ea:	c6 01       	movw	r24, r12
    11ec:	0e 94 9f 0b 	call	0x173e	; 0x173e <fgetc>
    11f0:	ff ef       	ldi	r31, 0xFF	; 255
    11f2:	8f 3f       	cpi	r24, 0xFF	; 255
    11f4:	9f 07       	cpc	r25, r31
    11f6:	69 f0       	breq	.+26     	; 0x1212 <fgets+0x50>
    11f8:	89 93       	st	Y+, r24
    11fa:	08 94       	sec
    11fc:	e1 08       	sbc	r14, r1
    11fe:	f1 08       	sbc	r15, r1
    1200:	8a 30       	cpi	r24, 0x0A	; 10
    1202:	91 05       	cpc	r25, r1
    1204:	21 f0       	breq	.+8      	; 0x120e <fgets+0x4c>
    1206:	21 e0       	ldi	r18, 0x01	; 1
    1208:	e2 16       	cp	r14, r18
    120a:	f1 04       	cpc	r15, r1
    120c:	71 f7       	brne	.-36     	; 0x11ea <fgets+0x28>
    120e:	18 82       	st	Y, r1
    1210:	02 c0       	rjmp	.+4      	; 0x1216 <fgets+0x54>
    1212:	00 e0       	ldi	r16, 0x00	; 0
    1214:	10 e0       	ldi	r17, 0x00	; 0
    1216:	c8 01       	movw	r24, r16
    1218:	df 91       	pop	r29
    121a:	cf 91       	pop	r28
    121c:	1f 91       	pop	r17
    121e:	0f 91       	pop	r16
    1220:	ff 90       	pop	r15
    1222:	ef 90       	pop	r14
    1224:	df 90       	pop	r13
    1226:	cf 90       	pop	r12
    1228:	08 95       	ret

0000122a <gets>:
    122a:	0f 93       	push	r16
    122c:	1f 93       	push	r17
    122e:	cf 93       	push	r28
    1230:	df 93       	push	r29
    1232:	8c 01       	movw	r16, r24
    1234:	e0 91 07 04 	lds	r30, 0x0407
    1238:	f0 91 08 04 	lds	r31, 0x0408
    123c:	83 81       	ldd	r24, Z+3	; 0x03
    123e:	80 ff       	sbrs	r24, 0
    1240:	12 c0       	rjmp	.+36     	; 0x1266 <gets+0x3c>
    1242:	e8 01       	movw	r28, r16
    1244:	80 91 07 04 	lds	r24, 0x0407
    1248:	90 91 08 04 	lds	r25, 0x0408
    124c:	0e 94 9f 0b 	call	0x173e	; 0x173e <fgetc>
    1250:	2f ef       	ldi	r18, 0xFF	; 255
    1252:	8f 3f       	cpi	r24, 0xFF	; 255
    1254:	92 07       	cpc	r25, r18
    1256:	39 f0       	breq	.+14     	; 0x1266 <gets+0x3c>
    1258:	89 93       	st	Y+, r24
    125a:	8a 30       	cpi	r24, 0x0A	; 10
    125c:	91 05       	cpc	r25, r1
    125e:	91 f7       	brne	.-28     	; 0x1244 <gets+0x1a>
    1260:	21 97       	sbiw	r28, 0x01	; 1
    1262:	18 82       	st	Y, r1
    1264:	02 c0       	rjmp	.+4      	; 0x126a <gets+0x40>
    1266:	00 e0       	ldi	r16, 0x00	; 0
    1268:	10 e0       	ldi	r17, 0x00	; 0
    126a:	c8 01       	movw	r24, r16
    126c:	df 91       	pop	r29
    126e:	cf 91       	pop	r28
    1270:	1f 91       	pop	r17
    1272:	0f 91       	pop	r16
    1274:	08 95       	ret

00001276 <printf>:
    1276:	cf 93       	push	r28
    1278:	df 93       	push	r29
    127a:	cd b7       	in	r28, 0x3d	; 61
    127c:	de b7       	in	r29, 0x3e	; 62
    127e:	fe 01       	movw	r30, r28
    1280:	36 96       	adiw	r30, 0x06	; 6
    1282:	61 91       	ld	r22, Z+
    1284:	71 91       	ld	r23, Z+
    1286:	80 91 09 04 	lds	r24, 0x0409
    128a:	90 91 0a 04 	lds	r25, 0x040A
    128e:	af 01       	movw	r20, r30
    1290:	0e 94 82 09 	call	0x1304	; 0x1304 <vfprintf>
    1294:	df 91       	pop	r29
    1296:	cf 91       	pop	r28
    1298:	08 95       	ret

0000129a <putchar>:
    129a:	60 91 09 04 	lds	r22, 0x0409
    129e:	70 91 0a 04 	lds	r23, 0x040A
    12a2:	0e 94 df 0b 	call	0x17be	; 0x17be <fputc>
    12a6:	08 95       	ret

000012a8 <puts>:
    12a8:	0f 93       	push	r16
    12aa:	1f 93       	push	r17
    12ac:	cf 93       	push	r28
    12ae:	df 93       	push	r29
    12b0:	8c 01       	movw	r16, r24
    12b2:	e0 91 09 04 	lds	r30, 0x0409
    12b6:	f0 91 0a 04 	lds	r31, 0x040A
    12ba:	83 81       	ldd	r24, Z+3	; 0x03
    12bc:	81 ff       	sbrs	r24, 1
    12be:	1a c0       	rjmp	.+52     	; 0x12f4 <puts+0x4c>
    12c0:	c0 e0       	ldi	r28, 0x00	; 0
    12c2:	d0 e0       	ldi	r29, 0x00	; 0
    12c4:	05 c0       	rjmp	.+10     	; 0x12d0 <puts+0x28>
    12c6:	19 95       	eicall
    12c8:	00 97       	sbiw	r24, 0x00	; 0
    12ca:	11 f0       	breq	.+4      	; 0x12d0 <puts+0x28>
    12cc:	cf ef       	ldi	r28, 0xFF	; 255
    12ce:	df ef       	ldi	r29, 0xFF	; 255
    12d0:	f8 01       	movw	r30, r16
    12d2:	81 91       	ld	r24, Z+
    12d4:	8f 01       	movw	r16, r30
    12d6:	60 91 09 04 	lds	r22, 0x0409
    12da:	70 91 0a 04 	lds	r23, 0x040A
    12de:	db 01       	movw	r26, r22
    12e0:	18 96       	adiw	r26, 0x08	; 8
    12e2:	ed 91       	ld	r30, X+
    12e4:	fc 91       	ld	r31, X
    12e6:	19 97       	sbiw	r26, 0x09	; 9
    12e8:	88 23       	and	r24, r24
    12ea:	69 f7       	brne	.-38     	; 0x12c6 <puts+0x1e>
    12ec:	8a e0       	ldi	r24, 0x0A	; 10
    12ee:	19 95       	eicall
    12f0:	00 97       	sbiw	r24, 0x00	; 0
    12f2:	11 f0       	breq	.+4      	; 0x12f8 <puts+0x50>
    12f4:	cf ef       	ldi	r28, 0xFF	; 255
    12f6:	df ef       	ldi	r29, 0xFF	; 255
    12f8:	ce 01       	movw	r24, r28
    12fa:	df 91       	pop	r29
    12fc:	cf 91       	pop	r28
    12fe:	1f 91       	pop	r17
    1300:	0f 91       	pop	r16
    1302:	08 95       	ret

00001304 <vfprintf>:
    1304:	2f 92       	push	r2
    1306:	3f 92       	push	r3
    1308:	4f 92       	push	r4
    130a:	5f 92       	push	r5
    130c:	6f 92       	push	r6
    130e:	7f 92       	push	r7
    1310:	8f 92       	push	r8
    1312:	9f 92       	push	r9
    1314:	af 92       	push	r10
    1316:	bf 92       	push	r11
    1318:	cf 92       	push	r12
    131a:	df 92       	push	r13
    131c:	ef 92       	push	r14
    131e:	ff 92       	push	r15
    1320:	0f 93       	push	r16
    1322:	1f 93       	push	r17
    1324:	cf 93       	push	r28
    1326:	df 93       	push	r29
    1328:	cd b7       	in	r28, 0x3d	; 61
    132a:	de b7       	in	r29, 0x3e	; 62
    132c:	2d 97       	sbiw	r28, 0x0d	; 13
    132e:	0f b6       	in	r0, 0x3f	; 63
    1330:	f8 94       	cli
    1332:	de bf       	out	0x3e, r29	; 62
    1334:	0f be       	out	0x3f, r0	; 63
    1336:	cd bf       	out	0x3d, r28	; 61
    1338:	3c 01       	movw	r6, r24
    133a:	7d 87       	std	Y+13, r23	; 0x0d
    133c:	6c 87       	std	Y+12, r22	; 0x0c
    133e:	5a 01       	movw	r10, r20
    1340:	fc 01       	movw	r30, r24
    1342:	17 82       	std	Z+7, r1	; 0x07
    1344:	16 82       	std	Z+6, r1	; 0x06
    1346:	83 81       	ldd	r24, Z+3	; 0x03
    1348:	81 ff       	sbrs	r24, 1
    134a:	c8 c1       	rjmp	.+912    	; 0x16dc <vfprintf+0x3d8>
    134c:	2e 01       	movw	r4, r28
    134e:	08 94       	sec
    1350:	41 1c       	adc	r4, r1
    1352:	51 1c       	adc	r5, r1
    1354:	f3 01       	movw	r30, r6
    1356:	93 81       	ldd	r25, Z+3	; 0x03
    1358:	ec 85       	ldd	r30, Y+12	; 0x0c
    135a:	fd 85       	ldd	r31, Y+13	; 0x0d
    135c:	93 fd       	sbrc	r25, 3
    135e:	85 91       	lpm	r24, Z+
    1360:	93 ff       	sbrs	r25, 3
    1362:	81 91       	ld	r24, Z+
    1364:	fd 87       	std	Y+13, r31	; 0x0d
    1366:	ec 87       	std	Y+12, r30	; 0x0c
    1368:	88 23       	and	r24, r24
    136a:	09 f4       	brne	.+2      	; 0x136e <vfprintf+0x6a>
    136c:	b3 c1       	rjmp	.+870    	; 0x16d4 <vfprintf+0x3d0>
    136e:	85 32       	cpi	r24, 0x25	; 37
    1370:	41 f4       	brne	.+16     	; 0x1382 <vfprintf+0x7e>
    1372:	93 fd       	sbrc	r25, 3
    1374:	85 91       	lpm	r24, Z+
    1376:	93 ff       	sbrs	r25, 3
    1378:	81 91       	ld	r24, Z+
    137a:	fd 87       	std	Y+13, r31	; 0x0d
    137c:	ec 87       	std	Y+12, r30	; 0x0c
    137e:	85 32       	cpi	r24, 0x25	; 37
    1380:	29 f4       	brne	.+10     	; 0x138c <vfprintf+0x88>
    1382:	90 e0       	ldi	r25, 0x00	; 0
    1384:	b3 01       	movw	r22, r6
    1386:	0e 94 df 0b 	call	0x17be	; 0x17be <fputc>
    138a:	e4 cf       	rjmp	.-56     	; 0x1354 <vfprintf+0x50>
    138c:	ff 24       	eor	r15, r15
    138e:	ee 24       	eor	r14, r14
    1390:	10 e0       	ldi	r17, 0x00	; 0
    1392:	10 32       	cpi	r17, 0x20	; 32
    1394:	b0 f4       	brcc	.+44     	; 0x13c2 <vfprintf+0xbe>
    1396:	8b 32       	cpi	r24, 0x2B	; 43
    1398:	69 f0       	breq	.+26     	; 0x13b4 <vfprintf+0xb0>
    139a:	8c 32       	cpi	r24, 0x2C	; 44
    139c:	28 f4       	brcc	.+10     	; 0x13a8 <vfprintf+0xa4>
    139e:	80 32       	cpi	r24, 0x20	; 32
    13a0:	51 f0       	breq	.+20     	; 0x13b6 <vfprintf+0xb2>
    13a2:	83 32       	cpi	r24, 0x23	; 35
    13a4:	71 f4       	brne	.+28     	; 0x13c2 <vfprintf+0xbe>
    13a6:	0b c0       	rjmp	.+22     	; 0x13be <vfprintf+0xba>
    13a8:	8d 32       	cpi	r24, 0x2D	; 45
    13aa:	39 f0       	breq	.+14     	; 0x13ba <vfprintf+0xb6>
    13ac:	80 33       	cpi	r24, 0x30	; 48
    13ae:	49 f4       	brne	.+18     	; 0x13c2 <vfprintf+0xbe>
    13b0:	11 60       	ori	r17, 0x01	; 1
    13b2:	2c c0       	rjmp	.+88     	; 0x140c <vfprintf+0x108>
    13b4:	12 60       	ori	r17, 0x02	; 2
    13b6:	14 60       	ori	r17, 0x04	; 4
    13b8:	29 c0       	rjmp	.+82     	; 0x140c <vfprintf+0x108>
    13ba:	18 60       	ori	r17, 0x08	; 8
    13bc:	27 c0       	rjmp	.+78     	; 0x140c <vfprintf+0x108>
    13be:	10 61       	ori	r17, 0x10	; 16
    13c0:	25 c0       	rjmp	.+74     	; 0x140c <vfprintf+0x108>
    13c2:	17 fd       	sbrc	r17, 7
    13c4:	2e c0       	rjmp	.+92     	; 0x1422 <vfprintf+0x11e>
    13c6:	28 2f       	mov	r18, r24
    13c8:	20 53       	subi	r18, 0x30	; 48
    13ca:	2a 30       	cpi	r18, 0x0A	; 10
    13cc:	98 f4       	brcc	.+38     	; 0x13f4 <vfprintf+0xf0>
    13ce:	16 ff       	sbrs	r17, 6
    13d0:	08 c0       	rjmp	.+16     	; 0x13e2 <vfprintf+0xde>
    13d2:	8f 2d       	mov	r24, r15
    13d4:	88 0f       	add	r24, r24
    13d6:	f8 2e       	mov	r15, r24
    13d8:	ff 0c       	add	r15, r15
    13da:	ff 0c       	add	r15, r15
    13dc:	f8 0e       	add	r15, r24
    13de:	f2 0e       	add	r15, r18
    13e0:	15 c0       	rjmp	.+42     	; 0x140c <vfprintf+0x108>
    13e2:	8e 2d       	mov	r24, r14
    13e4:	88 0f       	add	r24, r24
    13e6:	e8 2e       	mov	r14, r24
    13e8:	ee 0c       	add	r14, r14
    13ea:	ee 0c       	add	r14, r14
    13ec:	e8 0e       	add	r14, r24
    13ee:	e2 0e       	add	r14, r18
    13f0:	10 62       	ori	r17, 0x20	; 32
    13f2:	0c c0       	rjmp	.+24     	; 0x140c <vfprintf+0x108>
    13f4:	8e 32       	cpi	r24, 0x2E	; 46
    13f6:	21 f4       	brne	.+8      	; 0x1400 <vfprintf+0xfc>
    13f8:	16 fd       	sbrc	r17, 6
    13fa:	6c c1       	rjmp	.+728    	; 0x16d4 <vfprintf+0x3d0>
    13fc:	10 64       	ori	r17, 0x40	; 64
    13fe:	06 c0       	rjmp	.+12     	; 0x140c <vfprintf+0x108>
    1400:	8c 36       	cpi	r24, 0x6C	; 108
    1402:	11 f4       	brne	.+4      	; 0x1408 <vfprintf+0x104>
    1404:	10 68       	ori	r17, 0x80	; 128
    1406:	02 c0       	rjmp	.+4      	; 0x140c <vfprintf+0x108>
    1408:	88 36       	cpi	r24, 0x68	; 104
    140a:	59 f4       	brne	.+22     	; 0x1422 <vfprintf+0x11e>
    140c:	ec 85       	ldd	r30, Y+12	; 0x0c
    140e:	fd 85       	ldd	r31, Y+13	; 0x0d
    1410:	93 fd       	sbrc	r25, 3
    1412:	85 91       	lpm	r24, Z+
    1414:	93 ff       	sbrs	r25, 3
    1416:	81 91       	ld	r24, Z+
    1418:	fd 87       	std	Y+13, r31	; 0x0d
    141a:	ec 87       	std	Y+12, r30	; 0x0c
    141c:	88 23       	and	r24, r24
    141e:	09 f0       	breq	.+2      	; 0x1422 <vfprintf+0x11e>
    1420:	b8 cf       	rjmp	.-144    	; 0x1392 <vfprintf+0x8e>
    1422:	98 2f       	mov	r25, r24
    1424:	95 54       	subi	r25, 0x45	; 69
    1426:	93 30       	cpi	r25, 0x03	; 3
    1428:	18 f0       	brcs	.+6      	; 0x1430 <vfprintf+0x12c>
    142a:	90 52       	subi	r25, 0x20	; 32
    142c:	93 30       	cpi	r25, 0x03	; 3
    142e:	38 f4       	brcc	.+14     	; 0x143e <vfprintf+0x13a>
    1430:	24 e0       	ldi	r18, 0x04	; 4
    1432:	30 e0       	ldi	r19, 0x00	; 0
    1434:	a2 0e       	add	r10, r18
    1436:	b3 1e       	adc	r11, r19
    1438:	3f e3       	ldi	r19, 0x3F	; 63
    143a:	39 83       	std	Y+1, r19	; 0x01
    143c:	0f c0       	rjmp	.+30     	; 0x145c <vfprintf+0x158>
    143e:	83 36       	cpi	r24, 0x63	; 99
    1440:	31 f0       	breq	.+12     	; 0x144e <vfprintf+0x14a>
    1442:	83 37       	cpi	r24, 0x73	; 115
    1444:	81 f0       	breq	.+32     	; 0x1466 <vfprintf+0x162>
    1446:	83 35       	cpi	r24, 0x53	; 83
    1448:	09 f0       	breq	.+2      	; 0x144c <vfprintf+0x148>
    144a:	5a c0       	rjmp	.+180    	; 0x1500 <vfprintf+0x1fc>
    144c:	22 c0       	rjmp	.+68     	; 0x1492 <vfprintf+0x18e>
    144e:	f5 01       	movw	r30, r10
    1450:	80 81       	ld	r24, Z
    1452:	89 83       	std	Y+1, r24	; 0x01
    1454:	22 e0       	ldi	r18, 0x02	; 2
    1456:	30 e0       	ldi	r19, 0x00	; 0
    1458:	a2 0e       	add	r10, r18
    145a:	b3 1e       	adc	r11, r19
    145c:	21 e0       	ldi	r18, 0x01	; 1
    145e:	c2 2e       	mov	r12, r18
    1460:	d1 2c       	mov	r13, r1
    1462:	42 01       	movw	r8, r4
    1464:	14 c0       	rjmp	.+40     	; 0x148e <vfprintf+0x18a>
    1466:	92 e0       	ldi	r25, 0x02	; 2
    1468:	29 2e       	mov	r2, r25
    146a:	31 2c       	mov	r3, r1
    146c:	2a 0c       	add	r2, r10
    146e:	3b 1c       	adc	r3, r11
    1470:	f5 01       	movw	r30, r10
    1472:	80 80       	ld	r8, Z
    1474:	91 80       	ldd	r9, Z+1	; 0x01
    1476:	16 ff       	sbrs	r17, 6
    1478:	03 c0       	rjmp	.+6      	; 0x1480 <vfprintf+0x17c>
    147a:	6f 2d       	mov	r22, r15
    147c:	70 e0       	ldi	r23, 0x00	; 0
    147e:	02 c0       	rjmp	.+4      	; 0x1484 <vfprintf+0x180>
    1480:	6f ef       	ldi	r22, 0xFF	; 255
    1482:	7f ef       	ldi	r23, 0xFF	; 255
    1484:	c4 01       	movw	r24, r8
    1486:	0e 94 94 0b 	call	0x1728	; 0x1728 <strnlen>
    148a:	6c 01       	movw	r12, r24
    148c:	51 01       	movw	r10, r2
    148e:	1f 77       	andi	r17, 0x7F	; 127
    1490:	15 c0       	rjmp	.+42     	; 0x14bc <vfprintf+0x1b8>
    1492:	82 e0       	ldi	r24, 0x02	; 2
    1494:	28 2e       	mov	r2, r24
    1496:	31 2c       	mov	r3, r1
    1498:	2a 0c       	add	r2, r10
    149a:	3b 1c       	adc	r3, r11
    149c:	f5 01       	movw	r30, r10
    149e:	80 80       	ld	r8, Z
    14a0:	91 80       	ldd	r9, Z+1	; 0x01
    14a2:	16 ff       	sbrs	r17, 6
    14a4:	03 c0       	rjmp	.+6      	; 0x14ac <vfprintf+0x1a8>
    14a6:	6f 2d       	mov	r22, r15
    14a8:	70 e0       	ldi	r23, 0x00	; 0
    14aa:	02 c0       	rjmp	.+4      	; 0x14b0 <vfprintf+0x1ac>
    14ac:	6f ef       	ldi	r22, 0xFF	; 255
    14ae:	7f ef       	ldi	r23, 0xFF	; 255
    14b0:	c4 01       	movw	r24, r8
    14b2:	0e 94 89 0b 	call	0x1712	; 0x1712 <strnlen_P>
    14b6:	6c 01       	movw	r12, r24
    14b8:	10 68       	ori	r17, 0x80	; 128
    14ba:	51 01       	movw	r10, r2
    14bc:	13 fd       	sbrc	r17, 3
    14be:	1c c0       	rjmp	.+56     	; 0x14f8 <vfprintf+0x1f4>
    14c0:	06 c0       	rjmp	.+12     	; 0x14ce <vfprintf+0x1ca>
    14c2:	80 e2       	ldi	r24, 0x20	; 32
    14c4:	90 e0       	ldi	r25, 0x00	; 0
    14c6:	b3 01       	movw	r22, r6
    14c8:	0e 94 df 0b 	call	0x17be	; 0x17be <fputc>
    14cc:	ea 94       	dec	r14
    14ce:	8e 2d       	mov	r24, r14
    14d0:	90 e0       	ldi	r25, 0x00	; 0
    14d2:	c8 16       	cp	r12, r24
    14d4:	d9 06       	cpc	r13, r25
    14d6:	a8 f3       	brcs	.-22     	; 0x14c2 <vfprintf+0x1be>
    14d8:	0f c0       	rjmp	.+30     	; 0x14f8 <vfprintf+0x1f4>
    14da:	f4 01       	movw	r30, r8
    14dc:	17 fd       	sbrc	r17, 7
    14de:	85 91       	lpm	r24, Z+
    14e0:	17 ff       	sbrs	r17, 7
    14e2:	81 91       	ld	r24, Z+
    14e4:	4f 01       	movw	r8, r30
    14e6:	90 e0       	ldi	r25, 0x00	; 0
    14e8:	b3 01       	movw	r22, r6
    14ea:	0e 94 df 0b 	call	0x17be	; 0x17be <fputc>
    14ee:	e1 10       	cpse	r14, r1
    14f0:	ea 94       	dec	r14
    14f2:	08 94       	sec
    14f4:	c1 08       	sbc	r12, r1
    14f6:	d1 08       	sbc	r13, r1
    14f8:	c1 14       	cp	r12, r1
    14fa:	d1 04       	cpc	r13, r1
    14fc:	71 f7       	brne	.-36     	; 0x14da <vfprintf+0x1d6>
    14fe:	e7 c0       	rjmp	.+462    	; 0x16ce <vfprintf+0x3ca>
    1500:	84 36       	cpi	r24, 0x64	; 100
    1502:	11 f0       	breq	.+4      	; 0x1508 <vfprintf+0x204>
    1504:	89 36       	cpi	r24, 0x69	; 105
    1506:	51 f5       	brne	.+84     	; 0x155c <vfprintf+0x258>
    1508:	f5 01       	movw	r30, r10
    150a:	17 ff       	sbrs	r17, 7
    150c:	07 c0       	rjmp	.+14     	; 0x151c <vfprintf+0x218>
    150e:	80 81       	ld	r24, Z
    1510:	91 81       	ldd	r25, Z+1	; 0x01
    1512:	a2 81       	ldd	r26, Z+2	; 0x02
    1514:	b3 81       	ldd	r27, Z+3	; 0x03
    1516:	24 e0       	ldi	r18, 0x04	; 4
    1518:	30 e0       	ldi	r19, 0x00	; 0
    151a:	08 c0       	rjmp	.+16     	; 0x152c <vfprintf+0x228>
    151c:	80 81       	ld	r24, Z
    151e:	91 81       	ldd	r25, Z+1	; 0x01
    1520:	aa 27       	eor	r26, r26
    1522:	97 fd       	sbrc	r25, 7
    1524:	a0 95       	com	r26
    1526:	ba 2f       	mov	r27, r26
    1528:	22 e0       	ldi	r18, 0x02	; 2
    152a:	30 e0       	ldi	r19, 0x00	; 0
    152c:	a2 0e       	add	r10, r18
    152e:	b3 1e       	adc	r11, r19
    1530:	01 2f       	mov	r16, r17
    1532:	0f 76       	andi	r16, 0x6F	; 111
    1534:	b7 ff       	sbrs	r27, 7
    1536:	08 c0       	rjmp	.+16     	; 0x1548 <vfprintf+0x244>
    1538:	b0 95       	com	r27
    153a:	a0 95       	com	r26
    153c:	90 95       	com	r25
    153e:	81 95       	neg	r24
    1540:	9f 4f       	sbci	r25, 0xFF	; 255
    1542:	af 4f       	sbci	r26, 0xFF	; 255
    1544:	bf 4f       	sbci	r27, 0xFF	; 255
    1546:	00 68       	ori	r16, 0x80	; 128
    1548:	bc 01       	movw	r22, r24
    154a:	cd 01       	movw	r24, r26
    154c:	a2 01       	movw	r20, r4
    154e:	2a e0       	ldi	r18, 0x0A	; 10
    1550:	30 e0       	ldi	r19, 0x00	; 0
    1552:	0e 94 0b 0c 	call	0x1816	; 0x1816 <__ultoa_invert>
    1556:	d8 2e       	mov	r13, r24
    1558:	d4 18       	sub	r13, r4
    155a:	3f c0       	rjmp	.+126    	; 0x15da <vfprintf+0x2d6>
    155c:	85 37       	cpi	r24, 0x75	; 117
    155e:	21 f4       	brne	.+8      	; 0x1568 <vfprintf+0x264>
    1560:	1f 7e       	andi	r17, 0xEF	; 239
    1562:	2a e0       	ldi	r18, 0x0A	; 10
    1564:	30 e0       	ldi	r19, 0x00	; 0
    1566:	20 c0       	rjmp	.+64     	; 0x15a8 <vfprintf+0x2a4>
    1568:	19 7f       	andi	r17, 0xF9	; 249
    156a:	8f 36       	cpi	r24, 0x6F	; 111
    156c:	a9 f0       	breq	.+42     	; 0x1598 <vfprintf+0x294>
    156e:	80 37       	cpi	r24, 0x70	; 112
    1570:	20 f4       	brcc	.+8      	; 0x157a <vfprintf+0x276>
    1572:	88 35       	cpi	r24, 0x58	; 88
    1574:	09 f0       	breq	.+2      	; 0x1578 <vfprintf+0x274>
    1576:	ae c0       	rjmp	.+348    	; 0x16d4 <vfprintf+0x3d0>
    1578:	0b c0       	rjmp	.+22     	; 0x1590 <vfprintf+0x28c>
    157a:	80 37       	cpi	r24, 0x70	; 112
    157c:	21 f0       	breq	.+8      	; 0x1586 <vfprintf+0x282>
    157e:	88 37       	cpi	r24, 0x78	; 120
    1580:	09 f0       	breq	.+2      	; 0x1584 <vfprintf+0x280>
    1582:	a8 c0       	rjmp	.+336    	; 0x16d4 <vfprintf+0x3d0>
    1584:	01 c0       	rjmp	.+2      	; 0x1588 <vfprintf+0x284>
    1586:	10 61       	ori	r17, 0x10	; 16
    1588:	14 ff       	sbrs	r17, 4
    158a:	09 c0       	rjmp	.+18     	; 0x159e <vfprintf+0x29a>
    158c:	14 60       	ori	r17, 0x04	; 4
    158e:	07 c0       	rjmp	.+14     	; 0x159e <vfprintf+0x29a>
    1590:	14 ff       	sbrs	r17, 4
    1592:	08 c0       	rjmp	.+16     	; 0x15a4 <vfprintf+0x2a0>
    1594:	16 60       	ori	r17, 0x06	; 6
    1596:	06 c0       	rjmp	.+12     	; 0x15a4 <vfprintf+0x2a0>
    1598:	28 e0       	ldi	r18, 0x08	; 8
    159a:	30 e0       	ldi	r19, 0x00	; 0
    159c:	05 c0       	rjmp	.+10     	; 0x15a8 <vfprintf+0x2a4>
    159e:	20 e1       	ldi	r18, 0x10	; 16
    15a0:	30 e0       	ldi	r19, 0x00	; 0
    15a2:	02 c0       	rjmp	.+4      	; 0x15a8 <vfprintf+0x2a4>
    15a4:	20 e1       	ldi	r18, 0x10	; 16
    15a6:	32 e0       	ldi	r19, 0x02	; 2
    15a8:	f5 01       	movw	r30, r10
    15aa:	17 ff       	sbrs	r17, 7
    15ac:	07 c0       	rjmp	.+14     	; 0x15bc <vfprintf+0x2b8>
    15ae:	60 81       	ld	r22, Z
    15b0:	71 81       	ldd	r23, Z+1	; 0x01
    15b2:	82 81       	ldd	r24, Z+2	; 0x02
    15b4:	93 81       	ldd	r25, Z+3	; 0x03
    15b6:	44 e0       	ldi	r20, 0x04	; 4
    15b8:	50 e0       	ldi	r21, 0x00	; 0
    15ba:	06 c0       	rjmp	.+12     	; 0x15c8 <vfprintf+0x2c4>
    15bc:	60 81       	ld	r22, Z
    15be:	71 81       	ldd	r23, Z+1	; 0x01
    15c0:	80 e0       	ldi	r24, 0x00	; 0
    15c2:	90 e0       	ldi	r25, 0x00	; 0
    15c4:	42 e0       	ldi	r20, 0x02	; 2
    15c6:	50 e0       	ldi	r21, 0x00	; 0
    15c8:	a4 0e       	add	r10, r20
    15ca:	b5 1e       	adc	r11, r21
    15cc:	a2 01       	movw	r20, r4
    15ce:	0e 94 0b 0c 	call	0x1816	; 0x1816 <__ultoa_invert>
    15d2:	d8 2e       	mov	r13, r24
    15d4:	d4 18       	sub	r13, r4
    15d6:	01 2f       	mov	r16, r17
    15d8:	0f 77       	andi	r16, 0x7F	; 127
    15da:	06 ff       	sbrs	r16, 6
    15dc:	09 c0       	rjmp	.+18     	; 0x15f0 <vfprintf+0x2ec>
    15de:	0e 7f       	andi	r16, 0xFE	; 254
    15e0:	df 14       	cp	r13, r15
    15e2:	30 f4       	brcc	.+12     	; 0x15f0 <vfprintf+0x2ec>
    15e4:	04 ff       	sbrs	r16, 4
    15e6:	06 c0       	rjmp	.+12     	; 0x15f4 <vfprintf+0x2f0>
    15e8:	02 fd       	sbrc	r16, 2
    15ea:	04 c0       	rjmp	.+8      	; 0x15f4 <vfprintf+0x2f0>
    15ec:	0f 7e       	andi	r16, 0xEF	; 239
    15ee:	02 c0       	rjmp	.+4      	; 0x15f4 <vfprintf+0x2f0>
    15f0:	1d 2d       	mov	r17, r13
    15f2:	01 c0       	rjmp	.+2      	; 0x15f6 <vfprintf+0x2f2>
    15f4:	1f 2d       	mov	r17, r15
    15f6:	80 2f       	mov	r24, r16
    15f8:	90 e0       	ldi	r25, 0x00	; 0
    15fa:	04 ff       	sbrs	r16, 4
    15fc:	0c c0       	rjmp	.+24     	; 0x1616 <vfprintf+0x312>
    15fe:	fe 01       	movw	r30, r28
    1600:	ed 0d       	add	r30, r13
    1602:	f1 1d       	adc	r31, r1
    1604:	20 81       	ld	r18, Z
    1606:	20 33       	cpi	r18, 0x30	; 48
    1608:	11 f4       	brne	.+4      	; 0x160e <vfprintf+0x30a>
    160a:	09 7e       	andi	r16, 0xE9	; 233
    160c:	09 c0       	rjmp	.+18     	; 0x1620 <vfprintf+0x31c>
    160e:	02 ff       	sbrs	r16, 2
    1610:	06 c0       	rjmp	.+12     	; 0x161e <vfprintf+0x31a>
    1612:	1e 5f       	subi	r17, 0xFE	; 254
    1614:	05 c0       	rjmp	.+10     	; 0x1620 <vfprintf+0x31c>
    1616:	86 78       	andi	r24, 0x86	; 134
    1618:	90 70       	andi	r25, 0x00	; 0
    161a:	00 97       	sbiw	r24, 0x00	; 0
    161c:	09 f0       	breq	.+2      	; 0x1620 <vfprintf+0x31c>
    161e:	1f 5f       	subi	r17, 0xFF	; 255
    1620:	80 2e       	mov	r8, r16
    1622:	99 24       	eor	r9, r9
    1624:	03 fd       	sbrc	r16, 3
    1626:	12 c0       	rjmp	.+36     	; 0x164c <vfprintf+0x348>
    1628:	00 ff       	sbrs	r16, 0
    162a:	0d c0       	rjmp	.+26     	; 0x1646 <vfprintf+0x342>
    162c:	fd 2c       	mov	r15, r13
    162e:	1e 15       	cp	r17, r14
    1630:	50 f4       	brcc	.+20     	; 0x1646 <vfprintf+0x342>
    1632:	fe 0c       	add	r15, r14
    1634:	f1 1a       	sub	r15, r17
    1636:	1e 2d       	mov	r17, r14
    1638:	06 c0       	rjmp	.+12     	; 0x1646 <vfprintf+0x342>
    163a:	80 e2       	ldi	r24, 0x20	; 32
    163c:	90 e0       	ldi	r25, 0x00	; 0
    163e:	b3 01       	movw	r22, r6
    1640:	0e 94 df 0b 	call	0x17be	; 0x17be <fputc>
    1644:	1f 5f       	subi	r17, 0xFF	; 255
    1646:	1e 15       	cp	r17, r14
    1648:	c0 f3       	brcs	.-16     	; 0x163a <vfprintf+0x336>
    164a:	04 c0       	rjmp	.+8      	; 0x1654 <vfprintf+0x350>
    164c:	1e 15       	cp	r17, r14
    164e:	10 f4       	brcc	.+4      	; 0x1654 <vfprintf+0x350>
    1650:	e1 1a       	sub	r14, r17
    1652:	01 c0       	rjmp	.+2      	; 0x1656 <vfprintf+0x352>
    1654:	ee 24       	eor	r14, r14
    1656:	84 fe       	sbrs	r8, 4
    1658:	0f c0       	rjmp	.+30     	; 0x1678 <vfprintf+0x374>
    165a:	80 e3       	ldi	r24, 0x30	; 48
    165c:	90 e0       	ldi	r25, 0x00	; 0
    165e:	b3 01       	movw	r22, r6
    1660:	0e 94 df 0b 	call	0x17be	; 0x17be <fputc>
    1664:	82 fe       	sbrs	r8, 2
    1666:	1f c0       	rjmp	.+62     	; 0x16a6 <vfprintf+0x3a2>
    1668:	81 fe       	sbrs	r8, 1
    166a:	03 c0       	rjmp	.+6      	; 0x1672 <vfprintf+0x36e>
    166c:	88 e5       	ldi	r24, 0x58	; 88
    166e:	90 e0       	ldi	r25, 0x00	; 0
    1670:	10 c0       	rjmp	.+32     	; 0x1692 <vfprintf+0x38e>
    1672:	88 e7       	ldi	r24, 0x78	; 120
    1674:	90 e0       	ldi	r25, 0x00	; 0
    1676:	0d c0       	rjmp	.+26     	; 0x1692 <vfprintf+0x38e>
    1678:	c4 01       	movw	r24, r8
    167a:	86 78       	andi	r24, 0x86	; 134
    167c:	90 70       	andi	r25, 0x00	; 0
    167e:	00 97       	sbiw	r24, 0x00	; 0
    1680:	91 f0       	breq	.+36     	; 0x16a6 <vfprintf+0x3a2>
    1682:	81 fc       	sbrc	r8, 1
    1684:	02 c0       	rjmp	.+4      	; 0x168a <vfprintf+0x386>
    1686:	80 e2       	ldi	r24, 0x20	; 32
    1688:	01 c0       	rjmp	.+2      	; 0x168c <vfprintf+0x388>
    168a:	8b e2       	ldi	r24, 0x2B	; 43
    168c:	07 fd       	sbrc	r16, 7
    168e:	8d e2       	ldi	r24, 0x2D	; 45
    1690:	90 e0       	ldi	r25, 0x00	; 0
    1692:	b3 01       	movw	r22, r6
    1694:	0e 94 df 0b 	call	0x17be	; 0x17be <fputc>
    1698:	06 c0       	rjmp	.+12     	; 0x16a6 <vfprintf+0x3a2>
    169a:	80 e3       	ldi	r24, 0x30	; 48
    169c:	90 e0       	ldi	r25, 0x00	; 0
    169e:	b3 01       	movw	r22, r6
    16a0:	0e 94 df 0b 	call	0x17be	; 0x17be <fputc>
    16a4:	fa 94       	dec	r15
    16a6:	df 14       	cp	r13, r15
    16a8:	c0 f3       	brcs	.-16     	; 0x169a <vfprintf+0x396>
    16aa:	da 94       	dec	r13
    16ac:	f2 01       	movw	r30, r4
    16ae:	ed 0d       	add	r30, r13
    16b0:	f1 1d       	adc	r31, r1
    16b2:	80 81       	ld	r24, Z
    16b4:	90 e0       	ldi	r25, 0x00	; 0
    16b6:	b3 01       	movw	r22, r6
    16b8:	0e 94 df 0b 	call	0x17be	; 0x17be <fputc>
    16bc:	dd 20       	and	r13, r13
    16be:	a9 f7       	brne	.-22     	; 0x16aa <vfprintf+0x3a6>
    16c0:	06 c0       	rjmp	.+12     	; 0x16ce <vfprintf+0x3ca>
    16c2:	80 e2       	ldi	r24, 0x20	; 32
    16c4:	90 e0       	ldi	r25, 0x00	; 0
    16c6:	b3 01       	movw	r22, r6
    16c8:	0e 94 df 0b 	call	0x17be	; 0x17be <fputc>
    16cc:	ea 94       	dec	r14
    16ce:	ee 20       	and	r14, r14
    16d0:	c1 f7       	brne	.-16     	; 0x16c2 <vfprintf+0x3be>
    16d2:	40 ce       	rjmp	.-896    	; 0x1354 <vfprintf+0x50>
    16d4:	f3 01       	movw	r30, r6
    16d6:	86 81       	ldd	r24, Z+6	; 0x06
    16d8:	97 81       	ldd	r25, Z+7	; 0x07
    16da:	02 c0       	rjmp	.+4      	; 0x16e0 <vfprintf+0x3dc>
    16dc:	8f ef       	ldi	r24, 0xFF	; 255
    16de:	9f ef       	ldi	r25, 0xFF	; 255
    16e0:	2d 96       	adiw	r28, 0x0d	; 13
    16e2:	0f b6       	in	r0, 0x3f	; 63
    16e4:	f8 94       	cli
    16e6:	de bf       	out	0x3e, r29	; 62
    16e8:	0f be       	out	0x3f, r0	; 63
    16ea:	cd bf       	out	0x3d, r28	; 61
    16ec:	df 91       	pop	r29
    16ee:	cf 91       	pop	r28
    16f0:	1f 91       	pop	r17
    16f2:	0f 91       	pop	r16
    16f4:	ff 90       	pop	r15
    16f6:	ef 90       	pop	r14
    16f8:	df 90       	pop	r13
    16fa:	cf 90       	pop	r12
    16fc:	bf 90       	pop	r11
    16fe:	af 90       	pop	r10
    1700:	9f 90       	pop	r9
    1702:	8f 90       	pop	r8
    1704:	7f 90       	pop	r7
    1706:	6f 90       	pop	r6
    1708:	5f 90       	pop	r5
    170a:	4f 90       	pop	r4
    170c:	3f 90       	pop	r3
    170e:	2f 90       	pop	r2
    1710:	08 95       	ret

00001712 <strnlen_P>:
    1712:	fc 01       	movw	r30, r24
    1714:	05 90       	lpm	r0, Z+
    1716:	61 50       	subi	r22, 0x01	; 1
    1718:	70 40       	sbci	r23, 0x00	; 0
    171a:	01 10       	cpse	r0, r1
    171c:	d8 f7       	brcc	.-10     	; 0x1714 <strnlen_P+0x2>
    171e:	80 95       	com	r24
    1720:	90 95       	com	r25
    1722:	8e 0f       	add	r24, r30
    1724:	9f 1f       	adc	r25, r31
    1726:	08 95       	ret

00001728 <strnlen>:
    1728:	fc 01       	movw	r30, r24
    172a:	61 50       	subi	r22, 0x01	; 1
    172c:	70 40       	sbci	r23, 0x00	; 0
    172e:	01 90       	ld	r0, Z+
    1730:	01 10       	cpse	r0, r1
    1732:	d8 f7       	brcc	.-10     	; 0x172a <strnlen+0x2>
    1734:	80 95       	com	r24
    1736:	90 95       	com	r25
    1738:	8e 0f       	add	r24, r30
    173a:	9f 1f       	adc	r25, r31
    173c:	08 95       	ret

0000173e <fgetc>:
    173e:	cf 93       	push	r28
    1740:	df 93       	push	r29
    1742:	ec 01       	movw	r28, r24
    1744:	2b 81       	ldd	r18, Y+3	; 0x03
    1746:	20 ff       	sbrs	r18, 0
    1748:	35 c0       	rjmp	.+106    	; 0x17b4 <fgetc+0x76>
    174a:	26 ff       	sbrs	r18, 6
    174c:	09 c0       	rjmp	.+18     	; 0x1760 <fgetc+0x22>
    174e:	2f 7b       	andi	r18, 0xBF	; 191
    1750:	2b 83       	std	Y+3, r18	; 0x03
    1752:	8e 81       	ldd	r24, Y+6	; 0x06
    1754:	9f 81       	ldd	r25, Y+7	; 0x07
    1756:	01 96       	adiw	r24, 0x01	; 1
    1758:	9f 83       	std	Y+7, r25	; 0x07
    175a:	8e 83       	std	Y+6, r24	; 0x06
    175c:	8a 81       	ldd	r24, Y+2	; 0x02
    175e:	28 c0       	rjmp	.+80     	; 0x17b0 <fgetc+0x72>
    1760:	22 ff       	sbrs	r18, 2
    1762:	0f c0       	rjmp	.+30     	; 0x1782 <fgetc+0x44>
    1764:	e8 81       	ld	r30, Y
    1766:	f9 81       	ldd	r31, Y+1	; 0x01
    1768:	80 81       	ld	r24, Z
    176a:	99 27       	eor	r25, r25
    176c:	87 fd       	sbrc	r24, 7
    176e:	90 95       	com	r25
    1770:	00 97       	sbiw	r24, 0x00	; 0
    1772:	19 f4       	brne	.+6      	; 0x177a <fgetc+0x3c>
    1774:	20 62       	ori	r18, 0x20	; 32
    1776:	2b 83       	std	Y+3, r18	; 0x03
    1778:	1d c0       	rjmp	.+58     	; 0x17b4 <fgetc+0x76>
    177a:	31 96       	adiw	r30, 0x01	; 1
    177c:	f9 83       	std	Y+1, r31	; 0x01
    177e:	e8 83       	st	Y, r30
    1780:	11 c0       	rjmp	.+34     	; 0x17a4 <fgetc+0x66>
    1782:	ea 85       	ldd	r30, Y+10	; 0x0a
    1784:	fb 85       	ldd	r31, Y+11	; 0x0b
    1786:	ce 01       	movw	r24, r28
    1788:	19 95       	eicall
    178a:	97 ff       	sbrs	r25, 7
    178c:	0b c0       	rjmp	.+22     	; 0x17a4 <fgetc+0x66>
    178e:	2b 81       	ldd	r18, Y+3	; 0x03
    1790:	3f ef       	ldi	r19, 0xFF	; 255
    1792:	8f 3f       	cpi	r24, 0xFF	; 255
    1794:	93 07       	cpc	r25, r19
    1796:	11 f4       	brne	.+4      	; 0x179c <fgetc+0x5e>
    1798:	80 e1       	ldi	r24, 0x10	; 16
    179a:	01 c0       	rjmp	.+2      	; 0x179e <fgetc+0x60>
    179c:	80 e2       	ldi	r24, 0x20	; 32
    179e:	82 2b       	or	r24, r18
    17a0:	8b 83       	std	Y+3, r24	; 0x03
    17a2:	08 c0       	rjmp	.+16     	; 0x17b4 <fgetc+0x76>
    17a4:	2e 81       	ldd	r18, Y+6	; 0x06
    17a6:	3f 81       	ldd	r19, Y+7	; 0x07
    17a8:	2f 5f       	subi	r18, 0xFF	; 255
    17aa:	3f 4f       	sbci	r19, 0xFF	; 255
    17ac:	3f 83       	std	Y+7, r19	; 0x07
    17ae:	2e 83       	std	Y+6, r18	; 0x06
    17b0:	90 e0       	ldi	r25, 0x00	; 0
    17b2:	02 c0       	rjmp	.+4      	; 0x17b8 <fgetc+0x7a>
    17b4:	8f ef       	ldi	r24, 0xFF	; 255
    17b6:	9f ef       	ldi	r25, 0xFF	; 255
    17b8:	df 91       	pop	r29
    17ba:	cf 91       	pop	r28
    17bc:	08 95       	ret

000017be <fputc>:
    17be:	0f 93       	push	r16
    17c0:	1f 93       	push	r17
    17c2:	cf 93       	push	r28
    17c4:	df 93       	push	r29
    17c6:	8c 01       	movw	r16, r24
    17c8:	eb 01       	movw	r28, r22
    17ca:	8b 81       	ldd	r24, Y+3	; 0x03
    17cc:	81 ff       	sbrs	r24, 1
    17ce:	1b c0       	rjmp	.+54     	; 0x1806 <fputc+0x48>
    17d0:	82 ff       	sbrs	r24, 2
    17d2:	0d c0       	rjmp	.+26     	; 0x17ee <fputc+0x30>
    17d4:	2e 81       	ldd	r18, Y+6	; 0x06
    17d6:	3f 81       	ldd	r19, Y+7	; 0x07
    17d8:	8c 81       	ldd	r24, Y+4	; 0x04
    17da:	9d 81       	ldd	r25, Y+5	; 0x05
    17dc:	28 17       	cp	r18, r24
    17de:	39 07       	cpc	r19, r25
    17e0:	64 f4       	brge	.+24     	; 0x17fa <fputc+0x3c>
    17e2:	e8 81       	ld	r30, Y
    17e4:	f9 81       	ldd	r31, Y+1	; 0x01
    17e6:	01 93       	st	Z+, r16
    17e8:	f9 83       	std	Y+1, r31	; 0x01
    17ea:	e8 83       	st	Y, r30
    17ec:	06 c0       	rjmp	.+12     	; 0x17fa <fputc+0x3c>
    17ee:	e8 85       	ldd	r30, Y+8	; 0x08
    17f0:	f9 85       	ldd	r31, Y+9	; 0x09
    17f2:	80 2f       	mov	r24, r16
    17f4:	19 95       	eicall
    17f6:	00 97       	sbiw	r24, 0x00	; 0
    17f8:	31 f4       	brne	.+12     	; 0x1806 <fputc+0x48>
    17fa:	8e 81       	ldd	r24, Y+6	; 0x06
    17fc:	9f 81       	ldd	r25, Y+7	; 0x07
    17fe:	01 96       	adiw	r24, 0x01	; 1
    1800:	9f 83       	std	Y+7, r25	; 0x07
    1802:	8e 83       	std	Y+6, r24	; 0x06
    1804:	02 c0       	rjmp	.+4      	; 0x180a <fputc+0x4c>
    1806:	0f ef       	ldi	r16, 0xFF	; 255
    1808:	1f ef       	ldi	r17, 0xFF	; 255
    180a:	c8 01       	movw	r24, r16
    180c:	df 91       	pop	r29
    180e:	cf 91       	pop	r28
    1810:	1f 91       	pop	r17
    1812:	0f 91       	pop	r16
    1814:	08 95       	ret

00001816 <__ultoa_invert>:
    1816:	fa 01       	movw	r30, r20
    1818:	aa 27       	eor	r26, r26
    181a:	28 30       	cpi	r18, 0x08	; 8
    181c:	51 f1       	breq	.+84     	; 0x1872 <__ultoa_invert+0x5c>
    181e:	20 31       	cpi	r18, 0x10	; 16
    1820:	81 f1       	breq	.+96     	; 0x1882 <__ultoa_invert+0x6c>
    1822:	e8 94       	clt
    1824:	6f 93       	push	r22
    1826:	6e 7f       	andi	r22, 0xFE	; 254
    1828:	6e 5f       	subi	r22, 0xFE	; 254
    182a:	7f 4f       	sbci	r23, 0xFF	; 255
    182c:	8f 4f       	sbci	r24, 0xFF	; 255
    182e:	9f 4f       	sbci	r25, 0xFF	; 255
    1830:	af 4f       	sbci	r26, 0xFF	; 255
    1832:	b1 e0       	ldi	r27, 0x01	; 1
    1834:	3e d0       	rcall	.+124    	; 0x18b2 <__ultoa_invert+0x9c>
    1836:	b4 e0       	ldi	r27, 0x04	; 4
    1838:	3c d0       	rcall	.+120    	; 0x18b2 <__ultoa_invert+0x9c>
    183a:	67 0f       	add	r22, r23
    183c:	78 1f       	adc	r23, r24
    183e:	89 1f       	adc	r24, r25
    1840:	9a 1f       	adc	r25, r26
    1842:	a1 1d       	adc	r26, r1
    1844:	68 0f       	add	r22, r24
    1846:	79 1f       	adc	r23, r25
    1848:	8a 1f       	adc	r24, r26
    184a:	91 1d       	adc	r25, r1
    184c:	a1 1d       	adc	r26, r1
    184e:	6a 0f       	add	r22, r26
    1850:	71 1d       	adc	r23, r1
    1852:	81 1d       	adc	r24, r1
    1854:	91 1d       	adc	r25, r1
    1856:	a1 1d       	adc	r26, r1
    1858:	20 d0       	rcall	.+64     	; 0x189a <__ultoa_invert+0x84>
    185a:	09 f4       	brne	.+2      	; 0x185e <__ultoa_invert+0x48>
    185c:	68 94       	set
    185e:	3f 91       	pop	r19
    1860:	2a e0       	ldi	r18, 0x0A	; 10
    1862:	26 9f       	mul	r18, r22
    1864:	11 24       	eor	r1, r1
    1866:	30 19       	sub	r19, r0
    1868:	30 5d       	subi	r19, 0xD0	; 208
    186a:	31 93       	st	Z+, r19
    186c:	de f6       	brtc	.-74     	; 0x1824 <__ultoa_invert+0xe>
    186e:	cf 01       	movw	r24, r30
    1870:	08 95       	ret
    1872:	46 2f       	mov	r20, r22
    1874:	47 70       	andi	r20, 0x07	; 7
    1876:	40 5d       	subi	r20, 0xD0	; 208
    1878:	41 93       	st	Z+, r20
    187a:	b3 e0       	ldi	r27, 0x03	; 3
    187c:	0f d0       	rcall	.+30     	; 0x189c <__ultoa_invert+0x86>
    187e:	c9 f7       	brne	.-14     	; 0x1872 <__ultoa_invert+0x5c>
    1880:	f6 cf       	rjmp	.-20     	; 0x186e <__ultoa_invert+0x58>
    1882:	46 2f       	mov	r20, r22
    1884:	4f 70       	andi	r20, 0x0F	; 15
    1886:	40 5d       	subi	r20, 0xD0	; 208
    1888:	4a 33       	cpi	r20, 0x3A	; 58
    188a:	18 f0       	brcs	.+6      	; 0x1892 <__ultoa_invert+0x7c>
    188c:	49 5d       	subi	r20, 0xD9	; 217
    188e:	31 fd       	sbrc	r19, 1
    1890:	40 52       	subi	r20, 0x20	; 32
    1892:	41 93       	st	Z+, r20
    1894:	02 d0       	rcall	.+4      	; 0x189a <__ultoa_invert+0x84>
    1896:	a9 f7       	brne	.-22     	; 0x1882 <__ultoa_invert+0x6c>
    1898:	ea cf       	rjmp	.-44     	; 0x186e <__ultoa_invert+0x58>
    189a:	b4 e0       	ldi	r27, 0x04	; 4
    189c:	a6 95       	lsr	r26
    189e:	97 95       	ror	r25
    18a0:	87 95       	ror	r24
    18a2:	77 95       	ror	r23
    18a4:	67 95       	ror	r22
    18a6:	ba 95       	dec	r27
    18a8:	c9 f7       	brne	.-14     	; 0x189c <__ultoa_invert+0x86>
    18aa:	00 97       	sbiw	r24, 0x00	; 0
    18ac:	61 05       	cpc	r22, r1
    18ae:	71 05       	cpc	r23, r1
    18b0:	08 95       	ret
    18b2:	9b 01       	movw	r18, r22
    18b4:	ac 01       	movw	r20, r24
    18b6:	0a 2e       	mov	r0, r26
    18b8:	06 94       	lsr	r0
    18ba:	57 95       	ror	r21
    18bc:	47 95       	ror	r20
    18be:	37 95       	ror	r19
    18c0:	27 95       	ror	r18
    18c2:	ba 95       	dec	r27
    18c4:	c9 f7       	brne	.-14     	; 0x18b8 <__ultoa_invert+0xa2>
    18c6:	62 0f       	add	r22, r18
    18c8:	73 1f       	adc	r23, r19
    18ca:	84 1f       	adc	r24, r20
    18cc:	95 1f       	adc	r25, r21
    18ce:	a0 1d       	adc	r26, r0
    18d0:	08 95       	ret

000018d2 <_exit>:
    18d2:	f8 94       	cli

000018d4 <__stop_program>:
    18d4:	ff cf       	rjmp	.-2      	; 0x18d4 <__stop_program>
