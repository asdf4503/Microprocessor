
Pjt12_ADC_TC1047.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000210  00800200  000022ec  00002380  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000022ec  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000142  00800410  00800410  00002590  2**0
                  ALLOC
  3 .stab         0000117c  00000000  00000000  00002590  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000039d  00000000  00000000  0000370c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000408  00000000  00000000  00003ab0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003f64  00000000  00000000  00003eb8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001f2a  00000000  00000000  00007e1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001f9b  00000000  00000000  00009d46  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000ad8  00000000  00000000  0000bce4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000aee  00000000  00000000  0000c7bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000028dc  00000000  00000000  0000d2aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f8  00000000  00000000  0000fb86  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
       4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
       8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
       c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      10:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      14:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      18:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      1c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      20:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      24:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      28:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      2c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      30:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      34:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      38:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      3c:	0c 94 46 05 	jmp	0xa8c	; 0xa8c <__vector_15>
      40:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      44:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      48:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      4c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      50:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      54:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      58:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      5c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      60:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      64:	0c 94 5c 07 	jmp	0xeb8	; 0xeb8 <__vector_25>
      68:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      6c:	0c 94 2d 07 	jmp	0xe5a	; 0xe5a <__vector_27>
      70:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      74:	0c 94 dc 07 	jmp	0xfb8	; 0xfb8 <__vector_29>
      78:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      7c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      80:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      84:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      88:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      8c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      90:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      94:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      98:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      9c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      a0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      a4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      a8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      ac:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      b0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      b4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      b8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      bc:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      c0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      c4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      c8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      cc:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      d0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      d4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      d8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      dc:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      e0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	14 e0       	ldi	r17, 0x04	; 4
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	ec ee       	ldi	r30, 0xEC	; 236
      fc:	f2 e2       	ldi	r31, 0x22	; 34
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	a0 31       	cpi	r26, 0x10	; 16
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>
     10e:	1b be       	out	0x3b, r1	; 59

00000110 <__do_clear_bss>:
     110:	15 e0       	ldi	r17, 0x05	; 5
     112:	a0 e1       	ldi	r26, 0x10	; 16
     114:	b4 e0       	ldi	r27, 0x04	; 4
     116:	01 c0       	rjmp	.+2      	; 0x11a <.do_clear_bss_start>

00000118 <.do_clear_bss_loop>:
     118:	1d 92       	st	X+, r1

0000011a <.do_clear_bss_start>:
     11a:	a2 35       	cpi	r26, 0x52	; 82
     11c:	b1 07       	cpc	r27, r17
     11e:	e1 f7       	brne	.-8      	; 0x118 <.do_clear_bss_loop>
     120:	0e 94 99 0b 	call	0x1732	; 0x1732 <main>
     124:	0c 94 74 11 	jmp	0x22e8	; 0x22e8 <_exit>

00000128 <__bad_interrupt>:
     128:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012c <app_list>:
#include <string.h>
#include "link.h"
#include "app.h"
#include "timer_task.h"

void app_list(char *ap) {
     12c:	ef 92       	push	r14
     12e:	ff 92       	push	r15
     130:	1f 93       	push	r17
     132:	cf 93       	push	r28
     134:	df 93       	push	r29
     136:	cd b7       	in	r28, 0x3d	; 61
     138:	de b7       	in	r29, 0x3e	; 62
     13a:	28 97       	sbiw	r28, 0x08	; 8
     13c:	0f b6       	in	r0, 0x3f	; 63
     13e:	f8 94       	cli
     140:	de bf       	out	0x3e, r29	; 62
     142:	0f be       	out	0x3f, r0	; 63
     144:	cd bf       	out	0x3d, r28	; 61
	char buf[8], how = 'a';
	struct node *np;

	if(ap)	how = *ap;
     146:	00 97       	sbiw	r24, 0x00	; 0
     148:	19 f0       	breq	.+6      	; 0x150 <app_list+0x24>
     14a:	fc 01       	movw	r30, r24
     14c:	10 81       	ld	r17, Z
     14e:	01 c0       	rjmp	.+2      	; 0x152 <app_list+0x26>
#include "link.h"
#include "app.h"
#include "timer_task.h"

void app_list(char *ap) {
	char buf[8], how = 'a';
     150:	11 e6       	ldi	r17, 0x61	; 97
	struct node *np;

	if(ap)	how = *ap;
	while(1) {
		printf("> ");
     152:	80 e0       	ldi	r24, 0x00	; 0
     154:	e8 2e       	mov	r14, r24
     156:	82 e0       	ldi	r24, 0x02	; 2
     158:	f8 2e       	mov	r15, r24
     15a:	0f 92       	push	r0
     15c:	0f 92       	push	r0
     15e:	ed b7       	in	r30, 0x3d	; 61
     160:	fe b7       	in	r31, 0x3e	; 62
     162:	f2 82       	std	Z+2, r15	; 0x02
     164:	e1 82       	std	Z+1, r14	; 0x01
     166:	0e 94 17 0e 	call	0x1c2e	; 0x1c2e <printf>
		if(fgets(buf, 8, stdin) == NULL)
     16a:	0f 90       	pop	r0
     16c:	0f 90       	pop	r0
     16e:	40 91 4c 05 	lds	r20, 0x054C
     172:	50 91 4d 05 	lds	r21, 0x054D
     176:	ce 01       	movw	r24, r28
     178:	01 96       	adiw	r24, 0x01	; 1
     17a:	68 e0       	ldi	r22, 0x08	; 8
     17c:	70 e0       	ldi	r23, 0x00	; 0
     17e:	0e 94 bd 0d 	call	0x1b7a	; 0x1b7a <fgets>
     182:	00 97       	sbiw	r24, 0x00	; 0
     184:	c9 f0       	breq	.+50     	; 0x1b8 <app_list+0x8c>
			break;
		np = get_node();
     186:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <get_node>
		np->data = buf[0];
     18a:	29 81       	ldd	r18, Y+1	; 0x01
     18c:	fc 01       	movw	r30, r24
     18e:	20 83       	st	Z, r18
     190:	11 82       	std	Z+1, r1	; 0x01
		switch(how) {
     192:	18 36       	cpi	r17, 0x68	; 104
     194:	29 f0       	breq	.+10     	; 0x1a0 <app_list+0x74>
     196:	14 37       	cpi	r17, 0x74	; 116
     198:	31 f0       	breq	.+12     	; 0x1a6 <app_list+0x7a>
     19a:	14 36       	cpi	r17, 0x64	; 100
     19c:	51 f4       	brne	.+20     	; 0x1b2 <app_list+0x86>
     19e:	06 c0       	rjmp	.+12     	; 0x1ac <app_list+0x80>
			case 'h' 	: insert_node_head(np);	break;
     1a0:	0e 94 64 01 	call	0x2c8	; 0x2c8 <insert_node_head>
     1a4:	da cf       	rjmp	.-76     	; 0x15a <app_list+0x2e>
			case 't' 	: insert_node_tail(np);	break;
     1a6:	0e 94 79 01 	call	0x2f2	; 0x2f2 <insert_node_tail>
     1aa:	d7 cf       	rjmp	.-82     	; 0x15a <app_list+0x2e>
			case 'd' 	: insert_node_desc(np);	break;
     1ac:	0e 94 c7 01 	call	0x38e	; 0x38e <insert_node_desc>
     1b0:	d4 cf       	rjmp	.-88     	; 0x15a <app_list+0x2e>
			default  	: insert_node_ascn(np);
     1b2:	0e 94 90 01 	call	0x320	; 0x320 <insert_node_ascn>
     1b6:	d1 cf       	rjmp	.-94     	; 0x15a <app_list+0x2e>
		}
	}
	tour_list();
     1b8:	0e 94 fe 01 	call	0x3fc	; 0x3fc <tour_list>
	free_list();
     1bc:	0e 94 2b 02 	call	0x456	; 0x456 <free_list>
}
     1c0:	28 96       	adiw	r28, 0x08	; 8
     1c2:	0f b6       	in	r0, 0x3f	; 63
     1c4:	f8 94       	cli
     1c6:	de bf       	out	0x3e, r29	; 62
     1c8:	0f be       	out	0x3f, r0	; 63
     1ca:	cd bf       	out	0x3d, r28	; 61
     1cc:	df 91       	pop	r29
     1ce:	cf 91       	pop	r28
     1d0:	1f 91       	pop	r17
     1d2:	ff 90       	pop	r15
     1d4:	ef 90       	pop	r14
     1d6:	08 95       	ret

000001d8 <app_timer>:

void app_timer(char *ap) {
     1d8:	0f 93       	push	r16
     1da:	1f 93       	push	r17
     1dc:	cf 93       	push	r28
     1de:	df 93       	push	r29
     1e0:	cd b7       	in	r28, 0x3d	; 61
     1e2:	de b7       	in	r29, 0x3e	; 62
     1e4:	62 97       	sbiw	r28, 0x12	; 18
     1e6:	0f b6       	in	r0, 0x3f	; 63
     1e8:	f8 94       	cli
     1ea:	de bf       	out	0x3e, r29	; 62
     1ec:	0f be       	out	0x3f, r0	; 63
     1ee:	cd bf       	out	0x3d, r28	; 61
	char		buf[8];
	int			ms;
	struct task tsk;

	while(1) {
		printf(">>");
     1f0:	03 e0       	ldi	r16, 0x03	; 3
     1f2:	12 e0       	ldi	r17, 0x02	; 2
     1f4:	0f 92       	push	r0
     1f6:	0f 92       	push	r0
     1f8:	ed b7       	in	r30, 0x3d	; 61
     1fa:	fe b7       	in	r31, 0x3e	; 62
     1fc:	12 83       	std	Z+2, r17	; 0x02
     1fe:	01 83       	std	Z+1, r16	; 0x01
     200:	0e 94 17 0e 	call	0x1c2e	; 0x1c2e <printf>
		if(fgets(buf, 8, stdin) == NULL || (ms = atoi(buf)) == 0)
     204:	0f 90       	pop	r0
     206:	0f 90       	pop	r0
     208:	40 91 4c 05 	lds	r20, 0x054C
     20c:	50 91 4d 05 	lds	r21, 0x054D
     210:	ce 01       	movw	r24, r28
     212:	01 96       	adiw	r24, 0x01	; 1
     214:	68 e0       	ldi	r22, 0x08	; 8
     216:	70 e0       	ldi	r23, 0x00	; 0
     218:	0e 94 bd 0d 	call	0x1b7a	; 0x1b7a <fgets>
     21c:	00 97       	sbiw	r24, 0x00	; 0
     21e:	61 f0       	breq	.+24     	; 0x238 <app_timer+0x60>
     220:	ce 01       	movw	r24, r28
     222:	01 96       	adiw	r24, 0x01	; 1
     224:	0e 94 5b 0d 	call	0x1ab6	; 0x1ab6 <atoi>
     228:	bc 01       	movw	r22, r24
     22a:	00 97       	sbiw	r24, 0x00	; 0
     22c:	29 f0       	breq	.+10     	; 0x238 <app_timer+0x60>
			break;

		insert_timer(&tsk, ms);
     22e:	ce 01       	movw	r24, r28
     230:	09 96       	adiw	r24, 0x09	; 9
     232:	0e 94 05 04 	call	0x80a	; 0x80a <insert_timer>
	}
     236:	de cf       	rjmp	.-68     	; 0x1f4 <app_timer+0x1c>
	tour_timer();
     238:	0e 94 78 04 	call	0x8f0	; 0x8f0 <tour_timer>
	free_timer();
     23c:	0e 94 ba 04 	call	0x974	; 0x974 <free_timer>
}
     240:	62 96       	adiw	r28, 0x12	; 18
     242:	0f b6       	in	r0, 0x3f	; 63
     244:	f8 94       	cli
     246:	de bf       	out	0x3e, r29	; 62
     248:	0f be       	out	0x3f, r0	; 63
     24a:	cd bf       	out	0x3d, r28	; 61
     24c:	df 91       	pop	r29
     24e:	cf 91       	pop	r28
     250:	1f 91       	pop	r17
     252:	0f 91       	pop	r16
     254:	08 95       	ret

00000256 <app_add>:

void app_add(char *ap) {
     256:	cf 93       	push	r28
     258:	df 93       	push	r29
	int t1, t2;
    if (ap != NULL) {
     25a:	00 97       	sbiw	r24, 0x00	; 0
     25c:	31 f1       	breq	.+76     	; 0x2aa <app_add+0x54>
        char *bp = strtok(ap, " ");
     25e:	66 e0       	ldi	r22, 0x06	; 6
     260:	72 e0       	ldi	r23, 0x02	; 2
     262:	0e 94 79 0d 	call	0x1af2	; 0x1af2 <strtok>
        if (bp != NULL) {
     266:	00 97       	sbiw	r24, 0x00	; 0
     268:	01 f1       	breq	.+64     	; 0x2aa <app_add+0x54>
            t1 = atoi(bp); 
     26a:	0e 94 5b 0d 	call	0x1ab6	; 0x1ab6 <atoi>
     26e:	ec 01       	movw	r28, r24
            bp = strtok(NULL, " "); 
     270:	80 e0       	ldi	r24, 0x00	; 0
     272:	90 e0       	ldi	r25, 0x00	; 0
     274:	66 e0       	ldi	r22, 0x06	; 6
     276:	72 e0       	ldi	r23, 0x02	; 2
     278:	0e 94 79 0d 	call	0x1af2	; 0x1af2 <strtok>
            if (bp != NULL) {
     27c:	00 97       	sbiw	r24, 0x00	; 0
     27e:	a9 f0       	breq	.+42     	; 0x2aa <app_add+0x54>
                t2 = atoi(bp); 
     280:	0e 94 5b 0d 	call	0x1ab6	; 0x1ab6 <atoi>
                printf("add = %d\n", t1 + t2); 
     284:	00 d0       	rcall	.+0      	; 0x286 <app_add+0x30>
     286:	0f 92       	push	r0
     288:	28 e0       	ldi	r18, 0x08	; 8
     28a:	32 e0       	ldi	r19, 0x02	; 2
     28c:	ed b7       	in	r30, 0x3d	; 61
     28e:	fe b7       	in	r31, 0x3e	; 62
     290:	32 83       	std	Z+2, r19	; 0x02
     292:	21 83       	std	Z+1, r18	; 0x01
     294:	c8 0f       	add	r28, r24
     296:	d9 1f       	adc	r29, r25
     298:	d4 83       	std	Z+4, r29	; 0x04
     29a:	c3 83       	std	Z+3, r28	; 0x03
     29c:	0e 94 17 0e 	call	0x1c2e	; 0x1c2e <printf>
     2a0:	0f 90       	pop	r0
     2a2:	0f 90       	pop	r0
     2a4:	0f 90       	pop	r0
     2a6:	0f 90       	pop	r0
     2a8:	04 c0       	rjmp	.+8      	; 0x2b2 <app_add+0x5c>
            }
        } else {
            printf("error...\n"); 
        }
    } else {
        printf("error...\n");
     2aa:	82 e1       	ldi	r24, 0x12	; 18
     2ac:	92 e0       	ldi	r25, 0x02	; 2
     2ae:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <puts>
    }
}
     2b2:	df 91       	pop	r29
     2b4:	cf 91       	pop	r28
     2b6:	08 95       	ret

000002b8 <get_node>:
struct node *Head = NULL;

struct node *get_node() {
	struct node *cp;

	cp = (struct node *)malloc(sizeof(struct node));
     2b8:	84 e0       	ldi	r24, 0x04	; 4
     2ba:	90 e0       	ldi	r25, 0x00	; 0
     2bc:	0e 94 2c 0c 	call	0x1858	; 0x1858 <malloc>
	return(cp);
}
     2c0:	08 95       	ret

000002c2 <free_node>:


void free_node(struct node *np) {
	free(np);
     2c2:	0e 94 c2 0c 	call	0x1984	; 0x1984 <free>
}
     2c6:	08 95       	ret

000002c8 <insert_node_head>:

void insert_node_head(struct node *np) {
     2c8:	fc 01       	movw	r30, r24
	if(!Head) {
     2ca:	80 91 10 04 	lds	r24, 0x0410
     2ce:	90 91 11 04 	lds	r25, 0x0411
     2d2:	00 97       	sbiw	r24, 0x00	; 0
     2d4:	39 f4       	brne	.+14     	; 0x2e4 <insert_node_head+0x1c>
		Head = np;
     2d6:	f0 93 11 04 	sts	0x0411, r31
     2da:	e0 93 10 04 	sts	0x0410, r30
		np->link = NULL;
     2de:	13 82       	std	Z+3, r1	; 0x03
     2e0:	12 82       	std	Z+2, r1	; 0x02
     2e2:	08 95       	ret
	} else {
		np->link = Head;
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
		Head = np;
     2e8:	f0 93 11 04 	sts	0x0411, r31
     2ec:	e0 93 10 04 	sts	0x0410, r30
     2f0:	08 95       	ret

000002f2 <insert_node_tail>:
}

void insert_node_tail(struct node *np) {
	struct node *cp;

	if(!Head)
     2f2:	e0 91 10 04 	lds	r30, 0x0410
     2f6:	f0 91 11 04 	lds	r31, 0x0411
     2fa:	30 97       	sbiw	r30, 0x00	; 0
     2fc:	31 f4       	brne	.+12     	; 0x30a <insert_node_tail+0x18>
		Head = np;
     2fe:	90 93 11 04 	sts	0x0411, r25
     302:	80 93 10 04 	sts	0x0410, r24
     306:	08 c0       	rjmp	.+16     	; 0x318 <insert_node_tail+0x26>
	else {
		for(cp = Head;cp->link != NULL;cp = cp->link)
     308:	f9 01       	movw	r30, r18
     30a:	22 81       	ldd	r18, Z+2	; 0x02
     30c:	33 81       	ldd	r19, Z+3	; 0x03
     30e:	21 15       	cp	r18, r1
     310:	31 05       	cpc	r19, r1
     312:	d1 f7       	brne	.-12     	; 0x308 <insert_node_tail+0x16>
			;
		cp->link = np;
     314:	93 83       	std	Z+3, r25	; 0x03
     316:	82 83       	std	Z+2, r24	; 0x02
	}
	np->link = NULL;
     318:	fc 01       	movw	r30, r24
     31a:	13 82       	std	Z+3, r1	; 0x03
     31c:	12 82       	std	Z+2, r1	; 0x02
}
     31e:	08 95       	ret

00000320 <insert_node_ascn>:

void insert_node_ascn(struct node *np) {
     320:	cf 93       	push	r28
     322:	df 93       	push	r29
     324:	fc 01       	movw	r30, r24
	struct node *cp, *pp;
	if(!Head) {
     326:	20 91 10 04 	lds	r18, 0x0410
     32a:	30 91 11 04 	lds	r19, 0x0411
     32e:	21 15       	cp	r18, r1
     330:	31 05       	cpc	r19, r1
     332:	31 f0       	breq	.+12     	; 0x340 <insert_node_ascn+0x20>
		Head = np;
		np->link = NULL;
	}
	else {
		for(cp = Head, pp = NULL;cp != NULL && cp->data < np->data;pp = cp, cp = cp->link)
     334:	40 81       	ld	r20, Z
     336:	51 81       	ldd	r21, Z+1	; 0x01
     338:	d9 01       	movw	r26, r18
     33a:	c0 e0       	ldi	r28, 0x00	; 0
     33c:	d0 e0       	ldi	r29, 0x00	; 0
     33e:	0f c0       	rjmp	.+30     	; 0x35e <insert_node_ascn+0x3e>
}

void insert_node_ascn(struct node *np) {
	struct node *cp, *pp;
	if(!Head) {
		Head = np;
     340:	90 93 11 04 	sts	0x0411, r25
     344:	80 93 10 04 	sts	0x0410, r24
		np->link = NULL;
     348:	13 82       	std	Z+3, r1	; 0x03
     34a:	12 82       	std	Z+2, r1	; 0x02
     34c:	1d c0       	rjmp	.+58     	; 0x388 <insert_node_ascn+0x68>
	}
	else {
		for(cp = Head, pp = NULL;cp != NULL && cp->data < np->data;pp = cp, cp = cp->link)
     34e:	12 96       	adiw	r26, 0x02	; 2
     350:	8d 91       	ld	r24, X+
     352:	9c 91       	ld	r25, X
     354:	13 97       	sbiw	r26, 0x03	; 3
     356:	ed 01       	movw	r28, r26
     358:	00 97       	sbiw	r24, 0x00	; 0
     35a:	39 f0       	breq	.+14     	; 0x36a <insert_node_ascn+0x4a>
     35c:	dc 01       	movw	r26, r24
     35e:	8d 91       	ld	r24, X+
     360:	9c 91       	ld	r25, X
     362:	11 97       	sbiw	r26, 0x01	; 1
     364:	84 17       	cp	r24, r20
     366:	95 07       	cpc	r25, r21
     368:	94 f3       	brlt	.-28     	; 0x34e <insert_node_ascn+0x2e>
			;
		if(pp == NULL) {
     36a:	20 97       	sbiw	r28, 0x00	; 0
     36c:	39 f4       	brne	.+14     	; 0x37c <insert_node_ascn+0x5c>
			np->link = Head;
     36e:	33 83       	std	Z+3, r19	; 0x03
     370:	22 83       	std	Z+2, r18	; 0x02
			Head = np;
     372:	f0 93 11 04 	sts	0x0411, r31
     376:	e0 93 10 04 	sts	0x0410, r30
     37a:	06 c0       	rjmp	.+12     	; 0x388 <insert_node_ascn+0x68>
		} else {
			np->link = pp->link;
     37c:	8a 81       	ldd	r24, Y+2	; 0x02
     37e:	9b 81       	ldd	r25, Y+3	; 0x03
     380:	93 83       	std	Z+3, r25	; 0x03
     382:	82 83       	std	Z+2, r24	; 0x02
			pp->link = np;
     384:	fb 83       	std	Y+3, r31	; 0x03
     386:	ea 83       	std	Y+2, r30	; 0x02
		}
	}
}
     388:	df 91       	pop	r29
     38a:	cf 91       	pop	r28
     38c:	08 95       	ret

0000038e <insert_node_desc>:

void insert_node_desc(struct node *np) {
     38e:	cf 93       	push	r28
     390:	df 93       	push	r29
     392:	fc 01       	movw	r30, r24
	struct node *cp, *pp;
	if(!Head) {
     394:	20 91 10 04 	lds	r18, 0x0410
     398:	30 91 11 04 	lds	r19, 0x0411
     39c:	21 15       	cp	r18, r1
     39e:	31 05       	cpc	r19, r1
     3a0:	31 f0       	breq	.+12     	; 0x3ae <insert_node_desc+0x20>
		Head = np;
		np->link = NULL;
	}
	else {
		for(cp = Head, pp = NULL;cp != NULL && cp->data < np->data;pp = cp, cp = cp->link)
     3a2:	40 81       	ld	r20, Z
     3a4:	51 81       	ldd	r21, Z+1	; 0x01
     3a6:	d9 01       	movw	r26, r18
     3a8:	c0 e0       	ldi	r28, 0x00	; 0
     3aa:	d0 e0       	ldi	r29, 0x00	; 0
     3ac:	0f c0       	rjmp	.+30     	; 0x3cc <insert_node_desc+0x3e>
}

void insert_node_desc(struct node *np) {
	struct node *cp, *pp;
	if(!Head) {
		Head = np;
     3ae:	90 93 11 04 	sts	0x0411, r25
     3b2:	80 93 10 04 	sts	0x0410, r24
		np->link = NULL;
     3b6:	13 82       	std	Z+3, r1	; 0x03
     3b8:	12 82       	std	Z+2, r1	; 0x02
     3ba:	1d c0       	rjmp	.+58     	; 0x3f6 <insert_node_desc+0x68>
	}
	else {
		for(cp = Head, pp = NULL;cp != NULL && cp->data < np->data;pp = cp, cp = cp->link)
     3bc:	12 96       	adiw	r26, 0x02	; 2
     3be:	8d 91       	ld	r24, X+
     3c0:	9c 91       	ld	r25, X
     3c2:	13 97       	sbiw	r26, 0x03	; 3
     3c4:	ed 01       	movw	r28, r26
     3c6:	00 97       	sbiw	r24, 0x00	; 0
     3c8:	39 f0       	breq	.+14     	; 0x3d8 <insert_node_desc+0x4a>
     3ca:	dc 01       	movw	r26, r24
     3cc:	8d 91       	ld	r24, X+
     3ce:	9c 91       	ld	r25, X
     3d0:	11 97       	sbiw	r26, 0x01	; 1
     3d2:	84 17       	cp	r24, r20
     3d4:	95 07       	cpc	r25, r21
     3d6:	94 f3       	brlt	.-28     	; 0x3bc <insert_node_desc+0x2e>
			;
		if(pp == NULL) {
     3d8:	20 97       	sbiw	r28, 0x00	; 0
     3da:	39 f4       	brne	.+14     	; 0x3ea <insert_node_desc+0x5c>
			np->link = pp->link;
     3dc:	8a 81       	ldd	r24, Y+2	; 0x02
     3de:	9b 81       	ldd	r25, Y+3	; 0x03
     3e0:	93 83       	std	Z+3, r25	; 0x03
     3e2:	82 83       	std	Z+2, r24	; 0x02
			pp->link = np;
     3e4:	fb 83       	std	Y+3, r31	; 0x03
     3e6:	ea 83       	std	Y+2, r30	; 0x02
     3e8:	06 c0       	rjmp	.+12     	; 0x3f6 <insert_node_desc+0x68>
		} else {
			np->link = Head;
     3ea:	33 83       	std	Z+3, r19	; 0x03
     3ec:	22 83       	std	Z+2, r18	; 0x02
			Head = np;
     3ee:	f0 93 11 04 	sts	0x0411, r31
     3f2:	e0 93 10 04 	sts	0x0410, r30
		}
	}
}
     3f6:	df 91       	pop	r29
     3f8:	cf 91       	pop	r28
     3fa:	08 95       	ret

000003fc <tour_list>:

void tour_list() {
     3fc:	0f 93       	push	r16
     3fe:	1f 93       	push	r17
     400:	cf 93       	push	r28
     402:	df 93       	push	r29
	struct node *cp;

	printf("\n");
     404:	8a e0       	ldi	r24, 0x0A	; 10
     406:	90 e0       	ldi	r25, 0x00	; 0
     408:	0e 94 29 0e 	call	0x1c52	; 0x1c52 <putchar>
	for(cp = Head;cp != NULL;cp = cp->link)
     40c:	c0 91 10 04 	lds	r28, 0x0410
     410:	d0 91 11 04 	lds	r29, 0x0411
		printf("-->%c ", cp->data);
     414:	0b e1       	ldi	r16, 0x1B	; 27
     416:	12 e0       	ldi	r17, 0x02	; 2

void tour_list() {
	struct node *cp;

	printf("\n");
	for(cp = Head;cp != NULL;cp = cp->link)
     418:	13 c0       	rjmp	.+38     	; 0x440 <tour_list+0x44>
		printf("-->%c ", cp->data);
     41a:	00 d0       	rcall	.+0      	; 0x41c <tour_list+0x20>
     41c:	0f 92       	push	r0
     41e:	ed b7       	in	r30, 0x3d	; 61
     420:	fe b7       	in	r31, 0x3e	; 62
     422:	12 83       	std	Z+2, r17	; 0x02
     424:	01 83       	std	Z+1, r16	; 0x01
     426:	88 81       	ld	r24, Y
     428:	99 81       	ldd	r25, Y+1	; 0x01
     42a:	94 83       	std	Z+4, r25	; 0x04
     42c:	83 83       	std	Z+3, r24	; 0x03
     42e:	0e 94 17 0e 	call	0x1c2e	; 0x1c2e <printf>

void tour_list() {
	struct node *cp;

	printf("\n");
	for(cp = Head;cp != NULL;cp = cp->link)
     432:	0a 80       	ldd	r0, Y+2	; 0x02
     434:	db 81       	ldd	r29, Y+3	; 0x03
     436:	c0 2d       	mov	r28, r0
     438:	0f 90       	pop	r0
     43a:	0f 90       	pop	r0
     43c:	0f 90       	pop	r0
     43e:	0f 90       	pop	r0
     440:	20 97       	sbiw	r28, 0x00	; 0
     442:	59 f7       	brne	.-42     	; 0x41a <tour_list+0x1e>
		printf("-->%c ", cp->data);

	printf("\n");
     444:	8a e0       	ldi	r24, 0x0A	; 10
     446:	90 e0       	ldi	r25, 0x00	; 0
     448:	0e 94 29 0e 	call	0x1c52	; 0x1c52 <putchar>
}
     44c:	df 91       	pop	r29
     44e:	cf 91       	pop	r28
     450:	1f 91       	pop	r17
     452:	0f 91       	pop	r16
     454:	08 95       	ret

00000456 <free_list>:

void free_list() {
	struct node *cp;

	for( ;Head != NULL; ) {
     456:	09 c0       	rjmp	.+18     	; 0x46a <free_list+0x14>
		cp = Head;
		Head = cp->link;
     458:	fc 01       	movw	r30, r24
     45a:	22 81       	ldd	r18, Z+2	; 0x02
     45c:	33 81       	ldd	r19, Z+3	; 0x03
     45e:	30 93 11 04 	sts	0x0411, r19
     462:	20 93 10 04 	sts	0x0410, r18
	return(cp);
}


void free_node(struct node *np) {
	free(np);
     466:	0e 94 c2 0c 	call	0x1984	; 0x1984 <free>
}

void free_list() {
	struct node *cp;

	for( ;Head != NULL; ) {
     46a:	80 91 10 04 	lds	r24, 0x0410
     46e:	90 91 11 04 	lds	r25, 0x0411
     472:	00 97       	sbiw	r24, 0x00	; 0
     474:	89 f7       	brne	.-30     	; 0x458 <free_list+0x2>
		cp = Head;
		Head = cp->link;
		free_node(cp);
	}
}
     476:	08 95       	ret

00000478 <is_prime>:
#include <stdio.h>
#include <stdlib.h>
#include <compat/deprecated.h>
#include "prime.h"

int is_prime(int n) {
     478:	cf 93       	push	r28
     47a:	df 93       	push	r29
     47c:	fc 01       	movw	r30, r24
	int i;
	for(i = 2;i <= n/2;i++)
     47e:	62 e0       	ldi	r22, 0x02	; 2
     480:	70 e0       	ldi	r23, 0x00	; 0
     482:	0e 94 ce 0b 	call	0x179c	; 0x179c <__divmodhi4>
     486:	eb 01       	movw	r28, r22
     488:	22 e0       	ldi	r18, 0x02	; 2
     48a:	30 e0       	ldi	r19, 0x00	; 0
     48c:	08 c0       	rjmp	.+16     	; 0x49e <is_prime+0x26>
		if((n % i) == 0)
     48e:	cf 01       	movw	r24, r30
     490:	b9 01       	movw	r22, r18
     492:	0e 94 ce 0b 	call	0x179c	; 0x179c <__divmodhi4>
     496:	00 97       	sbiw	r24, 0x00	; 0
     498:	41 f0       	breq	.+16     	; 0x4aa <is_prime+0x32>
#include <compat/deprecated.h>
#include "prime.h"

int is_prime(int n) {
	int i;
	for(i = 2;i <= n/2;i++)
     49a:	2f 5f       	subi	r18, 0xFF	; 255
     49c:	3f 4f       	sbci	r19, 0xFF	; 255
     49e:	c2 17       	cp	r28, r18
     4a0:	d3 07       	cpc	r29, r19
     4a2:	ac f7       	brge	.-22     	; 0x48e <is_prime+0x16>
		if((n % i) == 0)
			return(0);
	return(1);
     4a4:	81 e0       	ldi	r24, 0x01	; 1
     4a6:	90 e0       	ldi	r25, 0x00	; 0
     4a8:	02 c0       	rjmp	.+4      	; 0x4ae <is_prime+0x36>

int is_prime(int n) {
	int i;
	for(i = 2;i <= n/2;i++)
		if((n % i) == 0)
			return(0);
     4aa:	80 e0       	ldi	r24, 0x00	; 0
     4ac:	90 e0       	ldi	r25, 0x00	; 0
	return(1);
}
     4ae:	df 91       	pop	r29
     4b0:	cf 91       	pop	r28
     4b2:	08 95       	ret

000004b4 <app_prime>:

void app_prime(char *ap) {
     4b4:	cf 92       	push	r12
     4b6:	df 92       	push	r13
     4b8:	ef 92       	push	r14
     4ba:	ff 92       	push	r15
     4bc:	0f 93       	push	r16
     4be:	1f 93       	push	r17
     4c0:	cf 93       	push	r28
     4c2:	df 93       	push	r29
	int t = 300, n, count = 0;
	if(ap) t = atoi(ap);
     4c4:	00 97       	sbiw	r24, 0x00	; 0
     4c6:	21 f0       	breq	.+8      	; 0x4d0 <app_prime+0x1c>
     4c8:	0e 94 5b 0d 	call	0x1ab6	; 0x1ab6 <atoi>
     4cc:	7c 01       	movw	r14, r24
     4ce:	04 c0       	rjmp	.+8      	; 0x4d8 <app_prime+0x24>
			return(0);
	return(1);
}

void app_prime(char *ap) {
	int t = 300, n, count = 0;
     4d0:	9c e2       	ldi	r25, 0x2C	; 44
     4d2:	e9 2e       	mov	r14, r25
     4d4:	91 e0       	ldi	r25, 0x01	; 1
     4d6:	f9 2e       	mov	r15, r25
     4d8:	00 e0       	ldi	r16, 0x00	; 0
     4da:	10 e0       	ldi	r17, 0x00	; 0
	if(ap) t = atoi(ap);
	for(n = 2;n <= t;n++) {
     4dc:	c2 e0       	ldi	r28, 0x02	; 2
     4de:	d0 e0       	ldi	r29, 0x00	; 0
		if(is_prime(n)) {
			count++;
			printf("%d is a prime number !!! \n", n);
     4e0:	85 e2       	ldi	r24, 0x25	; 37
     4e2:	c8 2e       	mov	r12, r24
     4e4:	82 e0       	ldi	r24, 0x02	; 2
     4e6:	d8 2e       	mov	r13, r24
}

void app_prime(char *ap) {
	int t = 300, n, count = 0;
	if(ap) t = atoi(ap);
	for(n = 2;n <= t;n++) {
     4e8:	16 c0       	rjmp	.+44     	; 0x516 <app_prime+0x62>
		if(is_prime(n)) {
     4ea:	ce 01       	movw	r24, r28
     4ec:	0e 94 3c 02 	call	0x478	; 0x478 <is_prime>
     4f0:	00 97       	sbiw	r24, 0x00	; 0
     4f2:	81 f0       	breq	.+32     	; 0x514 <app_prime+0x60>
			count++;
     4f4:	0f 5f       	subi	r16, 0xFF	; 255
     4f6:	1f 4f       	sbci	r17, 0xFF	; 255
			printf("%d is a prime number !!! \n", n);
     4f8:	00 d0       	rcall	.+0      	; 0x4fa <app_prime+0x46>
     4fa:	0f 92       	push	r0
     4fc:	ed b7       	in	r30, 0x3d	; 61
     4fe:	fe b7       	in	r31, 0x3e	; 62
     500:	d2 82       	std	Z+2, r13	; 0x02
     502:	c1 82       	std	Z+1, r12	; 0x01
     504:	d4 83       	std	Z+4, r29	; 0x04
     506:	c3 83       	std	Z+3, r28	; 0x03
     508:	0e 94 17 0e 	call	0x1c2e	; 0x1c2e <printf>
     50c:	0f 90       	pop	r0
     50e:	0f 90       	pop	r0
     510:	0f 90       	pop	r0
     512:	0f 90       	pop	r0
}

void app_prime(char *ap) {
	int t = 300, n, count = 0;
	if(ap) t = atoi(ap);
	for(n = 2;n <= t;n++) {
     514:	21 96       	adiw	r28, 0x01	; 1
     516:	ec 16       	cp	r14, r28
     518:	fd 06       	cpc	r15, r29
     51a:	3c f7       	brge	.-50     	; 0x4ea <app_prime+0x36>
		if(is_prime(n)) {
			count++;
			printf("%d is a prime number !!! \n", n);
		}
	}
	printf("count = %d\n", count);
     51c:	00 d0       	rcall	.+0      	; 0x51e <app_prime+0x6a>
     51e:	0f 92       	push	r0
     520:	80 e4       	ldi	r24, 0x40	; 64
     522:	92 e0       	ldi	r25, 0x02	; 2
     524:	ed b7       	in	r30, 0x3d	; 61
     526:	fe b7       	in	r31, 0x3e	; 62
     528:	92 83       	std	Z+2, r25	; 0x02
     52a:	81 83       	std	Z+1, r24	; 0x01
     52c:	14 83       	std	Z+4, r17	; 0x04
     52e:	03 83       	std	Z+3, r16	; 0x03
     530:	0e 94 17 0e 	call	0x1c2e	; 0x1c2e <printf>
     534:	0f 90       	pop	r0
     536:	0f 90       	pop	r0
     538:	0f 90       	pop	r0
     53a:	0f 90       	pop	r0
}
     53c:	df 91       	pop	r29
     53e:	cf 91       	pop	r28
     540:	1f 91       	pop	r17
     542:	0f 91       	pop	r16
     544:	ff 90       	pop	r15
     546:	ef 90       	pop	r14
     548:	df 90       	pop	r13
     54a:	cf 90       	pop	r12
     54c:	08 95       	ret

0000054e <task_prime>:

void task_prime(char *ap) {
     54e:	cf 92       	push	r12
     550:	df 92       	push	r13
     552:	ef 92       	push	r14
     554:	ff 92       	push	r15
     556:	0f 93       	push	r16
     558:	1f 93       	push	r17
     55a:	cf 93       	push	r28
     55c:	df 93       	push	r29
	int n, t = 300, count = 0;
	if(ap && *ap) t = atoi(ap);
     55e:	00 97       	sbiw	r24, 0x00	; 0
     560:	41 f0       	breq	.+16     	; 0x572 <task_prime+0x24>
     562:	fc 01       	movw	r30, r24
     564:	20 81       	ld	r18, Z
     566:	22 23       	and	r18, r18
     568:	21 f0       	breq	.+8      	; 0x572 <task_prime+0x24>
     56a:	0e 94 5b 0d 	call	0x1ab6	; 0x1ab6 <atoi>
     56e:	8c 01       	movw	r16, r24
     570:	02 c0       	rjmp	.+4      	; 0x576 <task_prime+0x28>
	}
	printf("count = %d\n", count);
}

void task_prime(char *ap) {
	int n, t = 300, count = 0;
     572:	0c e2       	ldi	r16, 0x2C	; 44
     574:	11 e0       	ldi	r17, 0x01	; 1
     576:	ee 24       	eor	r14, r14
     578:	ff 24       	eor	r15, r15
	if(ap && *ap) t = atoi(ap);
	for(n = 2;n <= t;n++) {
     57a:	c2 e0       	ldi	r28, 0x02	; 2
     57c:	d0 e0       	ldi	r29, 0x00	; 0
		if(is_prime(n)) {
			count++;
			printf("%d is a prime number !!! \n", n);
     57e:	25 e2       	ldi	r18, 0x25	; 37
     580:	c2 2e       	mov	r12, r18
     582:	22 e0       	ldi	r18, 0x02	; 2
     584:	d2 2e       	mov	r13, r18
}

void task_prime(char *ap) {
	int n, t = 300, count = 0;
	if(ap && *ap) t = atoi(ap);
	for(n = 2;n <= t;n++) {
     586:	17 c0       	rjmp	.+46     	; 0x5b6 <task_prime+0x68>
		if(is_prime(n)) {
     588:	ce 01       	movw	r24, r28
     58a:	0e 94 3c 02 	call	0x478	; 0x478 <is_prime>
     58e:	00 97       	sbiw	r24, 0x00	; 0
     590:	89 f0       	breq	.+34     	; 0x5b4 <task_prime+0x66>
			count++;
     592:	08 94       	sec
     594:	e1 1c       	adc	r14, r1
     596:	f1 1c       	adc	r15, r1
			printf("%d is a prime number !!! \n", n);
     598:	00 d0       	rcall	.+0      	; 0x59a <task_prime+0x4c>
     59a:	0f 92       	push	r0
     59c:	ed b7       	in	r30, 0x3d	; 61
     59e:	fe b7       	in	r31, 0x3e	; 62
     5a0:	d2 82       	std	Z+2, r13	; 0x02
     5a2:	c1 82       	std	Z+1, r12	; 0x01
     5a4:	d4 83       	std	Z+4, r29	; 0x04
     5a6:	c3 83       	std	Z+3, r28	; 0x03
     5a8:	0e 94 17 0e 	call	0x1c2e	; 0x1c2e <printf>
     5ac:	0f 90       	pop	r0
     5ae:	0f 90       	pop	r0
     5b0:	0f 90       	pop	r0
     5b2:	0f 90       	pop	r0
}

void task_prime(char *ap) {
	int n, t = 300, count = 0;
	if(ap && *ap) t = atoi(ap);
	for(n = 2;n <= t;n++) {
     5b4:	21 96       	adiw	r28, 0x01	; 1
     5b6:	0c 17       	cp	r16, r28
     5b8:	1d 07       	cpc	r17, r29
     5ba:	34 f7       	brge	.-52     	; 0x588 <task_prime+0x3a>
		if(is_prime(n)) {
			count++;
			printf("%d is a prime number !!! \n", n);
		}
	}
	printf("count = %d\n", count);
     5bc:	00 d0       	rcall	.+0      	; 0x5be <task_prime+0x70>
     5be:	0f 92       	push	r0
     5c0:	80 e4       	ldi	r24, 0x40	; 64
     5c2:	92 e0       	ldi	r25, 0x02	; 2
     5c4:	ed b7       	in	r30, 0x3d	; 61
     5c6:	fe b7       	in	r31, 0x3e	; 62
     5c8:	92 83       	std	Z+2, r25	; 0x02
     5ca:	81 83       	std	Z+1, r24	; 0x01
     5cc:	f4 82       	std	Z+4, r15	; 0x04
     5ce:	e3 82       	std	Z+3, r14	; 0x03
     5d0:	0e 94 17 0e 	call	0x1c2e	; 0x1c2e <printf>
     5d4:	0f 90       	pop	r0
     5d6:	0f 90       	pop	r0
     5d8:	0f 90       	pop	r0
     5da:	0f 90       	pop	r0
}
     5dc:	df 91       	pop	r29
     5de:	cf 91       	pop	r28
     5e0:	1f 91       	pop	r17
     5e2:	0f 91       	pop	r16
     5e4:	ff 90       	pop	r15
     5e6:	ef 90       	pop	r14
     5e8:	df 90       	pop	r13
     5ea:	cf 90       	pop	r12
     5ec:	08 95       	ret

000005ee <led_init>:

static uint8_t Leds;

void led_init() {
	DDRL = PORTL = 0xff;
     5ee:	8f ef       	ldi	r24, 0xFF	; 255
     5f0:	80 93 0b 01 	sts	0x010B, r24
     5f4:	80 93 0a 01 	sts	0x010A, r24
}
     5f8:	08 95       	ret

000005fa <task_led_on>:

void task_led_on() {
	Leds = PORTL = 0x00;
     5fa:	10 92 0b 01 	sts	0x010B, r1
     5fe:	10 92 12 04 	sts	0x0412, r1
	
}
     602:	08 95       	ret

00000604 <task_led_off>:

void task_led_off() {
	Leds = PORTL = 0xff;
     604:	8f ef       	ldi	r24, 0xFF	; 255
     606:	80 93 0b 01 	sts	0x010B, r24
     60a:	80 93 12 04 	sts	0x0412, r24
}
     60e:	08 95       	ret

00000610 <q_init>:

char 	qi[QI_SIZE], qo[QO_SIZE];
int 	fi, ri, fo, ro;

void q_init() {
	fi = ri = fo = ro = 0;
     610:	10 92 60 04 	sts	0x0460, r1
     614:	10 92 5f 04 	sts	0x045F, r1
     618:	10 92 5e 04 	sts	0x045E, r1
     61c:	10 92 5d 04 	sts	0x045D, r1
     620:	10 92 62 04 	sts	0x0462, r1
     624:	10 92 61 04 	sts	0x0461, r1
     628:	10 92 1c 04 	sts	0x041C, r1
     62c:	10 92 1b 04 	sts	0x041B, r1
}
     630:	08 95       	ret

00000632 <qi_insert>:


int qi_insert(char ch) {
     632:	48 2f       	mov	r20, r24
	if((ri + 1) % QI_SIZE == fi)
     634:	20 91 61 04 	lds	r18, 0x0461
     638:	30 91 62 04 	lds	r19, 0x0462
     63c:	2f 5f       	subi	r18, 0xFF	; 255
     63e:	3f 4f       	sbci	r19, 0xFF	; 255
     640:	c9 01       	movw	r24, r18
     642:	60 e4       	ldi	r22, 0x40	; 64
     644:	70 e0       	ldi	r23, 0x00	; 0
     646:	0e 94 ce 0b 	call	0x179c	; 0x179c <__divmodhi4>
     64a:	9c 01       	movw	r18, r24
     64c:	80 91 1b 04 	lds	r24, 0x041B
     650:	90 91 1c 04 	lds	r25, 0x041C
     654:	28 17       	cp	r18, r24
     656:	39 07       	cpc	r19, r25
     658:	59 f0       	breq	.+22     	; 0x670 <qi_insert+0x3e>
		return(0);
	ri = (ri + 1) % QI_SIZE;
     65a:	30 93 62 04 	sts	0x0462, r19
     65e:	20 93 61 04 	sts	0x0461, r18
	qi[ri] = ch;
     662:	2d 59       	subi	r18, 0x9D	; 157
     664:	3b 4f       	sbci	r19, 0xFB	; 251
     666:	f9 01       	movw	r30, r18
     668:	40 83       	st	Z, r20
	return(1);
     66a:	81 e0       	ldi	r24, 0x01	; 1
     66c:	90 e0       	ldi	r25, 0x00	; 0
     66e:	08 95       	ret
}


int qi_insert(char ch) {
	if((ri + 1) % QI_SIZE == fi)
		return(0);
     670:	80 e0       	ldi	r24, 0x00	; 0
     672:	90 e0       	ldi	r25, 0x00	; 0
	ri = (ri + 1) % QI_SIZE;
	qi[ri] = ch;
	return(1);
}
     674:	08 95       	ret

00000676 <qi_delete>:

int qi_delete() {
	if(ri == fi)
     676:	80 91 1b 04 	lds	r24, 0x041B
     67a:	90 91 1c 04 	lds	r25, 0x041C
     67e:	20 91 61 04 	lds	r18, 0x0461
     682:	30 91 62 04 	lds	r19, 0x0462
     686:	28 17       	cp	r18, r24
     688:	39 07       	cpc	r19, r25
     68a:	79 f0       	breq	.+30     	; 0x6aa <qi_delete+0x34>
		return(0);
	fi = (fi + 1) % QI_SIZE;
     68c:	01 96       	adiw	r24, 0x01	; 1
     68e:	60 e4       	ldi	r22, 0x40	; 64
     690:	70 e0       	ldi	r23, 0x00	; 0
     692:	0e 94 ce 0b 	call	0x179c	; 0x179c <__divmodhi4>
     696:	90 93 1c 04 	sts	0x041C, r25
     69a:	80 93 1b 04 	sts	0x041B, r24
	return(qi[fi]);
     69e:	8d 59       	subi	r24, 0x9D	; 157
     6a0:	9b 4f       	sbci	r25, 0xFB	; 251
     6a2:	fc 01       	movw	r30, r24
     6a4:	80 81       	ld	r24, Z
     6a6:	90 e0       	ldi	r25, 0x00	; 0
     6a8:	08 95       	ret
	return(1);
}

int qi_delete() {
	if(ri == fi)
		return(0);
     6aa:	80 e0       	ldi	r24, 0x00	; 0
     6ac:	90 e0       	ldi	r25, 0x00	; 0
	fi = (fi + 1) % QI_SIZE;
	return(qi[fi]);
}
     6ae:	08 95       	ret

000006b0 <qo_insert>:

int qo_insert(char ch) {
     6b0:	48 2f       	mov	r20, r24
	if((ro + 1) % QO_SIZE == fo)
     6b2:	20 91 5f 04 	lds	r18, 0x045F
     6b6:	30 91 60 04 	lds	r19, 0x0460
     6ba:	2f 5f       	subi	r18, 0xFF	; 255
     6bc:	3f 4f       	sbci	r19, 0xFF	; 255
     6be:	c9 01       	movw	r24, r18
     6c0:	60 e4       	ldi	r22, 0x40	; 64
     6c2:	70 e0       	ldi	r23, 0x00	; 0
     6c4:	0e 94 ce 0b 	call	0x179c	; 0x179c <__divmodhi4>
     6c8:	9c 01       	movw	r18, r24
     6ca:	80 91 5d 04 	lds	r24, 0x045D
     6ce:	90 91 5e 04 	lds	r25, 0x045E
     6d2:	28 17       	cp	r18, r24
     6d4:	39 07       	cpc	r19, r25
     6d6:	59 f0       	breq	.+22     	; 0x6ee <qo_insert+0x3e>
		return(0);
	ro = (ro + 1) % QO_SIZE;
     6d8:	30 93 60 04 	sts	0x0460, r19
     6dc:	20 93 5f 04 	sts	0x045F, r18
	qo[ro] = ch;
     6e0:	23 5e       	subi	r18, 0xE3	; 227
     6e2:	3b 4f       	sbci	r19, 0xFB	; 251
     6e4:	f9 01       	movw	r30, r18
     6e6:	40 83       	st	Z, r20
	return(1);
     6e8:	81 e0       	ldi	r24, 0x01	; 1
     6ea:	90 e0       	ldi	r25, 0x00	; 0
     6ec:	08 95       	ret
	return(qi[fi]);
}

int qo_insert(char ch) {
	if((ro + 1) % QO_SIZE == fo)
		return(0);
     6ee:	80 e0       	ldi	r24, 0x00	; 0
     6f0:	90 e0       	ldi	r25, 0x00	; 0
	ro = (ro + 1) % QO_SIZE;
	qo[ro] = ch;
	return(1);
}
     6f2:	08 95       	ret

000006f4 <qo_delete>:

int qo_delete() {
	if(ro == fo)
     6f4:	80 91 5d 04 	lds	r24, 0x045D
     6f8:	90 91 5e 04 	lds	r25, 0x045E
     6fc:	20 91 5f 04 	lds	r18, 0x045F
     700:	30 91 60 04 	lds	r19, 0x0460
     704:	28 17       	cp	r18, r24
     706:	39 07       	cpc	r19, r25
     708:	79 f0       	breq	.+30     	; 0x728 <qo_delete+0x34>
		return(0);
	fo = (fo + 1) % QO_SIZE;
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	60 e4       	ldi	r22, 0x40	; 64
     70e:	70 e0       	ldi	r23, 0x00	; 0
     710:	0e 94 ce 0b 	call	0x179c	; 0x179c <__divmodhi4>
     714:	90 93 5e 04 	sts	0x045E, r25
     718:	80 93 5d 04 	sts	0x045D, r24
	return(qo[fo]);
     71c:	83 5e       	subi	r24, 0xE3	; 227
     71e:	9b 4f       	sbci	r25, 0xFB	; 251
     720:	fc 01       	movw	r30, r24
     722:	80 81       	ld	r24, Z
     724:	90 e0       	ldi	r25, 0x00	; 0
     726:	08 95       	ret
	return(1);
}

int qo_delete() {
	if(ro == fo)
		return(0);
     728:	80 e0       	ldi	r24, 0x00	; 0
     72a:	90 e0       	ldi	r25, 0x00	; 0
	fo = (fo + 1) % QO_SIZE;
	return(qo[fo]);
}
     72c:	08 95       	ret

0000072e <qi_peek>:

int qi_peek() {
	if(fi == ri)
     72e:	80 91 1b 04 	lds	r24, 0x041B
     732:	90 91 1c 04 	lds	r25, 0x041C
     736:	20 91 61 04 	lds	r18, 0x0461
     73a:	30 91 62 04 	lds	r19, 0x0462
     73e:	82 17       	cp	r24, r18
     740:	93 07       	cpc	r25, r19
     742:	59 f0       	breq	.+22     	; 0x75a <qi_peek+0x2c>
		return 0;
	else
		return(qi[(fi + 1) % QI_SIZE]);
     744:	01 96       	adiw	r24, 0x01	; 1
     746:	60 e4       	ldi	r22, 0x40	; 64
     748:	70 e0       	ldi	r23, 0x00	; 0
     74a:	0e 94 ce 0b 	call	0x179c	; 0x179c <__divmodhi4>
     74e:	8d 59       	subi	r24, 0x9D	; 157
     750:	9b 4f       	sbci	r25, 0xFB	; 251
     752:	fc 01       	movw	r30, r24
     754:	80 81       	ld	r24, Z
     756:	90 e0       	ldi	r25, 0x00	; 0
     758:	08 95       	ret
	return(qo[fo]);
}

int qi_peek() {
	if(fi == ri)
		return 0;
     75a:	80 e0       	ldi	r24, 0x00	; 0
     75c:	90 e0       	ldi	r25, 0x00	; 0
	else
		return(qi[(fi + 1) % QI_SIZE]);
}
     75e:	08 95       	ret

00000760 <task_tc1047>:

void task_tc1047(char *arg) {
	static int	value;
	static int	volatile in_adc = 0;

	if(!strcmp(arg, "")) {
     760:	fc 01       	movw	r30, r24
     762:	20 81       	ld	r18, Z
     764:	22 23       	and	r18, r18
     766:	19 f5       	brne	.+70     	; 0x7ae <task_tc1047+0x4e>
		adc_start(); in_adc = 1; while(in_adc);
     768:	0e 94 cc 07 	call	0xf98	; 0xf98 <adc_start>
     76c:	81 e0       	ldi	r24, 0x01	; 1
     76e:	90 e0       	ldi	r25, 0x00	; 0
     770:	90 93 16 04 	sts	0x0416, r25
     774:	80 93 15 04 	sts	0x0415, r24
     778:	80 91 15 04 	lds	r24, 0x0415
     77c:	90 91 16 04 	lds	r25, 0x0416
     780:	00 97       	sbiw	r24, 0x00	; 0
     782:	d1 f7       	brne	.-12     	; 0x778 <task_tc1047+0x18>
		printf("Current temperature is %d degree.\n", value);
     784:	00 d0       	rcall	.+0      	; 0x786 <task_tc1047+0x26>
     786:	0f 92       	push	r0
     788:	8c e4       	ldi	r24, 0x4C	; 76
     78a:	92 e0       	ldi	r25, 0x02	; 2
     78c:	ed b7       	in	r30, 0x3d	; 61
     78e:	fe b7       	in	r31, 0x3e	; 62
     790:	92 83       	std	Z+2, r25	; 0x02
     792:	81 83       	std	Z+1, r24	; 0x01
     794:	80 91 17 04 	lds	r24, 0x0417
     798:	90 91 18 04 	lds	r25, 0x0418
     79c:	94 83       	std	Z+4, r25	; 0x04
     79e:	83 83       	std	Z+3, r24	; 0x03
     7a0:	0e 94 17 0e 	call	0x1c2e	; 0x1c2e <printf>
     7a4:	0f 90       	pop	r0
     7a6:	0f 90       	pop	r0
     7a8:	0f 90       	pop	r0
     7aa:	0f 90       	pop	r0
     7ac:	08 95       	ret
	}
	else {
		value = atoi(arg) * (1.1/1023) * 1000;
     7ae:	0e 94 5b 0d 	call	0x1ab6	; 0x1ab6 <atoi>
     7b2:	9c 01       	movw	r18, r24
     7b4:	b9 01       	movw	r22, r18
     7b6:	88 27       	eor	r24, r24
     7b8:	77 fd       	sbrc	r23, 7
     7ba:	80 95       	com	r24
     7bc:	98 2f       	mov	r25, r24
     7be:	0e 94 3e 09 	call	0x127c	; 0x127c <__floatsisf>
     7c2:	29 e0       	ldi	r18, 0x09	; 9
     7c4:	30 ef       	ldi	r19, 0xF0	; 240
     7c6:	4c e8       	ldi	r20, 0x8C	; 140
     7c8:	5a e3       	ldi	r21, 0x3A	; 58
     7ca:	0e 94 3d 08 	call	0x107a	; 0x107a <__mulsf3>
     7ce:	20 e0       	ldi	r18, 0x00	; 0
     7d0:	30 e0       	ldi	r19, 0x00	; 0
     7d2:	4a e7       	ldi	r20, 0x7A	; 122
     7d4:	54 e4       	ldi	r21, 0x44	; 68
     7d6:	0e 94 3d 08 	call	0x107a	; 0x107a <__mulsf3>
     7da:	0e 94 b5 09 	call	0x136a	; 0x136a <__fixsfsi>
     7de:	dc 01       	movw	r26, r24
     7e0:	cb 01       	movw	r24, r22
		value = (value - 500) / 10;
     7e2:	84 5f       	subi	r24, 0xF4	; 244
     7e4:	91 40       	sbci	r25, 0x01	; 1
     7e6:	6a e0       	ldi	r22, 0x0A	; 10
     7e8:	70 e0       	ldi	r23, 0x00	; 0
     7ea:	0e 94 ce 0b 	call	0x179c	; 0x179c <__divmodhi4>
     7ee:	70 93 18 04 	sts	0x0418, r23
     7f2:	60 93 17 04 	sts	0x0417, r22
		in_adc = 0;
     7f6:	10 92 16 04 	sts	0x0416, r1
     7fa:	10 92 15 04 	sts	0x0415, r1
     7fe:	08 95       	ret

00000800 <get_timer>:
#include "ADC.h"

struct timer *get_timer() {
	struct timer *tp;

	tp = (struct timer *)malloc(sizeof(*tp));
     800:	8e e0       	ldi	r24, 0x0E	; 14
     802:	90 e0       	ldi	r25, 0x00	; 0
     804:	0e 94 2c 0c 	call	0x1858	; 0x1858 <malloc>
	return(tp);
}
     808:	08 95       	ret

0000080a <insert_timer>:

struct timer *Thead = NULL;
void insert_timer(struct task *tskp, int ms) {
     80a:	ef 92       	push	r14
     80c:	ff 92       	push	r15
     80e:	0f 93       	push	r16
     810:	1f 93       	push	r17
     812:	cf 93       	push	r28
     814:	df 93       	push	r29
     816:	f8 2e       	mov	r15, r24
     818:	e9 2e       	mov	r14, r25
     81a:	8b 01       	movw	r16, r22
	int 			total;
	struct timer 	*tp, *cp, *pp;

	tp = get_timer();
     81c:	0e 94 00 04 	call	0x800	; 0x800 <get_timer>
     820:	ec 01       	movw	r28, r24
	tp->task = *tskp;
     822:	dc 01       	movw	r26, r24
     824:	12 96       	adiw	r26, 0x02	; 2
     826:	ef 2d       	mov	r30, r15
     828:	fe 2d       	mov	r31, r14
     82a:	8a e0       	ldi	r24, 0x0A	; 10
     82c:	01 90       	ld	r0, Z+
     82e:	0d 92       	st	X+, r0
     830:	81 50       	subi	r24, 0x01	; 1
     832:	e1 f7       	brne	.-8      	; 0x82c <insert_timer+0x22>
	tp->time = ms;
     834:	19 83       	std	Y+1, r17	; 0x01
     836:	08 83       	st	Y, r16

	if(Thead == NULL) {
     838:	e0 91 13 04 	lds	r30, 0x0413
     83c:	f0 91 14 04 	lds	r31, 0x0414
     840:	30 97       	sbiw	r30, 0x00	; 0
     842:	29 f4       	brne	.+10     	; 0x84e <insert_timer+0x44>
		Thead = tp, tp->link = NULL;
     844:	d0 93 14 04 	sts	0x0414, r29
     848:	c0 93 13 04 	sts	0x0413, r28
     84c:	2f c0       	rjmp	.+94     	; 0x8ac <insert_timer+0xa2>

	tp = get_timer();
	tp->task = *tskp;
	tp->time = ms;

	if(Thead == NULL) {
     84e:	40 e0       	ldi	r20, 0x00	; 0
     850:	50 e0       	ldi	r21, 0x00	; 0
     852:	20 e0       	ldi	r18, 0x00	; 0
     854:	30 e0       	ldi	r19, 0x00	; 0
     856:	01 c0       	rjmp	.+2      	; 0x85a <insert_timer+0x50>
		return;
	}

	pp = NULL, total = 0;

	for(cp = Thead;cp;cp = cp->link) {
     858:	fd 01       	movw	r30, r26
		total += cp->time;
     85a:	80 81       	ld	r24, Z
     85c:	91 81       	ldd	r25, Z+1	; 0x01
     85e:	28 0f       	add	r18, r24
     860:	39 1f       	adc	r19, r25
		if(total >= ms)
     862:	20 17       	cp	r18, r16
     864:	31 07       	cpc	r19, r17
     866:	34 f4       	brge	.+12     	; 0x874 <insert_timer+0x6a>
		return;
	}

	pp = NULL, total = 0;

	for(cp = Thead;cp;cp = cp->link) {
     868:	a4 85       	ldd	r26, Z+12	; 0x0c
     86a:	b5 85       	ldd	r27, Z+13	; 0x0d
     86c:	af 01       	movw	r20, r30
     86e:	10 97       	sbiw	r26, 0x00	; 0
     870:	99 f7       	brne	.-26     	; 0x858 <insert_timer+0x4e>
     872:	01 c0       	rjmp	.+2      	; 0x876 <insert_timer+0x6c>
		total += cp->time;
		if(total >= ms)
     874:	df 01       	movw	r26, r30
			break;
		pp = cp;
	}

	if(pp == NULL) {
     876:	41 15       	cp	r20, r1
     878:	51 05       	cpc	r21, r1
     87a:	79 f4       	brne	.+30     	; 0x89a <insert_timer+0x90>
		cp->time -= tp->time;
     87c:	8d 91       	ld	r24, X+
     87e:	9c 91       	ld	r25, X
     880:	11 97       	sbiw	r26, 0x01	; 1
     882:	80 1b       	sub	r24, r16
     884:	91 0b       	sbc	r25, r17
     886:	11 96       	adiw	r26, 0x01	; 1
     888:	9c 93       	st	X, r25
     88a:	8e 93       	st	-X, r24
		tp->link = cp, Thead = tp;
     88c:	bd 87       	std	Y+13, r27	; 0x0d
     88e:	ac 87       	std	Y+12, r26	; 0x0c
     890:	d0 93 14 04 	sts	0x0414, r29
     894:	c0 93 13 04 	sts	0x0413, r28
     898:	24 c0       	rjmp	.+72     	; 0x8e2 <insert_timer+0xd8>
	}
	else if(cp == NULL) {
     89a:	10 97       	sbiw	r26, 0x00	; 0
     89c:	51 f4       	brne	.+20     	; 0x8b2 <insert_timer+0xa8>
		tp->time -= total;
     89e:	02 1b       	sub	r16, r18
     8a0:	13 0b       	sbc	r17, r19
     8a2:	19 83       	std	Y+1, r17	; 0x01
     8a4:	08 83       	st	Y, r16
		pp->link = tp;
     8a6:	fa 01       	movw	r30, r20
     8a8:	d5 87       	std	Z+13, r29	; 0x0d
     8aa:	c4 87       	std	Z+12, r28	; 0x0c
		tp->link = NULL;
     8ac:	1d 86       	std	Y+13, r1	; 0x0d
     8ae:	1c 86       	std	Y+12, r1	; 0x0c
     8b0:	18 c0       	rjmp	.+48     	; 0x8e2 <insert_timer+0xd8>
	}
	else {
		total -= cp->time;
     8b2:	8d 91       	ld	r24, X+
     8b4:	9c 91       	ld	r25, X
     8b6:	11 97       	sbiw	r26, 0x01	; 1
     8b8:	b9 01       	movw	r22, r18
     8ba:	68 1b       	sub	r22, r24
     8bc:	79 0b       	sbc	r23, r25
		tp->time -= total;
     8be:	98 01       	movw	r18, r16
     8c0:	26 1b       	sub	r18, r22
     8c2:	37 0b       	sbc	r19, r23
     8c4:	39 83       	std	Y+1, r19	; 0x01
     8c6:	28 83       	st	Y, r18
		cp->time -= tp->time;
     8c8:	8d 91       	ld	r24, X+
     8ca:	9c 91       	ld	r25, X
     8cc:	11 97       	sbiw	r26, 0x01	; 1
     8ce:	82 1b       	sub	r24, r18
     8d0:	93 0b       	sbc	r25, r19
     8d2:	11 96       	adiw	r26, 0x01	; 1
     8d4:	9c 93       	st	X, r25
     8d6:	8e 93       	st	-X, r24
		pp->link = tp;
     8d8:	fa 01       	movw	r30, r20
     8da:	d5 87       	std	Z+13, r29	; 0x0d
     8dc:	c4 87       	std	Z+12, r28	; 0x0c
		tp->link = cp;
     8de:	bd 87       	std	Y+13, r27	; 0x0d
     8e0:	ac 87       	std	Y+12, r26	; 0x0c
	}
}
     8e2:	df 91       	pop	r29
     8e4:	cf 91       	pop	r28
     8e6:	1f 91       	pop	r17
     8e8:	0f 91       	pop	r16
     8ea:	ff 90       	pop	r15
     8ec:	ef 90       	pop	r14
     8ee:	08 95       	ret

000008f0 <tour_timer>:

void tour_timer() {
     8f0:	ef 92       	push	r14
     8f2:	ff 92       	push	r15
     8f4:	0f 93       	push	r16
     8f6:	1f 93       	push	r17
     8f8:	cf 93       	push	r28
     8fa:	df 93       	push	r29
	struct timer *cp;
	int total = 0;

	printf("\n");
     8fc:	8a e0       	ldi	r24, 0x0A	; 10
     8fe:	90 e0       	ldi	r25, 0x00	; 0
     900:	0e 94 29 0e 	call	0x1c52	; 0x1c52 <putchar>
	for(cp = Thead;cp != NULL;cp = cp->link) {
     904:	c0 91 13 04 	lds	r28, 0x0413
     908:	d0 91 14 04 	lds	r29, 0x0414
	}
}

void tour_timer() {
	struct timer *cp;
	int total = 0;
     90c:	00 e0       	ldi	r16, 0x00	; 0
     90e:	10 e0       	ldi	r17, 0x00	; 0

	printf("\n");
	for(cp = Thead;cp != NULL;cp = cp->link) {
		total += cp->time;
		printf("-->%d(%d) ", cp->time, total);
     910:	8f e6       	ldi	r24, 0x6F	; 111
     912:	e8 2e       	mov	r14, r24
     914:	82 e0       	ldi	r24, 0x02	; 2
     916:	f8 2e       	mov	r15, r24
void tour_timer() {
	struct timer *cp;
	int total = 0;

	printf("\n");
	for(cp = Thead;cp != NULL;cp = cp->link) {
     918:	20 c0       	rjmp	.+64     	; 0x95a <tour_timer+0x6a>
		total += cp->time;
     91a:	88 81       	ld	r24, Y
     91c:	99 81       	ldd	r25, Y+1	; 0x01
     91e:	08 0f       	add	r16, r24
     920:	19 1f       	adc	r17, r25
		printf("-->%d(%d) ", cp->time, total);
     922:	00 d0       	rcall	.+0      	; 0x924 <tour_timer+0x34>
     924:	00 d0       	rcall	.+0      	; 0x926 <tour_timer+0x36>
     926:	ed b7       	in	r30, 0x3d	; 61
     928:	fe b7       	in	r31, 0x3e	; 62
     92a:	31 96       	adiw	r30, 0x01	; 1
     92c:	ad b7       	in	r26, 0x3d	; 61
     92e:	be b7       	in	r27, 0x3e	; 62
     930:	12 96       	adiw	r26, 0x02	; 2
     932:	fc 92       	st	X, r15
     934:	ee 92       	st	-X, r14
     936:	11 97       	sbiw	r26, 0x01	; 1
     938:	93 83       	std	Z+3, r25	; 0x03
     93a:	82 83       	std	Z+2, r24	; 0x02
     93c:	15 83       	std	Z+5, r17	; 0x05
     93e:	04 83       	std	Z+4, r16	; 0x04
     940:	0e 94 17 0e 	call	0x1c2e	; 0x1c2e <printf>
void tour_timer() {
	struct timer *cp;
	int total = 0;

	printf("\n");
	for(cp = Thead;cp != NULL;cp = cp->link) {
     944:	0c 84       	ldd	r0, Y+12	; 0x0c
     946:	dd 85       	ldd	r29, Y+13	; 0x0d
     948:	c0 2d       	mov	r28, r0
     94a:	8d b7       	in	r24, 0x3d	; 61
     94c:	9e b7       	in	r25, 0x3e	; 62
     94e:	06 96       	adiw	r24, 0x06	; 6
     950:	0f b6       	in	r0, 0x3f	; 63
     952:	f8 94       	cli
     954:	9e bf       	out	0x3e, r25	; 62
     956:	0f be       	out	0x3f, r0	; 63
     958:	8d bf       	out	0x3d, r24	; 61
     95a:	20 97       	sbiw	r28, 0x00	; 0
     95c:	f1 f6       	brne	.-68     	; 0x91a <tour_timer+0x2a>
		total += cp->time;
		printf("-->%d(%d) ", cp->time, total);
	}
	printf("\n");
     95e:	8a e0       	ldi	r24, 0x0A	; 10
     960:	90 e0       	ldi	r25, 0x00	; 0
     962:	0e 94 29 0e 	call	0x1c52	; 0x1c52 <putchar>
}
     966:	df 91       	pop	r29
     968:	cf 91       	pop	r28
     96a:	1f 91       	pop	r17
     96c:	0f 91       	pop	r16
     96e:	ff 90       	pop	r15
     970:	ef 90       	pop	r14
     972:	08 95       	ret

00000974 <free_timer>:

void free_timer() {
	struct timer *cp;

	for( ;Thead != NULL; ) {
     974:	09 c0       	rjmp	.+18     	; 0x988 <free_timer+0x14>
		cp = Thead;
		Thead = cp->link;
     976:	fc 01       	movw	r30, r24
     978:	24 85       	ldd	r18, Z+12	; 0x0c
     97a:	35 85       	ldd	r19, Z+13	; 0x0d
     97c:	30 93 14 04 	sts	0x0414, r19
     980:	20 93 13 04 	sts	0x0413, r18
		free(cp);
     984:	0e 94 c2 0c 	call	0x1984	; 0x1984 <free>
}

void free_timer() {
	struct timer *cp;

	for( ;Thead != NULL; ) {
     988:	80 91 13 04 	lds	r24, 0x0413
     98c:	90 91 14 04 	lds	r25, 0x0414
     990:	00 97       	sbiw	r24, 0x00	; 0
     992:	89 f7       	brne	.-30     	; 0x976 <free_timer+0x2>
		cp = Thead;
		Thead = cp->link;
		free(cp);
	}
}
     994:	08 95       	ret

00000996 <timer_init>:

void timer_init() {
	TCNT2 = 0;
     996:	10 92 b2 00 	sts	0x00B2, r1
	sbi(ASSR, AS2);
     99a:	e6 eb       	ldi	r30, 0xB6	; 182
     99c:	f0 e0       	ldi	r31, 0x00	; 0
     99e:	80 81       	ld	r24, Z
     9a0:	80 62       	ori	r24, 0x20	; 32
     9a2:	80 83       	st	Z, r24
	sbi(TIMSK2, TOIE2);
     9a4:	e0 e7       	ldi	r30, 0x70	; 112
     9a6:	f0 e0       	ldi	r31, 0x00	; 0
     9a8:	80 81       	ld	r24, Z
     9aa:	81 60       	ori	r24, 0x01	; 1
     9ac:	80 83       	st	Z, r24
	sbi(TCCR2B, CS20);	sbi(TCCR2B, CS21);
     9ae:	e1 eb       	ldi	r30, 0xB1	; 177
     9b0:	f0 e0       	ldi	r31, 0x00	; 0
     9b2:	80 81       	ld	r24, Z
     9b4:	81 60       	ori	r24, 0x01	; 1
     9b6:	80 83       	st	Z, r24
     9b8:	80 81       	ld	r24, Z
     9ba:	82 60       	ori	r24, 0x02	; 2
     9bc:	80 83       	st	Z, r24
}
     9be:	08 95       	ret

000009c0 <task_init>:

struct task Task_q[MAX_TASK];
volatile int Task_f, Task_r;

void task_init() {
	Task_f = Task_r = 0;
     9c0:	10 92 a4 04 	sts	0x04A4, r1
     9c4:	10 92 a3 04 	sts	0x04A3, r1
     9c8:	10 92 46 05 	sts	0x0546, r1
     9cc:	10 92 45 05 	sts	0x0545, r1
}
     9d0:	08 95       	ret

000009d2 <task_insert>:

int task_insert(struct task *tskp) {
     9d2:	cf 93       	push	r28
     9d4:	df 93       	push	r29
     9d6:	48 2f       	mov	r20, r24
     9d8:	e9 2f       	mov	r30, r25
	if((Task_r + 1) % MAX_TASK == Task_f)
     9da:	80 91 a3 04 	lds	r24, 0x04A3
     9de:	90 91 a4 04 	lds	r25, 0x04A4
     9e2:	c0 91 45 05 	lds	r28, 0x0545
     9e6:	d0 91 46 05 	lds	r29, 0x0546
     9ea:	01 96       	adiw	r24, 0x01	; 1
     9ec:	20 e1       	ldi	r18, 0x10	; 16
     9ee:	30 e0       	ldi	r19, 0x00	; 0
     9f0:	b9 01       	movw	r22, r18
     9f2:	0e 94 ce 0b 	call	0x179c	; 0x179c <__divmodhi4>
     9f6:	8c 17       	cp	r24, r28
     9f8:	9d 07       	cpc	r25, r29
     9fa:	31 f1       	breq	.+76     	; 0xa48 <task_insert+0x76>
		return(0);
	Task_r = (Task_r + 1) % MAX_TASK;
     9fc:	80 91 a3 04 	lds	r24, 0x04A3
     a00:	90 91 a4 04 	lds	r25, 0x04A4
     a04:	01 96       	adiw	r24, 0x01	; 1
     a06:	b9 01       	movw	r22, r18
     a08:	0e 94 ce 0b 	call	0x179c	; 0x179c <__divmodhi4>
     a0c:	90 93 a4 04 	sts	0x04A4, r25
     a10:	80 93 a3 04 	sts	0x04A3, r24
	Task_q[Task_r] = *tskp;
     a14:	80 91 a3 04 	lds	r24, 0x04A3
     a18:	90 91 a4 04 	lds	r25, 0x04A4
     a1c:	dc 01       	movw	r26, r24
     a1e:	aa 0f       	add	r26, r26
     a20:	bb 1f       	adc	r27, r27
     a22:	63 e0       	ldi	r22, 0x03	; 3
     a24:	88 0f       	add	r24, r24
     a26:	99 1f       	adc	r25, r25
     a28:	6a 95       	dec	r22
     a2a:	e1 f7       	brne	.-8      	; 0xa24 <task_insert+0x52>
     a2c:	a8 0f       	add	r26, r24
     a2e:	b9 1f       	adc	r27, r25
     a30:	ab 55       	subi	r26, 0x5B	; 91
     a32:	bb 4f       	sbci	r27, 0xFB	; 251
     a34:	c4 2f       	mov	r28, r20
     a36:	de 2f       	mov	r29, r30
     a38:	8a e0       	ldi	r24, 0x0A	; 10
     a3a:	09 90       	ld	r0, Y+
     a3c:	0d 92       	st	X+, r0
     a3e:	81 50       	subi	r24, 0x01	; 1
     a40:	e1 f7       	brne	.-8      	; 0xa3a <task_insert+0x68>
	return(1);
     a42:	81 e0       	ldi	r24, 0x01	; 1
     a44:	90 e0       	ldi	r25, 0x00	; 0
     a46:	02 c0       	rjmp	.+4      	; 0xa4c <task_insert+0x7a>
	Task_f = Task_r = 0;
}

int task_insert(struct task *tskp) {
	if((Task_r + 1) % MAX_TASK == Task_f)
		return(0);
     a48:	80 e0       	ldi	r24, 0x00	; 0
     a4a:	90 e0       	ldi	r25, 0x00	; 0
	Task_r = (Task_r + 1) % MAX_TASK;
	Task_q[Task_r] = *tskp;
	return(1);
}
     a4c:	df 91       	pop	r29
     a4e:	cf 91       	pop	r28
     a50:	08 95       	ret

00000a52 <timer_expire>:
	sbi(ASSR, AS2);
	sbi(TIMSK2, TOIE2);
	sbi(TCCR2B, CS20);	sbi(TCCR2B, CS21);
}

void timer_expire(void) {
     a52:	cf 93       	push	r28
     a54:	df 93       	push	r29
	struct timer *tp;

	for( ;Thead != NULL && !Thead->time;) {
     a56:	0d c0       	rjmp	.+26     	; 0xa72 <timer_expire+0x20>
		tp = Thead, Thead = tp->link;
     a58:	8c 85       	ldd	r24, Y+12	; 0x0c
     a5a:	9d 85       	ldd	r25, Y+13	; 0x0d
     a5c:	90 93 14 04 	sts	0x0414, r25
     a60:	80 93 13 04 	sts	0x0413, r24
		task_insert(&tp->task);
     a64:	ce 01       	movw	r24, r28
     a66:	02 96       	adiw	r24, 0x02	; 2
     a68:	0e 94 e9 04 	call	0x9d2	; 0x9d2 <task_insert>
		free(tp);
     a6c:	ce 01       	movw	r24, r28
     a6e:	0e 94 c2 0c 	call	0x1984	; 0x1984 <free>
}

void timer_expire(void) {
	struct timer *tp;

	for( ;Thead != NULL && !Thead->time;) {
     a72:	c0 91 13 04 	lds	r28, 0x0413
     a76:	d0 91 14 04 	lds	r29, 0x0414
     a7a:	20 97       	sbiw	r28, 0x00	; 0
     a7c:	21 f0       	breq	.+8      	; 0xa86 <timer_expire+0x34>
     a7e:	88 81       	ld	r24, Y
     a80:	99 81       	ldd	r25, Y+1	; 0x01
     a82:	00 97       	sbiw	r24, 0x00	; 0
     a84:	49 f3       	breq	.-46     	; 0xa58 <timer_expire+0x6>
		tp = Thead, Thead = tp->link;
		task_insert(&tp->task);
		free(tp);
	}
}
     a86:	df 91       	pop	r29
     a88:	cf 91       	pop	r28
     a8a:	08 95       	ret

00000a8c <__vector_15>:

ISR(TIMER2_OVF_vect) {
     a8c:	1f 92       	push	r1
     a8e:	0f 92       	push	r0
     a90:	0f b6       	in	r0, 0x3f	; 63
     a92:	0f 92       	push	r0
     a94:	0b b6       	in	r0, 0x3b	; 59
     a96:	0f 92       	push	r0
     a98:	11 24       	eor	r1, r1
     a9a:	2f 93       	push	r18
     a9c:	3f 93       	push	r19
     a9e:	4f 93       	push	r20
     aa0:	5f 93       	push	r21
     aa2:	6f 93       	push	r22
     aa4:	7f 93       	push	r23
     aa6:	8f 93       	push	r24
     aa8:	9f 93       	push	r25
     aaa:	af 93       	push	r26
     aac:	bf 93       	push	r27
     aae:	ef 93       	push	r30
     ab0:	ff 93       	push	r31
	if(!Thead)
     ab2:	e0 91 13 04 	lds	r30, 0x0413
     ab6:	f0 91 14 04 	lds	r31, 0x0414
     aba:	30 97       	sbiw	r30, 0x00	; 0
     abc:	49 f0       	breq	.+18     	; 0xad0 <__vector_15+0x44>
		return;
	if(--Thead->time == 0)
     abe:	80 81       	ld	r24, Z
     ac0:	91 81       	ldd	r25, Z+1	; 0x01
     ac2:	01 97       	sbiw	r24, 0x01	; 1
     ac4:	91 83       	std	Z+1, r25	; 0x01
     ac6:	80 83       	st	Z, r24
     ac8:	00 97       	sbiw	r24, 0x00	; 0
     aca:	11 f4       	brne	.+4      	; 0xad0 <__vector_15+0x44>
		timer_expire();
     acc:	0e 94 29 05 	call	0xa52	; 0xa52 <timer_expire>
}
     ad0:	ff 91       	pop	r31
     ad2:	ef 91       	pop	r30
     ad4:	bf 91       	pop	r27
     ad6:	af 91       	pop	r26
     ad8:	9f 91       	pop	r25
     ada:	8f 91       	pop	r24
     adc:	7f 91       	pop	r23
     ade:	6f 91       	pop	r22
     ae0:	5f 91       	pop	r21
     ae2:	4f 91       	pop	r20
     ae4:	3f 91       	pop	r19
     ae6:	2f 91       	pop	r18
     ae8:	0f 90       	pop	r0
     aea:	0b be       	out	0x3b, r0	; 59
     aec:	0f 90       	pop	r0
     aee:	0f be       	out	0x3f, r0	; 63
     af0:	0f 90       	pop	r0
     af2:	1f 90       	pop	r1
     af4:	18 95       	reti

00000af6 <task_delete>:
	Task_r = (Task_r + 1) % MAX_TASK;
	Task_q[Task_r] = *tskp;
	return(1);
}

int task_delete(struct task *tskp) {
     af6:	9c 01       	movw	r18, r24
	if(Task_r == Task_f)
     af8:	40 91 a3 04 	lds	r20, 0x04A3
     afc:	50 91 a4 04 	lds	r21, 0x04A4
     b00:	80 91 45 05 	lds	r24, 0x0545
     b04:	90 91 46 05 	lds	r25, 0x0546
     b08:	48 17       	cp	r20, r24
     b0a:	59 07       	cpc	r21, r25
     b0c:	31 f1       	breq	.+76     	; 0xb5a <task_delete+0x64>
		return(0);
	Task_f = (Task_f + 1) % MAX_TASK;
     b0e:	80 91 45 05 	lds	r24, 0x0545
     b12:	90 91 46 05 	lds	r25, 0x0546
     b16:	01 96       	adiw	r24, 0x01	; 1
     b18:	60 e1       	ldi	r22, 0x10	; 16
     b1a:	70 e0       	ldi	r23, 0x00	; 0
     b1c:	0e 94 ce 0b 	call	0x179c	; 0x179c <__divmodhi4>
     b20:	90 93 46 05 	sts	0x0546, r25
     b24:	80 93 45 05 	sts	0x0545, r24
	*tskp = Task_q[Task_f];
     b28:	80 91 45 05 	lds	r24, 0x0545
     b2c:	90 91 46 05 	lds	r25, 0x0546
     b30:	fc 01       	movw	r30, r24
     b32:	ee 0f       	add	r30, r30
     b34:	ff 1f       	adc	r31, r31
     b36:	a3 e0       	ldi	r26, 0x03	; 3
     b38:	88 0f       	add	r24, r24
     b3a:	99 1f       	adc	r25, r25
     b3c:	aa 95       	dec	r26
     b3e:	e1 f7       	brne	.-8      	; 0xb38 <task_delete+0x42>
     b40:	e8 0f       	add	r30, r24
     b42:	f9 1f       	adc	r31, r25
     b44:	d9 01       	movw	r26, r18
     b46:	eb 55       	subi	r30, 0x5B	; 91
     b48:	fb 4f       	sbci	r31, 0xFB	; 251
     b4a:	8a e0       	ldi	r24, 0x0A	; 10
     b4c:	01 90       	ld	r0, Z+
     b4e:	0d 92       	st	X+, r0
     b50:	81 50       	subi	r24, 0x01	; 1
     b52:	e1 f7       	brne	.-8      	; 0xb4c <task_delete+0x56>
	return(1);
     b54:	81 e0       	ldi	r24, 0x01	; 1
     b56:	90 e0       	ldi	r25, 0x00	; 0
     b58:	08 95       	ret
	return(1);
}

int task_delete(struct task *tskp) {
	if(Task_r == Task_f)
		return(0);
     b5a:	80 e0       	ldi	r24, 0x00	; 0
     b5c:	90 e0       	ldi	r25, 0x00	; 0
	Task_f = (Task_f + 1) % MAX_TASK;
	*tskp = Task_q[Task_f];
	return(1);
}
     b5e:	08 95       	ret

00000b60 <task_cmd>:

void task_cmd(char *arg) {
     b60:	af 92       	push	r10
     b62:	bf 92       	push	r11
     b64:	cf 92       	push	r12
     b66:	df 92       	push	r13
     b68:	ef 92       	push	r14
     b6a:	ff 92       	push	r15
     b6c:	0f 93       	push	r16
     b6e:	1f 93       	push	r17
     b70:	cf 93       	push	r28
     b72:	df 93       	push	r29
     b74:	cd b7       	in	r28, 0x3d	; 61
     b76:	de b7       	in	r29, 0x3e	; 62
     b78:	ca 54       	subi	r28, 0x4A	; 74
     b7a:	d0 40       	sbci	r29, 0x00	; 0
     b7c:	0f b6       	in	r0, 0x3f	; 63
     b7e:	f8 94       	cli
     b80:	de bf       	out	0x3e, r29	; 62
     b82:	0f be       	out	0x3f, r0	; 63
     b84:	cd bf       	out	0x3d, r28	; 61
	char buf[64], *cp0, *cp1, *cp2, *cp3;
	struct task task;
	int ms;
	if(!uart_peek())	return;
     b86:	0e 94 c4 07 	call	0xf88	; 0xf88 <uart_peek>
     b8a:	00 97       	sbiw	r24, 0x00	; 0
     b8c:	09 f4       	brne	.+2      	; 0xb90 <task_cmd+0x30>
     b8e:	e6 c0       	rjmp	.+460    	; 0xd5c <task_cmd+0x1fc>
	if(gets(buf) == NULL) {
     b90:	ce 01       	movw	r24, r28
     b92:	0b 96       	adiw	r24, 0x0b	; 11
     b94:	0e 94 f1 0d 	call	0x1be2	; 0x1be2 <gets>
     b98:	00 97       	sbiw	r24, 0x00	; 0
     b9a:	29 f4       	brne	.+10     	; 0xba6 <task_cmd+0x46>
		printf("logout, good bye !!!\n");
     b9c:	8a e7       	ldi	r24, 0x7A	; 122
     b9e:	92 e0       	ldi	r25, 0x02	; 2
     ba0:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <puts>
     ba4:	ff cf       	rjmp	.-2      	; 0xba4 <task_cmd+0x44>
		while(1);
	}

	cp0 = strtok(buf, 	" \t\n\r");
     ba6:	ce 01       	movw	r24, r28
     ba8:	0b 96       	adiw	r24, 0x0b	; 11
     baa:	6f e8       	ldi	r22, 0x8F	; 143
     bac:	72 e0       	ldi	r23, 0x02	; 2
     bae:	0e 94 79 0d 	call	0x1af2	; 0x1af2 <strtok>
     bb2:	8c 01       	movw	r16, r24
	cp1 = strtok(NULL, 	" \t\n\r");
     bb4:	80 e0       	ldi	r24, 0x00	; 0
     bb6:	90 e0       	ldi	r25, 0x00	; 0
     bb8:	6f e8       	ldi	r22, 0x8F	; 143
     bba:	72 e0       	ldi	r23, 0x02	; 2
     bbc:	0e 94 79 0d 	call	0x1af2	; 0x1af2 <strtok>
     bc0:	7c 01       	movw	r14, r24
	cp2 = strtok(NULL, 	" \t\n\r");
     bc2:	80 e0       	ldi	r24, 0x00	; 0
     bc4:	90 e0       	ldi	r25, 0x00	; 0
     bc6:	6f e8       	ldi	r22, 0x8F	; 143
     bc8:	72 e0       	ldi	r23, 0x02	; 2
     bca:	0e 94 79 0d 	call	0x1af2	; 0x1af2 <strtok>
     bce:	5c 01       	movw	r10, r24
	cp3 = strtok(NULL, 	" \t\n\r");
     bd0:	80 e0       	ldi	r24, 0x00	; 0
     bd2:	90 e0       	ldi	r25, 0x00	; 0
     bd4:	6f e8       	ldi	r22, 0x8F	; 143
     bd6:	72 e0       	ldi	r23, 0x02	; 2
     bd8:	0e 94 79 0d 	call	0x1af2	; 0x1af2 <strtok>
     bdc:	6c 01       	movw	r12, r24

	if(cp0 == NULL) {
     bde:	01 15       	cp	r16, r1
     be0:	11 05       	cpc	r17, r1
     be2:	09 f4       	brne	.+2      	; 0xbe6 <task_cmd+0x86>
     be4:	af c0       	rjmp	.+350    	; 0xd44 <task_cmd+0x1e4>
		printf("$ "); return;
	}
	if(!strcmp(cp0, "prime"))
     be6:	c8 01       	movw	r24, r16
     be8:	67 e9       	ldi	r22, 0x97	; 151
     bea:	72 e0       	ldi	r23, 0x02	; 2
     bec:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <strcmp>
     bf0:	00 97       	sbiw	r24, 0x00	; 0
     bf2:	21 f4       	brne	.+8      	; 0xbfc <task_cmd+0x9c>
		task_prime(cp1);
     bf4:	c7 01       	movw	r24, r14
     bf6:	0e 94 a7 02 	call	0x54e	; 0x54e <task_prime>
     bfa:	a4 c0       	rjmp	.+328    	; 0xd44 <task_cmd+0x1e4>
	else if(!strcmp(cp0, "watch")) {
     bfc:	c8 01       	movw	r24, r16
     bfe:	6d e9       	ldi	r22, 0x9D	; 157
     c00:	72 e0       	ldi	r23, 0x02	; 2
     c02:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <strcmp>
     c06:	00 97       	sbiw	r24, 0x00	; 0
     c08:	11 f5       	brne	.+68     	; 0xc4e <task_cmd+0xee>
     c0a:	00 e0       	ldi	r16, 0x00	; 0
     c0c:	10 e0       	ldi	r17, 0x00	; 0
		int i;
		for(i = 0;i < 10;i++) {
			printf("%d ", i);
     c0e:	b3 ea       	ldi	r27, 0xA3	; 163
     c10:	eb 2e       	mov	r14, r27
     c12:	b2 e0       	ldi	r27, 0x02	; 2
     c14:	fb 2e       	mov	r15, r27
     c16:	00 d0       	rcall	.+0      	; 0xc18 <task_cmd+0xb8>
     c18:	0f 92       	push	r0
     c1a:	ed b7       	in	r30, 0x3d	; 61
     c1c:	fe b7       	in	r31, 0x3e	; 62
     c1e:	f2 82       	std	Z+2, r15	; 0x02
     c20:	e1 82       	std	Z+1, r14	; 0x01
     c22:	14 83       	std	Z+4, r17	; 0x04
     c24:	03 83       	std	Z+3, r16	; 0x03
     c26:	0e 94 17 0e 	call	0x1c2e	; 0x1c2e <printf>
			int s;
			s = 2000 / 256;
			cli();
     c2a:	f8 94       	cli
			insert_timer(&task, s);
     c2c:	0f 90       	pop	r0
     c2e:	0f 90       	pop	r0
     c30:	0f 90       	pop	r0
     c32:	0f 90       	pop	r0
     c34:	ce 01       	movw	r24, r28
     c36:	01 96       	adiw	r24, 0x01	; 1
     c38:	67 e0       	ldi	r22, 0x07	; 7
     c3a:	70 e0       	ldi	r23, 0x00	; 0
     c3c:	0e 94 05 04 	call	0x80a	; 0x80a <insert_timer>
			sei();
     c40:	78 94       	sei
	}
	if(!strcmp(cp0, "prime"))
		task_prime(cp1);
	else if(!strcmp(cp0, "watch")) {
		int i;
		for(i = 0;i < 10;i++) {
     c42:	0f 5f       	subi	r16, 0xFF	; 255
     c44:	1f 4f       	sbci	r17, 0xFF	; 255
     c46:	0a 30       	cpi	r16, 0x0A	; 10
     c48:	11 05       	cpc	r17, r1
     c4a:	29 f7       	brne	.-54     	; 0xc16 <task_cmd+0xb6>
     c4c:	7b c0       	rjmp	.+246    	; 0xd44 <task_cmd+0x1e4>
			cli();
			insert_timer(&task, s);
			sei();
		}	
	}
	else if(!strcmp(cp0,"on")) {
     c4e:	c8 01       	movw	r24, r16
     c50:	67 ea       	ldi	r22, 0xA7	; 167
     c52:	72 e0       	ldi	r23, 0x02	; 2
     c54:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <strcmp>
     c58:	00 97       	sbiw	r24, 0x00	; 0
     c5a:	19 f4       	brne	.+6      	; 0xc62 <task_cmd+0x102>
		task_led_on();
     c5c:	0e 94 fd 02 	call	0x5fa	; 0x5fa <task_led_on>
     c60:	71 c0       	rjmp	.+226    	; 0xd44 <task_cmd+0x1e4>
	} else if(!strcmp(cp0,"off"))
     c62:	c8 01       	movw	r24, r16
     c64:	6a ea       	ldi	r22, 0xAA	; 170
     c66:	72 e0       	ldi	r23, 0x02	; 2
     c68:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <strcmp>
     c6c:	00 97       	sbiw	r24, 0x00	; 0
     c6e:	19 f4       	brne	.+6      	; 0xc76 <task_cmd+0x116>
		task_led_off();
     c70:	0e 94 02 03 	call	0x604	; 0x604 <task_led_off>
     c74:	67 c0       	rjmp	.+206    	; 0xd44 <task_cmd+0x1e4>
	else if(!strcmp(cp0, "timer")) {
     c76:	c8 01       	movw	r24, r16
     c78:	6e ea       	ldi	r22, 0xAE	; 174
     c7a:	72 e0       	ldi	r23, 0x02	; 2
     c7c:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <strcmp>
     c80:	00 97       	sbiw	r24, 0x00	; 0
     c82:	09 f0       	breq	.+2      	; 0xc86 <task_cmd+0x126>
     c84:	4f c0       	rjmp	.+158    	; 0xd24 <task_cmd+0x1c4>
		if(cp1 == NULL) {
     c86:	e1 14       	cp	r14, r1
     c88:	f1 04       	cpc	r15, r1
     c8a:	19 f4       	brne	.+6      	; 0xc92 <task_cmd+0x132>
			printf("!!!-222\n");
     c8c:	84 eb       	ldi	r24, 0xB4	; 180
     c8e:	92 e0       	ldi	r25, 0x02	; 2
     c90:	57 c0       	rjmp	.+174    	; 0xd40 <task_cmd+0x1e0>
			printf("$ ");
			return;
		}
		ms = atoi(cp1) / 256;
     c92:	c7 01       	movw	r24, r14
     c94:	0e 94 5b 0d 	call	0x1ab6	; 0x1ab6 <atoi>
     c98:	60 e0       	ldi	r22, 0x00	; 0
     c9a:	71 e0       	ldi	r23, 0x01	; 1
     c9c:	0e 94 ce 0b 	call	0x179c	; 0x179c <__divmodhi4>
     ca0:	06 2f       	mov	r16, r22
     ca2:	e7 2e       	mov	r14, r23
		if(!strcmp(cp2, "prime")) {
     ca4:	c5 01       	movw	r24, r10
     ca6:	67 e9       	ldi	r22, 0x97	; 151
     ca8:	72 e0       	ldi	r23, 0x02	; 2
     caa:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <strcmp>
     cae:	00 97       	sbiw	r24, 0x00	; 0
     cb0:	c1 f4       	brne	.+48     	; 0xce2 <task_cmd+0x182>
			task.fun = task_prime;
     cb2:	87 ea       	ldi	r24, 0xA7	; 167
     cb4:	92 e0       	ldi	r25, 0x02	; 2
     cb6:	9a 83       	std	Y+2, r25	; 0x02
     cb8:	89 83       	std	Y+1, r24	; 0x01
			if(cp3)	strcpy(task.arg, cp3);
     cba:	ce 01       	movw	r24, r28
     cbc:	03 96       	adiw	r24, 0x03	; 3
     cbe:	c1 14       	cp	r12, r1
     cc0:	d1 04       	cpc	r13, r1
     cc2:	11 f0       	breq	.+4      	; 0xcc8 <task_cmd+0x168>
     cc4:	b6 01       	movw	r22, r12
     cc6:	02 c0       	rjmp	.+4      	; 0xccc <task_cmd+0x16c>
			else	strcpy(task.arg, "");
     cc8:	6c eb       	ldi	r22, 0xBC	; 188
     cca:	72 e0       	ldi	r23, 0x02	; 2
     ccc:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <strcpy>
			cli();
     cd0:	f8 94       	cli
			insert_timer(&task, ms);
     cd2:	ce 01       	movw	r24, r28
     cd4:	01 96       	adiw	r24, 0x01	; 1
     cd6:	60 2f       	mov	r22, r16
     cd8:	7e 2d       	mov	r23, r14
     cda:	0e 94 05 04 	call	0x80a	; 0x80a <insert_timer>
			sei();
     cde:	78 94       	sei
     ce0:	31 c0       	rjmp	.+98     	; 0xd44 <task_cmd+0x1e4>
		} else if(!strcmp(cp2, "tc1047")) {
     ce2:	c5 01       	movw	r24, r10
     ce4:	6d eb       	ldi	r22, 0xBD	; 189
     ce6:	72 e0       	ldi	r23, 0x02	; 2
     ce8:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <strcmp>
     cec:	00 97       	sbiw	r24, 0x00	; 0
     cee:	b9 f4       	brne	.+46     	; 0xd1e <task_cmd+0x1be>
			task.fun = task_tc1047;
     cf0:	80 eb       	ldi	r24, 0xB0	; 176
     cf2:	93 e0       	ldi	r25, 0x03	; 3
     cf4:	9a 83       	std	Y+2, r25	; 0x02
     cf6:	89 83       	std	Y+1, r24	; 0x01
			if(cp3)	strcpy(task.arg, cp3);
     cf8:	ce 01       	movw	r24, r28
     cfa:	03 96       	adiw	r24, 0x03	; 3
     cfc:	c1 14       	cp	r12, r1
     cfe:	d1 04       	cpc	r13, r1
     d00:	11 f0       	breq	.+4      	; 0xd06 <task_cmd+0x1a6>
     d02:	b6 01       	movw	r22, r12
     d04:	02 c0       	rjmp	.+4      	; 0xd0a <task_cmd+0x1aa>
			else	strcpy(task.arg, "");
     d06:	6c eb       	ldi	r22, 0xBC	; 188
     d08:	72 e0       	ldi	r23, 0x02	; 2
     d0a:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <strcpy>
			cli();
     d0e:	f8 94       	cli
			insert_timer(&task, ms);
     d10:	ce 01       	movw	r24, r28
     d12:	01 96       	adiw	r24, 0x01	; 1
     d14:	60 2f       	mov	r22, r16
     d16:	7e 2d       	mov	r23, r14
     d18:	0e 94 05 04 	call	0x80a	; 0x80a <insert_timer>
     d1c:	13 c0       	rjmp	.+38     	; 0xd44 <task_cmd+0x1e4>
		}
		else printf("!!!-333\n");
     d1e:	84 ec       	ldi	r24, 0xC4	; 196
     d20:	92 e0       	ldi	r25, 0x02	; 2
     d22:	0e c0       	rjmp	.+28     	; 0xd40 <task_cmd+0x1e0>
	}
	else if(!strcmp(cp0, "tc1047"))
     d24:	c8 01       	movw	r24, r16
     d26:	6d eb       	ldi	r22, 0xBD	; 189
     d28:	72 e0       	ldi	r23, 0x02	; 2
     d2a:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <strcmp>
     d2e:	00 97       	sbiw	r24, 0x00	; 0
     d30:	29 f4       	brne	.+10     	; 0xd3c <task_cmd+0x1dc>
		task_tc1047("");
     d32:	8c eb       	ldi	r24, 0xBC	; 188
     d34:	92 e0       	ldi	r25, 0x02	; 2
     d36:	0e 94 b0 03 	call	0x760	; 0x760 <task_tc1047>
     d3a:	04 c0       	rjmp	.+8      	; 0xd44 <task_cmd+0x1e4>
	else printf("Unknown command...\n");
     d3c:	8c ec       	ldi	r24, 0xCC	; 204
     d3e:	92 e0       	ldi	r25, 0x02	; 2
     d40:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <puts>
	printf("$ ");
     d44:	0f 92       	push	r0
     d46:	0f 92       	push	r0
     d48:	84 e9       	ldi	r24, 0x94	; 148
     d4a:	92 e0       	ldi	r25, 0x02	; 2
     d4c:	ed b7       	in	r30, 0x3d	; 61
     d4e:	fe b7       	in	r31, 0x3e	; 62
     d50:	92 83       	std	Z+2, r25	; 0x02
     d52:	81 83       	std	Z+1, r24	; 0x01
     d54:	0e 94 17 0e 	call	0x1c2e	; 0x1c2e <printf>
     d58:	0f 90       	pop	r0
     d5a:	0f 90       	pop	r0
}
     d5c:	c6 5b       	subi	r28, 0xB6	; 182
     d5e:	df 4f       	sbci	r29, 0xFF	; 255
     d60:	0f b6       	in	r0, 0x3f	; 63
     d62:	f8 94       	cli
     d64:	de bf       	out	0x3e, r29	; 62
     d66:	0f be       	out	0x3f, r0	; 63
     d68:	cd bf       	out	0x3d, r28	; 61
     d6a:	df 91       	pop	r29
     d6c:	cf 91       	pop	r28
     d6e:	1f 91       	pop	r17
     d70:	0f 91       	pop	r16
     d72:	ff 90       	pop	r15
     d74:	ef 90       	pop	r14
     d76:	df 90       	pop	r13
     d78:	cf 90       	pop	r12
     d7a:	bf 90       	pop	r11
     d7c:	af 90       	pop	r10
     d7e:	08 95       	ret

00000d80 <uart_getchar>:

int uart_getchar(FILE *stream) {
	char ch;

	do {
		cli();
     d80:	f8 94       	cli
		ch = qi_delete();
     d82:	0e 94 3b 03 	call	0x676	; 0x676 <qi_delete>
		sei();
     d86:	78 94       	sei
	} while (ch == 0);
     d88:	88 23       	and	r24, r24
     d8a:	d1 f3       	breq	.-12     	; 0xd80 <uart_getchar>

	if(ch == EOT)	return(-1);
     d8c:	84 30       	cpi	r24, 0x04	; 4
     d8e:	11 f0       	breq	.+4      	; 0xd94 <uart_getchar+0x14>
	else			return(ch);
     d90:	90 e0       	ldi	r25, 0x00	; 0
     d92:	08 95       	ret
		cli();
		ch = qi_delete();
		sei();
	} while (ch == 0);

	if(ch == EOT)	return(-1);
     d94:	8f ef       	ldi	r24, 0xFF	; 255
     d96:	9f ef       	ldi	r25, 0xFF	; 255
	else			return(ch);
}
     d98:	08 95       	ret

00000d9a <uart_putchar>:
	sbi(UCSR0B, TXCIE0);
	sbi(UCSR0B, RXEN0);
	sbi(UCSR0B, RXCIE0);
}

int uart_putchar(char ch, FILE *stream) {
     d9a:	cf 93       	push	r28
     d9c:	c8 2f       	mov	r28, r24
	if(ch == '\n')	uart_putchar('\r', stream);
     d9e:	8a 30       	cpi	r24, 0x0A	; 10
     da0:	19 f4       	brne	.+6      	; 0xda8 <uart_putchar+0xe>
     da2:	8d e0       	ldi	r24, 0x0D	; 13
     da4:	0e 94 cd 06 	call	0xd9a	; 0xd9a <uart_putchar>
	
	cli();
     da8:	f8 94       	cli
	if(!uart_busy) {
     daa:	80 91 47 05 	lds	r24, 0x0547
     dae:	88 23       	and	r24, r24
     db0:	59 f4       	brne	.+22     	; 0xdc8 <uart_putchar+0x2e>
		UDR0 = ch;
     db2:	c0 93 c6 00 	sts	0x00C6, r28
		uart_busy = 1;
     db6:	81 e0       	ldi	r24, 0x01	; 1
     db8:	80 93 47 05 	sts	0x0547, r24
     dbc:	0a c0       	rjmp	.+20     	; 0xdd2 <uart_putchar+0x38>
	} 
	else {
		while(qo_insert(ch) == 0) {
			sei();
     dbe:	78 94       	sei
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     dc0:	86 ef       	ldi	r24, 0xF6	; 246
     dc2:	8a 95       	dec	r24
     dc4:	f1 f7       	brne	.-4      	; 0xdc2 <uart_putchar+0x28>
			_delay_us(100);
			cli();
     dc6:	f8 94       	cli
	if(!uart_busy) {
		UDR0 = ch;
		uart_busy = 1;
	} 
	else {
		while(qo_insert(ch) == 0) {
     dc8:	8c 2f       	mov	r24, r28
     dca:	0e 94 58 03 	call	0x6b0	; 0x6b0 <qo_insert>
     dce:	00 97       	sbiw	r24, 0x00	; 0
     dd0:	b1 f3       	breq	.-20     	; 0xdbe <uart_putchar+0x24>
			sei();
			_delay_us(100);
			cli();
		}
	}
	sei();
     dd2:	78 94       	sei

	return(1);
}
     dd4:	81 e0       	ldi	r24, 0x01	; 1
     dd6:	90 e0       	ldi	r25, 0x00	; 0
     dd8:	cf 91       	pop	r28
     dda:	08 95       	ret

00000ddc <uart_init>:
FILE	Mystdout = FDEV_SETUP_STREAM(uart_putchar, NULL, _FDEV_SETUP_WRITE);
FILE	Mystdin = FDEV_SETUP_STREAM(NULL, uart_getchar, _FDEV_SETUP_READ);
char	uart_busy;

void uart_init() {
	stdin = &Mystdin; stdout = &Mystdout;
     ddc:	80 ee       	ldi	r24, 0xE0	; 224
     dde:	92 e0       	ldi	r25, 0x02	; 2
     de0:	90 93 4d 05 	sts	0x054D, r25
     de4:	80 93 4c 05 	sts	0x054C, r24
     de8:	8e ee       	ldi	r24, 0xEE	; 238
     dea:	92 e0       	ldi	r25, 0x02	; 2
     dec:	90 93 4f 05 	sts	0x054F, r25
     df0:	80 93 4e 05 	sts	0x054E, r24
	q_init();
     df4:	0e 94 08 03 	call	0x610	; 0x610 <q_init>
	uart_busy = 0;
     df8:	10 92 47 05 	sts	0x0547, r1
	
	UBRR0H = 0x00; UBRR0L = 0x07;
     dfc:	10 92 c5 00 	sts	0x00C5, r1
     e00:	87 e0       	ldi	r24, 0x07	; 7
     e02:	80 93 c4 00 	sts	0x00C4, r24
	sbi(UCSR0A, U2X0);
     e06:	e0 ec       	ldi	r30, 0xC0	; 192
     e08:	f0 e0       	ldi	r31, 0x00	; 0
     e0a:	80 81       	ld	r24, Z
     e0c:	82 60       	ori	r24, 0x02	; 2
     e0e:	80 83       	st	Z, r24
	sbi(UCSR0B, TXEN0);
     e10:	e1 ec       	ldi	r30, 0xC1	; 193
     e12:	f0 e0       	ldi	r31, 0x00	; 0
     e14:	80 81       	ld	r24, Z
     e16:	88 60       	ori	r24, 0x08	; 8
     e18:	80 83       	st	Z, r24
	sbi(UCSR0B, TXCIE0);
     e1a:	80 81       	ld	r24, Z
     e1c:	80 64       	ori	r24, 0x40	; 64
     e1e:	80 83       	st	Z, r24
	sbi(UCSR0B, RXEN0);
     e20:	80 81       	ld	r24, Z
     e22:	80 61       	ori	r24, 0x10	; 16
     e24:	80 83       	st	Z, r24
	sbi(UCSR0B, RXCIE0);
     e26:	80 81       	ld	r24, Z
     e28:	80 68       	ori	r24, 0x80	; 128
     e2a:	80 83       	st	Z, r24
}
     e2c:	08 95       	ret

00000e2e <uart_echo>:

	if(ch == EOT)	return(-1);
	else			return(ch);
}

void uart_echo (char ch) {
     e2e:	cf 93       	push	r28
     e30:	c8 2f       	mov	r28, r24
	if(ch == '\n')	uart_echo('\r');
     e32:	8a 30       	cpi	r24, 0x0A	; 10
     e34:	19 f4       	brne	.+6      	; 0xe3c <uart_echo+0xe>
     e36:	8d e0       	ldi	r24, 0x0D	; 13
     e38:	0e 94 17 07 	call	0xe2e	; 0xe2e <uart_echo>
	if(!uart_busy) {
     e3c:	80 91 47 05 	lds	r24, 0x0547
     e40:	88 23       	and	r24, r24
     e42:	31 f4       	brne	.+12     	; 0xe50 <uart_echo+0x22>
		UDR0 = ch;
     e44:	c0 93 c6 00 	sts	0x00C6, r28
		uart_busy = 1;
     e48:	81 e0       	ldi	r24, 0x01	; 1
     e4a:	80 93 47 05 	sts	0x0547, r24
     e4e:	03 c0       	rjmp	.+6      	; 0xe56 <uart_echo+0x28>
	}
	else	qo_insert(ch);
     e50:	8c 2f       	mov	r24, r28
     e52:	0e 94 58 03 	call	0x6b0	; 0x6b0 <qo_insert>
}
     e56:	cf 91       	pop	r28
     e58:	08 95       	ret

00000e5a <__vector_27>:

ISR(USART0_TX_vect) {
     e5a:	1f 92       	push	r1
     e5c:	0f 92       	push	r0
     e5e:	0f b6       	in	r0, 0x3f	; 63
     e60:	0f 92       	push	r0
     e62:	0b b6       	in	r0, 0x3b	; 59
     e64:	0f 92       	push	r0
     e66:	11 24       	eor	r1, r1
     e68:	2f 93       	push	r18
     e6a:	3f 93       	push	r19
     e6c:	4f 93       	push	r20
     e6e:	5f 93       	push	r21
     e70:	6f 93       	push	r22
     e72:	7f 93       	push	r23
     e74:	8f 93       	push	r24
     e76:	9f 93       	push	r25
     e78:	af 93       	push	r26
     e7a:	bf 93       	push	r27
     e7c:	ef 93       	push	r30
     e7e:	ff 93       	push	r31
   char ch;

   if((ch = qo_delete()) == 0)
     e80:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <qo_delete>
     e84:	88 23       	and	r24, r24
     e86:	19 f4       	brne	.+6      	; 0xe8e <__vector_27+0x34>
      uart_busy = 0;
     e88:	10 92 47 05 	sts	0x0547, r1
     e8c:	02 c0       	rjmp	.+4      	; 0xe92 <__vector_27+0x38>
   else
      UDR0 = ch;
     e8e:	80 93 c6 00 	sts	0x00C6, r24
}
     e92:	ff 91       	pop	r31
     e94:	ef 91       	pop	r30
     e96:	bf 91       	pop	r27
     e98:	af 91       	pop	r26
     e9a:	9f 91       	pop	r25
     e9c:	8f 91       	pop	r24
     e9e:	7f 91       	pop	r23
     ea0:	6f 91       	pop	r22
     ea2:	5f 91       	pop	r21
     ea4:	4f 91       	pop	r20
     ea6:	3f 91       	pop	r19
     ea8:	2f 91       	pop	r18
     eaa:	0f 90       	pop	r0
     eac:	0b be       	out	0x3b, r0	; 59
     eae:	0f 90       	pop	r0
     eb0:	0f be       	out	0x3f, r0	; 63
     eb2:	0f 90       	pop	r0
     eb4:	1f 90       	pop	r1
     eb6:	18 95       	reti

00000eb8 <__vector_25>:

static int echo_mode = 1;

ISR(USART0_RX_vect) {
     eb8:	1f 92       	push	r1
     eba:	0f 92       	push	r0
     ebc:	0f b6       	in	r0, 0x3f	; 63
     ebe:	0f 92       	push	r0
     ec0:	0b b6       	in	r0, 0x3b	; 59
     ec2:	0f 92       	push	r0
     ec4:	11 24       	eor	r1, r1
     ec6:	1f 93       	push	r17
     ec8:	2f 93       	push	r18
     eca:	3f 93       	push	r19
     ecc:	4f 93       	push	r20
     ece:	5f 93       	push	r21
     ed0:	6f 93       	push	r22
     ed2:	7f 93       	push	r23
     ed4:	8f 93       	push	r24
     ed6:	9f 93       	push	r25
     ed8:	af 93       	push	r26
     eda:	bf 93       	push	r27
     edc:	ef 93       	push	r30
     ede:	ff 93       	push	r31
     ee0:	cf 93       	push	r28
     ee2:	df 93       	push	r29
     ee4:	cd b7       	in	r28, 0x3d	; 61
     ee6:	de b7       	in	r29, 0x3e	; 62
     ee8:	2a 97       	sbiw	r28, 0x0a	; 10
     eea:	de bf       	out	0x3e, r29	; 62
     eec:	cd bf       	out	0x3d, r28	; 61
	struct task task;
	char ch;

	ch = UDR0;
     eee:	10 91 c6 00 	lds	r17, 0x00C6

	if(ch == ESC) {
     ef2:	1b 31       	cpi	r17, 0x1B	; 27
     ef4:	61 f4       	brne	.+24     	; 0xf0e <__vector_25+0x56>
		echo_mode = (echo_mode + 1) & 0x01;
     ef6:	80 91 fc 02 	lds	r24, 0x02FC
     efa:	90 91 fd 02 	lds	r25, 0x02FD
     efe:	01 96       	adiw	r24, 0x01	; 1
     f00:	81 70       	andi	r24, 0x01	; 1
     f02:	90 70       	andi	r25, 0x00	; 0
     f04:	90 93 fd 02 	sts	0x02FD, r25
     f08:	80 93 fc 02 	sts	0x02FC, r24
		return;
     f0c:	24 c0       	rjmp	.+72     	; 0xf56 <__vector_25+0x9e>
	}
	
	if(ch != EOT) {
     f0e:	14 30       	cpi	r17, 0x04	; 4
     f10:	69 f0       	breq	.+26     	; 0xf2c <__vector_25+0x74>
		if(ch == '\r')	ch = '\n';
     f12:	1d 30       	cpi	r17, 0x0D	; 13
     f14:	09 f4       	brne	.+2      	; 0xf18 <__vector_25+0x60>
     f16:	1a e0       	ldi	r17, 0x0A	; 10
		if(echo_mode)	uart_echo(ch);
     f18:	20 91 fc 02 	lds	r18, 0x02FC
     f1c:	30 91 fd 02 	lds	r19, 0x02FD
     f20:	21 15       	cp	r18, r1
     f22:	31 05       	cpc	r19, r1
     f24:	19 f0       	breq	.+6      	; 0xf2c <__vector_25+0x74>
     f26:	81 2f       	mov	r24, r17
     f28:	0e 94 17 07 	call	0xe2e	; 0xe2e <uart_echo>
	}
	qi_insert(ch);
     f2c:	81 2f       	mov	r24, r17
     f2e:	0e 94 19 03 	call	0x632	; 0x632 <qi_insert>

	if(ch == EOT || ch == '\n') {
     f32:	14 30       	cpi	r17, 0x04	; 4
     f34:	11 f0       	breq	.+4      	; 0xf3a <__vector_25+0x82>
     f36:	1a 30       	cpi	r17, 0x0A	; 10
     f38:	71 f4       	brne	.+28     	; 0xf56 <__vector_25+0x9e>
		task.fun = task_cmd;
     f3a:	80 eb       	ldi	r24, 0xB0	; 176
     f3c:	95 e0       	ldi	r25, 0x05	; 5
     f3e:	9a 83       	std	Y+2, r25	; 0x02
     f40:	89 83       	std	Y+1, r24	; 0x01
		strcpy(task.arg, "");
     f42:	ce 01       	movw	r24, r28
     f44:	03 96       	adiw	r24, 0x03	; 3
     f46:	6f ed       	ldi	r22, 0xDF	; 223
     f48:	72 e0       	ldi	r23, 0x02	; 2
     f4a:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <strcpy>
		task_insert(&task);
     f4e:	ce 01       	movw	r24, r28
     f50:	01 96       	adiw	r24, 0x01	; 1
     f52:	0e 94 e9 04 	call	0x9d2	; 0x9d2 <task_insert>
	}
}
     f56:	2a 96       	adiw	r28, 0x0a	; 10
     f58:	de bf       	out	0x3e, r29	; 62
     f5a:	cd bf       	out	0x3d, r28	; 61
     f5c:	df 91       	pop	r29
     f5e:	cf 91       	pop	r28
     f60:	ff 91       	pop	r31
     f62:	ef 91       	pop	r30
     f64:	bf 91       	pop	r27
     f66:	af 91       	pop	r26
     f68:	9f 91       	pop	r25
     f6a:	8f 91       	pop	r24
     f6c:	7f 91       	pop	r23
     f6e:	6f 91       	pop	r22
     f70:	5f 91       	pop	r21
     f72:	4f 91       	pop	r20
     f74:	3f 91       	pop	r19
     f76:	2f 91       	pop	r18
     f78:	1f 91       	pop	r17
     f7a:	0f 90       	pop	r0
     f7c:	0b be       	out	0x3b, r0	; 59
     f7e:	0f 90       	pop	r0
     f80:	0f be       	out	0x3f, r0	; 63
     f82:	0f 90       	pop	r0
     f84:	1f 90       	pop	r1
     f86:	18 95       	reti

00000f88 <uart_peek>:

int uart_peek() {
	return(qi_peek());
     f88:	0e 94 97 03 	call	0x72e	; 0x72e <qi_peek>
}
     f8c:	08 95       	ret

00000f8e <adc_init>:
#include <compat/deprecated.h>
#include "timer_task.h"
#include "ADC.h"

void adc_init() {
	cbi(DDRF, PF0);
     f8e:	80 98       	cbi	0x10, 0	; 16
	ADMUX = 0x80 | 0x00;
     f90:	80 e8       	ldi	r24, 0x80	; 128
     f92:	80 93 7c 00 	sts	0x007C, r24
}
     f96:	08 95       	ret

00000f98 <adc_start>:

void adc_start() {
	sbi(ADCSRA, ADEN);
     f98:	ea e7       	ldi	r30, 0x7A	; 122
     f9a:	f0 e0       	ldi	r31, 0x00	; 0
     f9c:	80 81       	ld	r24, Z
     f9e:	80 68       	ori	r24, 0x80	; 128
     fa0:	80 83       	st	Z, r24
     fa2:	8d ed       	ldi	r24, 0xDD	; 221
     fa4:	90 e0       	ldi	r25, 0x00	; 0
     fa6:	01 97       	sbiw	r24, 0x01	; 1
     fa8:	f1 f7       	brne	.-4      	; 0xfa6 <adc_start+0xe>
	_delay_us(120);
	sbi(ADCSRA, ADIE);
     faa:	80 81       	ld	r24, Z
     fac:	88 60       	ori	r24, 0x08	; 8
     fae:	80 83       	st	Z, r24
	sbi(ADCSRA, ADSC);
     fb0:	80 81       	ld	r24, Z
     fb2:	80 64       	ori	r24, 0x40	; 64
     fb4:	80 83       	st	Z, r24
}
     fb6:	08 95       	ret

00000fb8 <__vector_29>:

ISR(ADC_vect) {
     fb8:	1f 92       	push	r1
     fba:	0f 92       	push	r0
     fbc:	0f b6       	in	r0, 0x3f	; 63
     fbe:	0f 92       	push	r0
     fc0:	0b b6       	in	r0, 0x3b	; 59
     fc2:	0f 92       	push	r0
     fc4:	11 24       	eor	r1, r1
     fc6:	0f 93       	push	r16
     fc8:	1f 93       	push	r17
     fca:	2f 93       	push	r18
     fcc:	3f 93       	push	r19
     fce:	4f 93       	push	r20
     fd0:	5f 93       	push	r21
     fd2:	6f 93       	push	r22
     fd4:	7f 93       	push	r23
     fd6:	8f 93       	push	r24
     fd8:	9f 93       	push	r25
     fda:	af 93       	push	r26
     fdc:	bf 93       	push	r27
     fde:	ef 93       	push	r30
     fe0:	ff 93       	push	r31
     fe2:	cf 93       	push	r28
     fe4:	df 93       	push	r29
     fe6:	cd b7       	in	r28, 0x3d	; 61
     fe8:	de b7       	in	r29, 0x3e	; 62
     fea:	28 97       	sbiw	r28, 0x08	; 8
     fec:	de bf       	out	0x3e, r29	; 62
     fee:	cd bf       	out	0x3d, r28	; 61
	uint16_t	data;
	char		arg[8];

	data = ADCW & 0x03ff;
     ff0:	80 91 78 00 	lds	r24, 0x0078
     ff4:	90 91 79 00 	lds	r25, 0x0079
	//data = 640;
	cbi(ADCSRA, ADEN);
     ff8:	ea e7       	ldi	r30, 0x7A	; 122
     ffa:	f0 e0       	ldi	r31, 0x00	; 0
     ffc:	20 81       	ld	r18, Z
     ffe:	2f 77       	andi	r18, 0x7F	; 127
    1000:	20 83       	st	Z, r18

	sprintf(arg, "%d", data);
    1002:	00 d0       	rcall	.+0      	; 0x1004 <__vector_29+0x4c>
    1004:	00 d0       	rcall	.+0      	; 0x1006 <__vector_29+0x4e>
    1006:	ed b7       	in	r30, 0x3d	; 61
    1008:	fe b7       	in	r31, 0x3e	; 62
    100a:	31 96       	adiw	r30, 0x01	; 1
    100c:	8e 01       	movw	r16, r28
    100e:	0f 5f       	subi	r16, 0xFF	; 255
    1010:	1f 4f       	sbci	r17, 0xFF	; 255
    1012:	ad b7       	in	r26, 0x3d	; 61
    1014:	be b7       	in	r27, 0x3e	; 62
    1016:	12 96       	adiw	r26, 0x02	; 2
    1018:	1c 93       	st	X, r17
    101a:	0e 93       	st	-X, r16
    101c:	11 97       	sbiw	r26, 0x01	; 1
    101e:	2e ef       	ldi	r18, 0xFE	; 254
    1020:	32 e0       	ldi	r19, 0x02	; 2
    1022:	33 83       	std	Z+3, r19	; 0x03
    1024:	22 83       	std	Z+2, r18	; 0x02

ISR(ADC_vect) {
	uint16_t	data;
	char		arg[8];

	data = ADCW & 0x03ff;
    1026:	93 70       	andi	r25, 0x03	; 3
	//data = 640;
	cbi(ADCSRA, ADEN);

	sprintf(arg, "%d", data);
    1028:	95 83       	std	Z+5, r25	; 0x05
    102a:	84 83       	std	Z+4, r24	; 0x04
    102c:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <sprintf>

	task_tc1047(arg);
    1030:	8d b7       	in	r24, 0x3d	; 61
    1032:	9e b7       	in	r25, 0x3e	; 62
    1034:	06 96       	adiw	r24, 0x06	; 6
    1036:	0f b6       	in	r0, 0x3f	; 63
    1038:	f8 94       	cli
    103a:	9e bf       	out	0x3e, r25	; 62
    103c:	0f be       	out	0x3f, r0	; 63
    103e:	8d bf       	out	0x3d, r24	; 61
    1040:	c8 01       	movw	r24, r16
    1042:	0e 94 b0 03 	call	0x760	; 0x760 <task_tc1047>
}
    1046:	28 96       	adiw	r28, 0x08	; 8
    1048:	de bf       	out	0x3e, r29	; 62
    104a:	cd bf       	out	0x3d, r28	; 61
    104c:	df 91       	pop	r29
    104e:	cf 91       	pop	r28
    1050:	ff 91       	pop	r31
    1052:	ef 91       	pop	r30
    1054:	bf 91       	pop	r27
    1056:	af 91       	pop	r26
    1058:	9f 91       	pop	r25
    105a:	8f 91       	pop	r24
    105c:	7f 91       	pop	r23
    105e:	6f 91       	pop	r22
    1060:	5f 91       	pop	r21
    1062:	4f 91       	pop	r20
    1064:	3f 91       	pop	r19
    1066:	2f 91       	pop	r18
    1068:	1f 91       	pop	r17
    106a:	0f 91       	pop	r16
    106c:	0f 90       	pop	r0
    106e:	0b be       	out	0x3b, r0	; 59
    1070:	0f 90       	pop	r0
    1072:	0f be       	out	0x3f, r0	; 63
    1074:	0f 90       	pop	r0
    1076:	1f 90       	pop	r1
    1078:	18 95       	reti

0000107a <__mulsf3>:
    107a:	a0 e2       	ldi	r26, 0x20	; 32
    107c:	b0 e0       	ldi	r27, 0x00	; 0
    107e:	e3 e4       	ldi	r30, 0x43	; 67
    1080:	f8 e0       	ldi	r31, 0x08	; 8
    1082:	0c 94 f7 0b 	jmp	0x17ee	; 0x17ee <__prologue_saves__+0x4>
    1086:	dc 01       	movw	r26, r24
    1088:	cb 01       	movw	r24, r22
    108a:	8d 83       	std	Y+5, r24	; 0x05
    108c:	9e 83       	std	Y+6, r25	; 0x06
    108e:	af 83       	std	Y+7, r26	; 0x07
    1090:	b8 87       	std	Y+8, r27	; 0x08
    1092:	29 83       	std	Y+1, r18	; 0x01
    1094:	3a 83       	std	Y+2, r19	; 0x02
    1096:	4b 83       	std	Y+3, r20	; 0x03
    1098:	5c 83       	std	Y+4, r21	; 0x04
    109a:	ce 01       	movw	r24, r28
    109c:	05 96       	adiw	r24, 0x05	; 5
    109e:	be 01       	movw	r22, r28
    10a0:	67 5e       	subi	r22, 0xE7	; 231
    10a2:	7f 4f       	sbci	r23, 0xFF	; 255
    10a4:	0e 94 30 0b 	call	0x1660	; 0x1660 <__unpack_f>
    10a8:	ce 01       	movw	r24, r28
    10aa:	01 96       	adiw	r24, 0x01	; 1
    10ac:	be 01       	movw	r22, r28
    10ae:	6f 5e       	subi	r22, 0xEF	; 239
    10b0:	7f 4f       	sbci	r23, 0xFF	; 255
    10b2:	0e 94 30 0b 	call	0x1660	; 0x1660 <__unpack_f>
    10b6:	99 8d       	ldd	r25, Y+25	; 0x19
    10b8:	92 30       	cpi	r25, 0x02	; 2
    10ba:	78 f0       	brcs	.+30     	; 0x10da <__mulsf3+0x60>
    10bc:	89 89       	ldd	r24, Y+17	; 0x11
    10be:	82 30       	cpi	r24, 0x02	; 2
    10c0:	c0 f0       	brcs	.+48     	; 0x10f2 <__mulsf3+0x78>
    10c2:	94 30       	cpi	r25, 0x04	; 4
    10c4:	19 f4       	brne	.+6      	; 0x10cc <__mulsf3+0x52>
    10c6:	82 30       	cpi	r24, 0x02	; 2
    10c8:	41 f4       	brne	.+16     	; 0x10da <__mulsf3+0x60>
    10ca:	ca c0       	rjmp	.+404    	; 0x1260 <__mulsf3+0x1e6>
    10cc:	84 30       	cpi	r24, 0x04	; 4
    10ce:	19 f4       	brne	.+6      	; 0x10d6 <__mulsf3+0x5c>
    10d0:	92 30       	cpi	r25, 0x02	; 2
    10d2:	79 f4       	brne	.+30     	; 0x10f2 <__mulsf3+0x78>
    10d4:	c5 c0       	rjmp	.+394    	; 0x1260 <__mulsf3+0x1e6>
    10d6:	92 30       	cpi	r25, 0x02	; 2
    10d8:	51 f4       	brne	.+20     	; 0x10ee <__mulsf3+0x74>
    10da:	81 e0       	ldi	r24, 0x01	; 1
    10dc:	2a 8d       	ldd	r18, Y+26	; 0x1a
    10de:	9a 89       	ldd	r25, Y+18	; 0x12
    10e0:	29 17       	cp	r18, r25
    10e2:	09 f4       	brne	.+2      	; 0x10e6 <__mulsf3+0x6c>
    10e4:	80 e0       	ldi	r24, 0x00	; 0
    10e6:	8a 8f       	std	Y+26, r24	; 0x1a
    10e8:	ce 01       	movw	r24, r28
    10ea:	49 96       	adiw	r24, 0x19	; 25
    10ec:	bb c0       	rjmp	.+374    	; 0x1264 <__mulsf3+0x1ea>
    10ee:	82 30       	cpi	r24, 0x02	; 2
    10f0:	51 f4       	brne	.+20     	; 0x1106 <__mulsf3+0x8c>
    10f2:	81 e0       	ldi	r24, 0x01	; 1
    10f4:	2a 8d       	ldd	r18, Y+26	; 0x1a
    10f6:	9a 89       	ldd	r25, Y+18	; 0x12
    10f8:	29 17       	cp	r18, r25
    10fa:	09 f4       	brne	.+2      	; 0x10fe <__mulsf3+0x84>
    10fc:	80 e0       	ldi	r24, 0x00	; 0
    10fe:	8a 8b       	std	Y+18, r24	; 0x12
    1100:	ce 01       	movw	r24, r28
    1102:	41 96       	adiw	r24, 0x11	; 17
    1104:	af c0       	rjmp	.+350    	; 0x1264 <__mulsf3+0x1ea>
    1106:	4d 8c       	ldd	r4, Y+29	; 0x1d
    1108:	5e 8c       	ldd	r5, Y+30	; 0x1e
    110a:	6f 8c       	ldd	r6, Y+31	; 0x1f
    110c:	78 a0       	lds	r23, 0x88
    110e:	0d 89       	ldd	r16, Y+21	; 0x15
    1110:	1e 89       	ldd	r17, Y+22	; 0x16
    1112:	2f 89       	ldd	r18, Y+23	; 0x17
    1114:	38 8d       	ldd	r19, Y+24	; 0x18
    1116:	e0 e2       	ldi	r30, 0x20	; 32
    1118:	f0 e0       	ldi	r31, 0x00	; 0
    111a:	40 e0       	ldi	r20, 0x00	; 0
    111c:	50 e0       	ldi	r21, 0x00	; 0
    111e:	ba 01       	movw	r22, r20
    1120:	88 24       	eor	r8, r8
    1122:	99 24       	eor	r9, r9
    1124:	54 01       	movw	r10, r8
    1126:	cc 24       	eor	r12, r12
    1128:	dd 24       	eor	r13, r13
    112a:	76 01       	movw	r14, r12
    112c:	c2 01       	movw	r24, r4
    112e:	81 70       	andi	r24, 0x01	; 1
    1130:	90 70       	andi	r25, 0x00	; 0
    1132:	00 97       	sbiw	r24, 0x00	; 0
    1134:	d1 f0       	breq	.+52     	; 0x116a <__mulsf3+0xf0>
    1136:	c0 0e       	add	r12, r16
    1138:	d1 1e       	adc	r13, r17
    113a:	e2 1e       	adc	r14, r18
    113c:	f3 1e       	adc	r15, r19
    113e:	db 01       	movw	r26, r22
    1140:	ca 01       	movw	r24, r20
    1142:	88 0d       	add	r24, r8
    1144:	99 1d       	adc	r25, r9
    1146:	aa 1d       	adc	r26, r10
    1148:	bb 1d       	adc	r27, r11
    114a:	41 e0       	ldi	r20, 0x01	; 1
    114c:	50 e0       	ldi	r21, 0x00	; 0
    114e:	60 e0       	ldi	r22, 0x00	; 0
    1150:	70 e0       	ldi	r23, 0x00	; 0
    1152:	c0 16       	cp	r12, r16
    1154:	d1 06       	cpc	r13, r17
    1156:	e2 06       	cpc	r14, r18
    1158:	f3 06       	cpc	r15, r19
    115a:	18 f0       	brcs	.+6      	; 0x1162 <__mulsf3+0xe8>
    115c:	40 e0       	ldi	r20, 0x00	; 0
    115e:	50 e0       	ldi	r21, 0x00	; 0
    1160:	ba 01       	movw	r22, r20
    1162:	48 0f       	add	r20, r24
    1164:	59 1f       	adc	r21, r25
    1166:	6a 1f       	adc	r22, r26
    1168:	7b 1f       	adc	r23, r27
    116a:	88 0c       	add	r8, r8
    116c:	99 1c       	adc	r9, r9
    116e:	aa 1c       	adc	r10, r10
    1170:	bb 1c       	adc	r11, r11
    1172:	37 ff       	sbrs	r19, 7
    1174:	08 c0       	rjmp	.+16     	; 0x1186 <__mulsf3+0x10c>
    1176:	81 e0       	ldi	r24, 0x01	; 1
    1178:	90 e0       	ldi	r25, 0x00	; 0
    117a:	a0 e0       	ldi	r26, 0x00	; 0
    117c:	b0 e0       	ldi	r27, 0x00	; 0
    117e:	88 2a       	or	r8, r24
    1180:	99 2a       	or	r9, r25
    1182:	aa 2a       	or	r10, r26
    1184:	bb 2a       	or	r11, r27
    1186:	00 0f       	add	r16, r16
    1188:	11 1f       	adc	r17, r17
    118a:	22 1f       	adc	r18, r18
    118c:	33 1f       	adc	r19, r19
    118e:	76 94       	lsr	r7
    1190:	67 94       	ror	r6
    1192:	57 94       	ror	r5
    1194:	47 94       	ror	r4
    1196:	31 97       	sbiw	r30, 0x01	; 1
    1198:	49 f6       	brne	.-110    	; 0x112c <__mulsf3+0xb2>
    119a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    119c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    119e:	2b 89       	ldd	r18, Y+19	; 0x13
    11a0:	3c 89       	ldd	r19, Y+20	; 0x14
    11a2:	82 0f       	add	r24, r18
    11a4:	93 1f       	adc	r25, r19
    11a6:	02 96       	adiw	r24, 0x02	; 2
    11a8:	9c 87       	std	Y+12, r25	; 0x0c
    11aa:	8b 87       	std	Y+11, r24	; 0x0b
    11ac:	81 e0       	ldi	r24, 0x01	; 1
    11ae:	2a 8d       	ldd	r18, Y+26	; 0x1a
    11b0:	9a 89       	ldd	r25, Y+18	; 0x12
    11b2:	29 17       	cp	r18, r25
    11b4:	09 f4       	brne	.+2      	; 0x11b8 <__mulsf3+0x13e>
    11b6:	80 e0       	ldi	r24, 0x00	; 0
    11b8:	8a 87       	std	Y+10, r24	; 0x0a
    11ba:	2b 85       	ldd	r18, Y+11	; 0x0b
    11bc:	3c 85       	ldd	r19, Y+12	; 0x0c
    11be:	17 c0       	rjmp	.+46     	; 0x11ee <__mulsf3+0x174>
    11c0:	ca 01       	movw	r24, r20
    11c2:	81 70       	andi	r24, 0x01	; 1
    11c4:	90 70       	andi	r25, 0x00	; 0
    11c6:	00 97       	sbiw	r24, 0x00	; 0
    11c8:	61 f0       	breq	.+24     	; 0x11e2 <__mulsf3+0x168>
    11ca:	f6 94       	lsr	r15
    11cc:	e7 94       	ror	r14
    11ce:	d7 94       	ror	r13
    11d0:	c7 94       	ror	r12
    11d2:	80 e0       	ldi	r24, 0x00	; 0
    11d4:	90 e0       	ldi	r25, 0x00	; 0
    11d6:	a0 e0       	ldi	r26, 0x00	; 0
    11d8:	b0 e8       	ldi	r27, 0x80	; 128
    11da:	c8 2a       	or	r12, r24
    11dc:	d9 2a       	or	r13, r25
    11de:	ea 2a       	or	r14, r26
    11e0:	fb 2a       	or	r15, r27
    11e2:	76 95       	lsr	r23
    11e4:	67 95       	ror	r22
    11e6:	57 95       	ror	r21
    11e8:	47 95       	ror	r20
    11ea:	2f 5f       	subi	r18, 0xFF	; 255
    11ec:	3f 4f       	sbci	r19, 0xFF	; 255
    11ee:	77 fd       	sbrc	r23, 7
    11f0:	e7 cf       	rjmp	.-50     	; 0x11c0 <__mulsf3+0x146>
    11f2:	c9 01       	movw	r24, r18
    11f4:	0b c0       	rjmp	.+22     	; 0x120c <__mulsf3+0x192>
    11f6:	44 0f       	add	r20, r20
    11f8:	55 1f       	adc	r21, r21
    11fa:	66 1f       	adc	r22, r22
    11fc:	77 1f       	adc	r23, r23
    11fe:	f7 fc       	sbrc	r15, 7
    1200:	41 60       	ori	r20, 0x01	; 1
    1202:	cc 0c       	add	r12, r12
    1204:	dd 1c       	adc	r13, r13
    1206:	ee 1c       	adc	r14, r14
    1208:	ff 1c       	adc	r15, r15
    120a:	01 97       	sbiw	r24, 0x01	; 1
    120c:	40 30       	cpi	r20, 0x00	; 0
    120e:	a0 e0       	ldi	r26, 0x00	; 0
    1210:	5a 07       	cpc	r21, r26
    1212:	a0 e0       	ldi	r26, 0x00	; 0
    1214:	6a 07       	cpc	r22, r26
    1216:	a0 e4       	ldi	r26, 0x40	; 64
    1218:	7a 07       	cpc	r23, r26
    121a:	68 f3       	brcs	.-38     	; 0x11f6 <__mulsf3+0x17c>
    121c:	8b 87       	std	Y+11, r24	; 0x0b
    121e:	9c 87       	std	Y+12, r25	; 0x0c
    1220:	db 01       	movw	r26, r22
    1222:	ca 01       	movw	r24, r20
    1224:	8f 77       	andi	r24, 0x7F	; 127
    1226:	90 70       	andi	r25, 0x00	; 0
    1228:	a0 70       	andi	r26, 0x00	; 0
    122a:	b0 70       	andi	r27, 0x00	; 0
    122c:	80 34       	cpi	r24, 0x40	; 64
    122e:	91 05       	cpc	r25, r1
    1230:	a1 05       	cpc	r26, r1
    1232:	b1 05       	cpc	r27, r1
    1234:	61 f4       	brne	.+24     	; 0x124e <__mulsf3+0x1d4>
    1236:	47 fd       	sbrc	r20, 7
    1238:	0a c0       	rjmp	.+20     	; 0x124e <__mulsf3+0x1d4>
    123a:	c1 14       	cp	r12, r1
    123c:	d1 04       	cpc	r13, r1
    123e:	e1 04       	cpc	r14, r1
    1240:	f1 04       	cpc	r15, r1
    1242:	29 f0       	breq	.+10     	; 0x124e <__mulsf3+0x1d4>
    1244:	40 5c       	subi	r20, 0xC0	; 192
    1246:	5f 4f       	sbci	r21, 0xFF	; 255
    1248:	6f 4f       	sbci	r22, 0xFF	; 255
    124a:	7f 4f       	sbci	r23, 0xFF	; 255
    124c:	40 78       	andi	r20, 0x80	; 128
    124e:	4d 87       	std	Y+13, r20	; 0x0d
    1250:	5e 87       	std	Y+14, r21	; 0x0e
    1252:	6f 87       	std	Y+15, r22	; 0x0f
    1254:	78 8b       	std	Y+16, r23	; 0x10
    1256:	83 e0       	ldi	r24, 0x03	; 3
    1258:	89 87       	std	Y+9, r24	; 0x09
    125a:	ce 01       	movw	r24, r28
    125c:	09 96       	adiw	r24, 0x09	; 9
    125e:	02 c0       	rjmp	.+4      	; 0x1264 <__mulsf3+0x1ea>
    1260:	81 e0       	ldi	r24, 0x01	; 1
    1262:	93 e0       	ldi	r25, 0x03	; 3
    1264:	0e 94 59 0a 	call	0x14b2	; 0x14b2 <__pack_f>
    1268:	46 2f       	mov	r20, r22
    126a:	57 2f       	mov	r21, r23
    126c:	68 2f       	mov	r22, r24
    126e:	79 2f       	mov	r23, r25
    1270:	cb 01       	movw	r24, r22
    1272:	ba 01       	movw	r22, r20
    1274:	a0 96       	adiw	r28, 0x20	; 32
    1276:	e0 e1       	ldi	r30, 0x10	; 16
    1278:	0c 94 13 0c 	jmp	0x1826	; 0x1826 <__epilogue_restores__+0x4>

0000127c <__floatsisf>:
    127c:	cf 92       	push	r12
    127e:	df 92       	push	r13
    1280:	ef 92       	push	r14
    1282:	ff 92       	push	r15
    1284:	cf 93       	push	r28
    1286:	df 93       	push	r29
    1288:	cd b7       	in	r28, 0x3d	; 61
    128a:	de b7       	in	r29, 0x3e	; 62
    128c:	28 97       	sbiw	r28, 0x08	; 8
    128e:	0f b6       	in	r0, 0x3f	; 63
    1290:	f8 94       	cli
    1292:	de bf       	out	0x3e, r29	; 62
    1294:	0f be       	out	0x3f, r0	; 63
    1296:	cd bf       	out	0x3d, r28	; 61
    1298:	6b 01       	movw	r12, r22
    129a:	7c 01       	movw	r14, r24
    129c:	83 e0       	ldi	r24, 0x03	; 3
    129e:	89 83       	std	Y+1, r24	; 0x01
    12a0:	d7 01       	movw	r26, r14
    12a2:	c6 01       	movw	r24, r12
    12a4:	88 27       	eor	r24, r24
    12a6:	b7 fd       	sbrc	r27, 7
    12a8:	83 95       	inc	r24
    12aa:	99 27       	eor	r25, r25
    12ac:	aa 27       	eor	r26, r26
    12ae:	bb 27       	eor	r27, r27
    12b0:	28 2f       	mov	r18, r24
    12b2:	8a 83       	std	Y+2, r24	; 0x02
    12b4:	c1 14       	cp	r12, r1
    12b6:	d1 04       	cpc	r13, r1
    12b8:	e1 04       	cpc	r14, r1
    12ba:	f1 04       	cpc	r15, r1
    12bc:	19 f4       	brne	.+6      	; 0x12c4 <__floatsisf+0x48>
    12be:	82 e0       	ldi	r24, 0x02	; 2
    12c0:	89 83       	std	Y+1, r24	; 0x01
    12c2:	35 c0       	rjmp	.+106    	; 0x132e <__floatsisf+0xb2>
    12c4:	8e e1       	ldi	r24, 0x1E	; 30
    12c6:	90 e0       	ldi	r25, 0x00	; 0
    12c8:	9c 83       	std	Y+4, r25	; 0x04
    12ca:	8b 83       	std	Y+3, r24	; 0x03
    12cc:	22 23       	and	r18, r18
    12ce:	89 f0       	breq	.+34     	; 0x12f2 <__floatsisf+0x76>
    12d0:	80 e0       	ldi	r24, 0x00	; 0
    12d2:	c8 16       	cp	r12, r24
    12d4:	80 e0       	ldi	r24, 0x00	; 0
    12d6:	d8 06       	cpc	r13, r24
    12d8:	80 e0       	ldi	r24, 0x00	; 0
    12da:	e8 06       	cpc	r14, r24
    12dc:	80 e8       	ldi	r24, 0x80	; 128
    12de:	f8 06       	cpc	r15, r24
    12e0:	59 f1       	breq	.+86     	; 0x1338 <__floatsisf+0xbc>
    12e2:	f0 94       	com	r15
    12e4:	e0 94       	com	r14
    12e6:	d0 94       	com	r13
    12e8:	c0 94       	com	r12
    12ea:	c1 1c       	adc	r12, r1
    12ec:	d1 1c       	adc	r13, r1
    12ee:	e1 1c       	adc	r14, r1
    12f0:	f1 1c       	adc	r15, r1
    12f2:	cd 82       	std	Y+5, r12	; 0x05
    12f4:	de 82       	std	Y+6, r13	; 0x06
    12f6:	ef 82       	std	Y+7, r14	; 0x07
    12f8:	f8 86       	std	Y+8, r15	; 0x08
    12fa:	c7 01       	movw	r24, r14
    12fc:	b6 01       	movw	r22, r12
    12fe:	0e 94 06 0a 	call	0x140c	; 0x140c <__clzsi2>
    1302:	01 97       	sbiw	r24, 0x01	; 1
    1304:	18 16       	cp	r1, r24
    1306:	19 06       	cpc	r1, r25
    1308:	94 f4       	brge	.+36     	; 0x132e <__floatsisf+0xb2>
    130a:	08 2e       	mov	r0, r24
    130c:	04 c0       	rjmp	.+8      	; 0x1316 <__floatsisf+0x9a>
    130e:	cc 0c       	add	r12, r12
    1310:	dd 1c       	adc	r13, r13
    1312:	ee 1c       	adc	r14, r14
    1314:	ff 1c       	adc	r15, r15
    1316:	0a 94       	dec	r0
    1318:	d2 f7       	brpl	.-12     	; 0x130e <__floatsisf+0x92>
    131a:	cd 82       	std	Y+5, r12	; 0x05
    131c:	de 82       	std	Y+6, r13	; 0x06
    131e:	ef 82       	std	Y+7, r14	; 0x07
    1320:	f8 86       	std	Y+8, r15	; 0x08
    1322:	2e e1       	ldi	r18, 0x1E	; 30
    1324:	30 e0       	ldi	r19, 0x00	; 0
    1326:	28 1b       	sub	r18, r24
    1328:	39 0b       	sbc	r19, r25
    132a:	3c 83       	std	Y+4, r19	; 0x04
    132c:	2b 83       	std	Y+3, r18	; 0x03
    132e:	ce 01       	movw	r24, r28
    1330:	01 96       	adiw	r24, 0x01	; 1
    1332:	0e 94 59 0a 	call	0x14b2	; 0x14b2 <__pack_f>
    1336:	04 c0       	rjmp	.+8      	; 0x1340 <__floatsisf+0xc4>
    1338:	60 e0       	ldi	r22, 0x00	; 0
    133a:	70 e0       	ldi	r23, 0x00	; 0
    133c:	80 e0       	ldi	r24, 0x00	; 0
    133e:	9f ec       	ldi	r25, 0xCF	; 207
    1340:	38 2f       	mov	r19, r24
    1342:	29 2f       	mov	r18, r25
    1344:	86 2f       	mov	r24, r22
    1346:	97 2f       	mov	r25, r23
    1348:	a3 2f       	mov	r26, r19
    134a:	b2 2f       	mov	r27, r18
    134c:	bc 01       	movw	r22, r24
    134e:	cd 01       	movw	r24, r26
    1350:	28 96       	adiw	r28, 0x08	; 8
    1352:	0f b6       	in	r0, 0x3f	; 63
    1354:	f8 94       	cli
    1356:	de bf       	out	0x3e, r29	; 62
    1358:	0f be       	out	0x3f, r0	; 63
    135a:	cd bf       	out	0x3d, r28	; 61
    135c:	df 91       	pop	r29
    135e:	cf 91       	pop	r28
    1360:	ff 90       	pop	r15
    1362:	ef 90       	pop	r14
    1364:	df 90       	pop	r13
    1366:	cf 90       	pop	r12
    1368:	08 95       	ret

0000136a <__fixsfsi>:
    136a:	ac e0       	ldi	r26, 0x0C	; 12
    136c:	b0 e0       	ldi	r27, 0x00	; 0
    136e:	eb eb       	ldi	r30, 0xBB	; 187
    1370:	f9 e0       	ldi	r31, 0x09	; 9
    1372:	0c 94 03 0c 	jmp	0x1806	; 0x1806 <__prologue_saves__+0x1c>
    1376:	dc 01       	movw	r26, r24
    1378:	cb 01       	movw	r24, r22
    137a:	89 83       	std	Y+1, r24	; 0x01
    137c:	9a 83       	std	Y+2, r25	; 0x02
    137e:	ab 83       	std	Y+3, r26	; 0x03
    1380:	bc 83       	std	Y+4, r27	; 0x04
    1382:	ce 01       	movw	r24, r28
    1384:	01 96       	adiw	r24, 0x01	; 1
    1386:	be 01       	movw	r22, r28
    1388:	6b 5f       	subi	r22, 0xFB	; 251
    138a:	7f 4f       	sbci	r23, 0xFF	; 255
    138c:	0e 94 30 0b 	call	0x1660	; 0x1660 <__unpack_f>
    1390:	8d 81       	ldd	r24, Y+5	; 0x05
    1392:	82 30       	cpi	r24, 0x02	; 2
    1394:	69 f1       	breq	.+90     	; 0x13f0 <__fixsfsi+0x86>
    1396:	82 30       	cpi	r24, 0x02	; 2
    1398:	58 f1       	brcs	.+86     	; 0x13f0 <__fixsfsi+0x86>
    139a:	84 30       	cpi	r24, 0x04	; 4
    139c:	39 f0       	breq	.+14     	; 0x13ac <__fixsfsi+0x42>
    139e:	2f 81       	ldd	r18, Y+7	; 0x07
    13a0:	38 85       	ldd	r19, Y+8	; 0x08
    13a2:	37 fd       	sbrc	r19, 7
    13a4:	25 c0       	rjmp	.+74     	; 0x13f0 <__fixsfsi+0x86>
    13a6:	2f 31       	cpi	r18, 0x1F	; 31
    13a8:	31 05       	cpc	r19, r1
    13aa:	44 f0       	brlt	.+16     	; 0x13bc <__fixsfsi+0x52>
    13ac:	8e 81       	ldd	r24, Y+6	; 0x06
    13ae:	88 23       	and	r24, r24
    13b0:	19 f1       	breq	.+70     	; 0x13f8 <__fixsfsi+0x8e>
    13b2:	00 e0       	ldi	r16, 0x00	; 0
    13b4:	10 e0       	ldi	r17, 0x00	; 0
    13b6:	20 e0       	ldi	r18, 0x00	; 0
    13b8:	30 e8       	ldi	r19, 0x80	; 128
    13ba:	22 c0       	rjmp	.+68     	; 0x1400 <__fixsfsi+0x96>
    13bc:	8e e1       	ldi	r24, 0x1E	; 30
    13be:	90 e0       	ldi	r25, 0x00	; 0
    13c0:	82 1b       	sub	r24, r18
    13c2:	93 0b       	sbc	r25, r19
    13c4:	09 85       	ldd	r16, Y+9	; 0x09
    13c6:	1a 85       	ldd	r17, Y+10	; 0x0a
    13c8:	2b 85       	ldd	r18, Y+11	; 0x0b
    13ca:	3c 85       	ldd	r19, Y+12	; 0x0c
    13cc:	04 c0       	rjmp	.+8      	; 0x13d6 <__fixsfsi+0x6c>
    13ce:	36 95       	lsr	r19
    13d0:	27 95       	ror	r18
    13d2:	17 95       	ror	r17
    13d4:	07 95       	ror	r16
    13d6:	8a 95       	dec	r24
    13d8:	d2 f7       	brpl	.-12     	; 0x13ce <__fixsfsi+0x64>
    13da:	8e 81       	ldd	r24, Y+6	; 0x06
    13dc:	88 23       	and	r24, r24
    13de:	81 f0       	breq	.+32     	; 0x1400 <__fixsfsi+0x96>
    13e0:	30 95       	com	r19
    13e2:	20 95       	com	r18
    13e4:	10 95       	com	r17
    13e6:	01 95       	neg	r16
    13e8:	1f 4f       	sbci	r17, 0xFF	; 255
    13ea:	2f 4f       	sbci	r18, 0xFF	; 255
    13ec:	3f 4f       	sbci	r19, 0xFF	; 255
    13ee:	08 c0       	rjmp	.+16     	; 0x1400 <__fixsfsi+0x96>
    13f0:	00 e0       	ldi	r16, 0x00	; 0
    13f2:	10 e0       	ldi	r17, 0x00	; 0
    13f4:	98 01       	movw	r18, r16
    13f6:	04 c0       	rjmp	.+8      	; 0x1400 <__fixsfsi+0x96>
    13f8:	0f ef       	ldi	r16, 0xFF	; 255
    13fa:	1f ef       	ldi	r17, 0xFF	; 255
    13fc:	2f ef       	ldi	r18, 0xFF	; 255
    13fe:	3f e7       	ldi	r19, 0x7F	; 127
    1400:	b8 01       	movw	r22, r16
    1402:	c9 01       	movw	r24, r18
    1404:	2c 96       	adiw	r28, 0x0c	; 12
    1406:	e4 e0       	ldi	r30, 0x04	; 4
    1408:	0c 94 1f 0c 	jmp	0x183e	; 0x183e <__epilogue_restores__+0x1c>

0000140c <__clzsi2>:
    140c:	cf 92       	push	r12
    140e:	df 92       	push	r13
    1410:	ef 92       	push	r14
    1412:	ff 92       	push	r15
    1414:	0f 93       	push	r16
    1416:	1f 93       	push	r17
    1418:	8b 01       	movw	r16, r22
    141a:	9c 01       	movw	r18, r24
    141c:	00 30       	cpi	r16, 0x00	; 0
    141e:	80 e0       	ldi	r24, 0x00	; 0
    1420:	18 07       	cpc	r17, r24
    1422:	81 e0       	ldi	r24, 0x01	; 1
    1424:	28 07       	cpc	r18, r24
    1426:	80 e0       	ldi	r24, 0x00	; 0
    1428:	38 07       	cpc	r19, r24
    142a:	50 f4       	brcc	.+20     	; 0x1440 <__clzsi2+0x34>
    142c:	0f 3f       	cpi	r16, 0xFF	; 255
    142e:	11 05       	cpc	r17, r1
    1430:	21 05       	cpc	r18, r1
    1432:	31 05       	cpc	r19, r1
    1434:	09 f0       	breq	.+2      	; 0x1438 <__clzsi2+0x2c>
    1436:	88 f4       	brcc	.+34     	; 0x145a <__clzsi2+0x4e>
    1438:	80 e0       	ldi	r24, 0x00	; 0
    143a:	90 e0       	ldi	r25, 0x00	; 0
    143c:	dc 01       	movw	r26, r24
    143e:	16 c0       	rjmp	.+44     	; 0x146c <__clzsi2+0x60>
    1440:	00 30       	cpi	r16, 0x00	; 0
    1442:	e0 e0       	ldi	r30, 0x00	; 0
    1444:	1e 07       	cpc	r17, r30
    1446:	e0 e0       	ldi	r30, 0x00	; 0
    1448:	2e 07       	cpc	r18, r30
    144a:	e1 e0       	ldi	r30, 0x01	; 1
    144c:	3e 07       	cpc	r19, r30
    144e:	50 f4       	brcc	.+20     	; 0x1464 <__clzsi2+0x58>
    1450:	80 e1       	ldi	r24, 0x10	; 16
    1452:	90 e0       	ldi	r25, 0x00	; 0
    1454:	a0 e0       	ldi	r26, 0x00	; 0
    1456:	b0 e0       	ldi	r27, 0x00	; 0
    1458:	09 c0       	rjmp	.+18     	; 0x146c <__clzsi2+0x60>
    145a:	88 e0       	ldi	r24, 0x08	; 8
    145c:	90 e0       	ldi	r25, 0x00	; 0
    145e:	a0 e0       	ldi	r26, 0x00	; 0
    1460:	b0 e0       	ldi	r27, 0x00	; 0
    1462:	04 c0       	rjmp	.+8      	; 0x146c <__clzsi2+0x60>
    1464:	88 e1       	ldi	r24, 0x18	; 24
    1466:	90 e0       	ldi	r25, 0x00	; 0
    1468:	a0 e0       	ldi	r26, 0x00	; 0
    146a:	b0 e0       	ldi	r27, 0x00	; 0
    146c:	40 e2       	ldi	r20, 0x20	; 32
    146e:	50 e0       	ldi	r21, 0x00	; 0
    1470:	60 e0       	ldi	r22, 0x00	; 0
    1472:	70 e0       	ldi	r23, 0x00	; 0
    1474:	48 1b       	sub	r20, r24
    1476:	59 0b       	sbc	r21, r25
    1478:	6a 0b       	sbc	r22, r26
    147a:	7b 0b       	sbc	r23, r27
    147c:	68 01       	movw	r12, r16
    147e:	79 01       	movw	r14, r18
    1480:	04 c0       	rjmp	.+8      	; 0x148a <__clzsi2+0x7e>
    1482:	f6 94       	lsr	r15
    1484:	e7 94       	ror	r14
    1486:	d7 94       	ror	r13
    1488:	c7 94       	ror	r12
    148a:	8a 95       	dec	r24
    148c:	d2 f7       	brpl	.-12     	; 0x1482 <__clzsi2+0x76>
    148e:	d7 01       	movw	r26, r14
    1490:	c6 01       	movw	r24, r12
    1492:	87 5f       	subi	r24, 0xF7	; 247
    1494:	9c 4f       	sbci	r25, 0xFC	; 252
    1496:	fc 01       	movw	r30, r24
    1498:	80 81       	ld	r24, Z
    149a:	48 1b       	sub	r20, r24
    149c:	51 09       	sbc	r21, r1
    149e:	61 09       	sbc	r22, r1
    14a0:	71 09       	sbc	r23, r1
    14a2:	ca 01       	movw	r24, r20
    14a4:	1f 91       	pop	r17
    14a6:	0f 91       	pop	r16
    14a8:	ff 90       	pop	r15
    14aa:	ef 90       	pop	r14
    14ac:	df 90       	pop	r13
    14ae:	cf 90       	pop	r12
    14b0:	08 95       	ret

000014b2 <__pack_f>:
    14b2:	cf 92       	push	r12
    14b4:	df 92       	push	r13
    14b6:	ef 92       	push	r14
    14b8:	ff 92       	push	r15
    14ba:	0f 93       	push	r16
    14bc:	1f 93       	push	r17
    14be:	dc 01       	movw	r26, r24
    14c0:	14 96       	adiw	r26, 0x04	; 4
    14c2:	4d 91       	ld	r20, X+
    14c4:	5d 91       	ld	r21, X+
    14c6:	6d 91       	ld	r22, X+
    14c8:	7c 91       	ld	r23, X
    14ca:	17 97       	sbiw	r26, 0x07	; 7
    14cc:	11 96       	adiw	r26, 0x01	; 1
    14ce:	ec 91       	ld	r30, X
    14d0:	11 97       	sbiw	r26, 0x01	; 1
    14d2:	8c 91       	ld	r24, X
    14d4:	82 30       	cpi	r24, 0x02	; 2
    14d6:	20 f4       	brcc	.+8      	; 0x14e0 <__pack_f+0x2e>
    14d8:	60 61       	ori	r22, 0x10	; 16
    14da:	8f ef       	ldi	r24, 0xFF	; 255
    14dc:	90 e0       	ldi	r25, 0x00	; 0
    14de:	a5 c0       	rjmp	.+330    	; 0x162a <__pack_f+0x178>
    14e0:	84 30       	cpi	r24, 0x04	; 4
    14e2:	09 f4       	brne	.+2      	; 0x14e6 <__pack_f+0x34>
    14e4:	9d c0       	rjmp	.+314    	; 0x1620 <__pack_f+0x16e>
    14e6:	82 30       	cpi	r24, 0x02	; 2
    14e8:	09 f4       	brne	.+2      	; 0x14ec <__pack_f+0x3a>
    14ea:	94 c0       	rjmp	.+296    	; 0x1614 <__pack_f+0x162>
    14ec:	41 15       	cp	r20, r1
    14ee:	51 05       	cpc	r21, r1
    14f0:	61 05       	cpc	r22, r1
    14f2:	71 05       	cpc	r23, r1
    14f4:	09 f4       	brne	.+2      	; 0x14f8 <__pack_f+0x46>
    14f6:	91 c0       	rjmp	.+290    	; 0x161a <__pack_f+0x168>
    14f8:	12 96       	adiw	r26, 0x02	; 2
    14fa:	8d 91       	ld	r24, X+
    14fc:	9c 91       	ld	r25, X
    14fe:	13 97       	sbiw	r26, 0x03	; 3
    1500:	2f ef       	ldi	r18, 0xFF	; 255
    1502:	82 38       	cpi	r24, 0x82	; 130
    1504:	92 07       	cpc	r25, r18
    1506:	0c f0       	brlt	.+2      	; 0x150a <__pack_f+0x58>
    1508:	59 c0       	rjmp	.+178    	; 0x15bc <__pack_f+0x10a>
    150a:	22 e8       	ldi	r18, 0x82	; 130
    150c:	3f ef       	ldi	r19, 0xFF	; 255
    150e:	28 1b       	sub	r18, r24
    1510:	39 0b       	sbc	r19, r25
    1512:	2a 31       	cpi	r18, 0x1A	; 26
    1514:	31 05       	cpc	r19, r1
    1516:	64 f5       	brge	.+88     	; 0x1570 <__pack_f+0xbe>
    1518:	6a 01       	movw	r12, r20
    151a:	7b 01       	movw	r14, r22
    151c:	02 2e       	mov	r0, r18
    151e:	04 c0       	rjmp	.+8      	; 0x1528 <__pack_f+0x76>
    1520:	f6 94       	lsr	r15
    1522:	e7 94       	ror	r14
    1524:	d7 94       	ror	r13
    1526:	c7 94       	ror	r12
    1528:	0a 94       	dec	r0
    152a:	d2 f7       	brpl	.-12     	; 0x1520 <__pack_f+0x6e>
    152c:	81 e0       	ldi	r24, 0x01	; 1
    152e:	90 e0       	ldi	r25, 0x00	; 0
    1530:	a0 e0       	ldi	r26, 0x00	; 0
    1532:	b0 e0       	ldi	r27, 0x00	; 0
    1534:	04 c0       	rjmp	.+8      	; 0x153e <__pack_f+0x8c>
    1536:	88 0f       	add	r24, r24
    1538:	99 1f       	adc	r25, r25
    153a:	aa 1f       	adc	r26, r26
    153c:	bb 1f       	adc	r27, r27
    153e:	2a 95       	dec	r18
    1540:	d2 f7       	brpl	.-12     	; 0x1536 <__pack_f+0x84>
    1542:	01 97       	sbiw	r24, 0x01	; 1
    1544:	a1 09       	sbc	r26, r1
    1546:	b1 09       	sbc	r27, r1
    1548:	84 23       	and	r24, r20
    154a:	95 23       	and	r25, r21
    154c:	a6 23       	and	r26, r22
    154e:	b7 23       	and	r27, r23
    1550:	41 e0       	ldi	r20, 0x01	; 1
    1552:	50 e0       	ldi	r21, 0x00	; 0
    1554:	60 e0       	ldi	r22, 0x00	; 0
    1556:	70 e0       	ldi	r23, 0x00	; 0
    1558:	00 97       	sbiw	r24, 0x00	; 0
    155a:	a1 05       	cpc	r26, r1
    155c:	b1 05       	cpc	r27, r1
    155e:	19 f4       	brne	.+6      	; 0x1566 <__pack_f+0xb4>
    1560:	40 e0       	ldi	r20, 0x00	; 0
    1562:	50 e0       	ldi	r21, 0x00	; 0
    1564:	ba 01       	movw	r22, r20
    1566:	4c 29       	or	r20, r12
    1568:	5d 29       	or	r21, r13
    156a:	6e 29       	or	r22, r14
    156c:	7f 29       	or	r23, r15
    156e:	03 c0       	rjmp	.+6      	; 0x1576 <__pack_f+0xc4>
    1570:	40 e0       	ldi	r20, 0x00	; 0
    1572:	50 e0       	ldi	r21, 0x00	; 0
    1574:	ba 01       	movw	r22, r20
    1576:	db 01       	movw	r26, r22
    1578:	ca 01       	movw	r24, r20
    157a:	8f 77       	andi	r24, 0x7F	; 127
    157c:	90 70       	andi	r25, 0x00	; 0
    157e:	a0 70       	andi	r26, 0x00	; 0
    1580:	b0 70       	andi	r27, 0x00	; 0
    1582:	80 34       	cpi	r24, 0x40	; 64
    1584:	91 05       	cpc	r25, r1
    1586:	a1 05       	cpc	r26, r1
    1588:	b1 05       	cpc	r27, r1
    158a:	39 f4       	brne	.+14     	; 0x159a <__pack_f+0xe8>
    158c:	47 ff       	sbrs	r20, 7
    158e:	09 c0       	rjmp	.+18     	; 0x15a2 <__pack_f+0xf0>
    1590:	40 5c       	subi	r20, 0xC0	; 192
    1592:	5f 4f       	sbci	r21, 0xFF	; 255
    1594:	6f 4f       	sbci	r22, 0xFF	; 255
    1596:	7f 4f       	sbci	r23, 0xFF	; 255
    1598:	04 c0       	rjmp	.+8      	; 0x15a2 <__pack_f+0xf0>
    159a:	41 5c       	subi	r20, 0xC1	; 193
    159c:	5f 4f       	sbci	r21, 0xFF	; 255
    159e:	6f 4f       	sbci	r22, 0xFF	; 255
    15a0:	7f 4f       	sbci	r23, 0xFF	; 255
    15a2:	81 e0       	ldi	r24, 0x01	; 1
    15a4:	90 e0       	ldi	r25, 0x00	; 0
    15a6:	40 30       	cpi	r20, 0x00	; 0
    15a8:	20 e0       	ldi	r18, 0x00	; 0
    15aa:	52 07       	cpc	r21, r18
    15ac:	20 e0       	ldi	r18, 0x00	; 0
    15ae:	62 07       	cpc	r22, r18
    15b0:	20 e4       	ldi	r18, 0x40	; 64
    15b2:	72 07       	cpc	r23, r18
    15b4:	38 f5       	brcc	.+78     	; 0x1604 <__pack_f+0x152>
    15b6:	80 e0       	ldi	r24, 0x00	; 0
    15b8:	90 e0       	ldi	r25, 0x00	; 0
    15ba:	24 c0       	rjmp	.+72     	; 0x1604 <__pack_f+0x152>
    15bc:	80 38       	cpi	r24, 0x80	; 128
    15be:	91 05       	cpc	r25, r1
    15c0:	7c f5       	brge	.+94     	; 0x1620 <__pack_f+0x16e>
    15c2:	8a 01       	movw	r16, r20
    15c4:	9b 01       	movw	r18, r22
    15c6:	0f 77       	andi	r16, 0x7F	; 127
    15c8:	10 70       	andi	r17, 0x00	; 0
    15ca:	20 70       	andi	r18, 0x00	; 0
    15cc:	30 70       	andi	r19, 0x00	; 0
    15ce:	00 34       	cpi	r16, 0x40	; 64
    15d0:	11 05       	cpc	r17, r1
    15d2:	21 05       	cpc	r18, r1
    15d4:	31 05       	cpc	r19, r1
    15d6:	39 f4       	brne	.+14     	; 0x15e6 <__pack_f+0x134>
    15d8:	47 ff       	sbrs	r20, 7
    15da:	09 c0       	rjmp	.+18     	; 0x15ee <__pack_f+0x13c>
    15dc:	40 5c       	subi	r20, 0xC0	; 192
    15de:	5f 4f       	sbci	r21, 0xFF	; 255
    15e0:	6f 4f       	sbci	r22, 0xFF	; 255
    15e2:	7f 4f       	sbci	r23, 0xFF	; 255
    15e4:	04 c0       	rjmp	.+8      	; 0x15ee <__pack_f+0x13c>
    15e6:	41 5c       	subi	r20, 0xC1	; 193
    15e8:	5f 4f       	sbci	r21, 0xFF	; 255
    15ea:	6f 4f       	sbci	r22, 0xFF	; 255
    15ec:	7f 4f       	sbci	r23, 0xFF	; 255
    15ee:	77 fd       	sbrc	r23, 7
    15f0:	03 c0       	rjmp	.+6      	; 0x15f8 <__pack_f+0x146>
    15f2:	81 58       	subi	r24, 0x81	; 129
    15f4:	9f 4f       	sbci	r25, 0xFF	; 255
    15f6:	06 c0       	rjmp	.+12     	; 0x1604 <__pack_f+0x152>
    15f8:	76 95       	lsr	r23
    15fa:	67 95       	ror	r22
    15fc:	57 95       	ror	r21
    15fe:	47 95       	ror	r20
    1600:	80 58       	subi	r24, 0x80	; 128
    1602:	9f 4f       	sbci	r25, 0xFF	; 255
    1604:	97 e0       	ldi	r25, 0x07	; 7
    1606:	76 95       	lsr	r23
    1608:	67 95       	ror	r22
    160a:	57 95       	ror	r21
    160c:	47 95       	ror	r20
    160e:	9a 95       	dec	r25
    1610:	d1 f7       	brne	.-12     	; 0x1606 <__pack_f+0x154>
    1612:	0b c0       	rjmp	.+22     	; 0x162a <__pack_f+0x178>
    1614:	80 e0       	ldi	r24, 0x00	; 0
    1616:	90 e0       	ldi	r25, 0x00	; 0
    1618:	05 c0       	rjmp	.+10     	; 0x1624 <__pack_f+0x172>
    161a:	80 e0       	ldi	r24, 0x00	; 0
    161c:	90 e0       	ldi	r25, 0x00	; 0
    161e:	05 c0       	rjmp	.+10     	; 0x162a <__pack_f+0x178>
    1620:	8f ef       	ldi	r24, 0xFF	; 255
    1622:	90 e0       	ldi	r25, 0x00	; 0
    1624:	40 e0       	ldi	r20, 0x00	; 0
    1626:	50 e0       	ldi	r21, 0x00	; 0
    1628:	ba 01       	movw	r22, r20
    162a:	98 2f       	mov	r25, r24
    162c:	97 95       	ror	r25
    162e:	99 27       	eor	r25, r25
    1630:	97 95       	ror	r25
    1632:	a6 2f       	mov	r26, r22
    1634:	af 77       	andi	r26, 0x7F	; 127
    1636:	e7 95       	ror	r30
    1638:	ee 27       	eor	r30, r30
    163a:	e7 95       	ror	r30
    163c:	86 95       	lsr	r24
    163e:	3a 2f       	mov	r19, r26
    1640:	39 2b       	or	r19, r25
    1642:	28 2f       	mov	r18, r24
    1644:	2e 2b       	or	r18, r30
    1646:	84 2f       	mov	r24, r20
    1648:	95 2f       	mov	r25, r21
    164a:	a3 2f       	mov	r26, r19
    164c:	b2 2f       	mov	r27, r18
    164e:	bc 01       	movw	r22, r24
    1650:	cd 01       	movw	r24, r26
    1652:	1f 91       	pop	r17
    1654:	0f 91       	pop	r16
    1656:	ff 90       	pop	r15
    1658:	ef 90       	pop	r14
    165a:	df 90       	pop	r13
    165c:	cf 90       	pop	r12
    165e:	08 95       	ret

00001660 <__unpack_f>:
    1660:	dc 01       	movw	r26, r24
    1662:	fb 01       	movw	r30, r22
    1664:	4c 91       	ld	r20, X
    1666:	11 96       	adiw	r26, 0x01	; 1
    1668:	5c 91       	ld	r21, X
    166a:	11 97       	sbiw	r26, 0x01	; 1
    166c:	12 96       	adiw	r26, 0x02	; 2
    166e:	8c 91       	ld	r24, X
    1670:	12 97       	sbiw	r26, 0x02	; 2
    1672:	68 2f       	mov	r22, r24
    1674:	6f 77       	andi	r22, 0x7F	; 127
    1676:	70 e0       	ldi	r23, 0x00	; 0
    1678:	98 2f       	mov	r25, r24
    167a:	99 1f       	adc	r25, r25
    167c:	99 27       	eor	r25, r25
    167e:	99 1f       	adc	r25, r25
    1680:	13 96       	adiw	r26, 0x03	; 3
    1682:	2c 91       	ld	r18, X
    1684:	13 97       	sbiw	r26, 0x03	; 3
    1686:	82 2f       	mov	r24, r18
    1688:	88 0f       	add	r24, r24
    168a:	89 2b       	or	r24, r25
    168c:	90 e0       	ldi	r25, 0x00	; 0
    168e:	22 1f       	adc	r18, r18
    1690:	22 27       	eor	r18, r18
    1692:	22 1f       	adc	r18, r18
    1694:	21 83       	std	Z+1, r18	; 0x01
    1696:	00 97       	sbiw	r24, 0x00	; 0
    1698:	39 f5       	brne	.+78     	; 0x16e8 <__unpack_f+0x88>
    169a:	41 15       	cp	r20, r1
    169c:	51 05       	cpc	r21, r1
    169e:	61 05       	cpc	r22, r1
    16a0:	71 05       	cpc	r23, r1
    16a2:	11 f4       	brne	.+4      	; 0x16a8 <__unpack_f+0x48>
    16a4:	82 e0       	ldi	r24, 0x02	; 2
    16a6:	29 c0       	rjmp	.+82     	; 0x16fa <__unpack_f+0x9a>
    16a8:	82 e8       	ldi	r24, 0x82	; 130
    16aa:	9f ef       	ldi	r25, 0xFF	; 255
    16ac:	93 83       	std	Z+3, r25	; 0x03
    16ae:	82 83       	std	Z+2, r24	; 0x02
    16b0:	27 e0       	ldi	r18, 0x07	; 7
    16b2:	44 0f       	add	r20, r20
    16b4:	55 1f       	adc	r21, r21
    16b6:	66 1f       	adc	r22, r22
    16b8:	77 1f       	adc	r23, r23
    16ba:	2a 95       	dec	r18
    16bc:	d1 f7       	brne	.-12     	; 0x16b2 <__unpack_f+0x52>
    16be:	83 e0       	ldi	r24, 0x03	; 3
    16c0:	80 83       	st	Z, r24
    16c2:	09 c0       	rjmp	.+18     	; 0x16d6 <__unpack_f+0x76>
    16c4:	44 0f       	add	r20, r20
    16c6:	55 1f       	adc	r21, r21
    16c8:	66 1f       	adc	r22, r22
    16ca:	77 1f       	adc	r23, r23
    16cc:	82 81       	ldd	r24, Z+2	; 0x02
    16ce:	93 81       	ldd	r25, Z+3	; 0x03
    16d0:	01 97       	sbiw	r24, 0x01	; 1
    16d2:	93 83       	std	Z+3, r25	; 0x03
    16d4:	82 83       	std	Z+2, r24	; 0x02
    16d6:	40 30       	cpi	r20, 0x00	; 0
    16d8:	80 e0       	ldi	r24, 0x00	; 0
    16da:	58 07       	cpc	r21, r24
    16dc:	80 e0       	ldi	r24, 0x00	; 0
    16de:	68 07       	cpc	r22, r24
    16e0:	80 e4       	ldi	r24, 0x40	; 64
    16e2:	78 07       	cpc	r23, r24
    16e4:	78 f3       	brcs	.-34     	; 0x16c4 <__unpack_f+0x64>
    16e6:	20 c0       	rjmp	.+64     	; 0x1728 <__unpack_f+0xc8>
    16e8:	8f 3f       	cpi	r24, 0xFF	; 255
    16ea:	91 05       	cpc	r25, r1
    16ec:	79 f4       	brne	.+30     	; 0x170c <__unpack_f+0xac>
    16ee:	41 15       	cp	r20, r1
    16f0:	51 05       	cpc	r21, r1
    16f2:	61 05       	cpc	r22, r1
    16f4:	71 05       	cpc	r23, r1
    16f6:	19 f4       	brne	.+6      	; 0x16fe <__unpack_f+0x9e>
    16f8:	84 e0       	ldi	r24, 0x04	; 4
    16fa:	80 83       	st	Z, r24
    16fc:	08 95       	ret
    16fe:	64 ff       	sbrs	r22, 4
    1700:	03 c0       	rjmp	.+6      	; 0x1708 <__unpack_f+0xa8>
    1702:	81 e0       	ldi	r24, 0x01	; 1
    1704:	80 83       	st	Z, r24
    1706:	10 c0       	rjmp	.+32     	; 0x1728 <__unpack_f+0xc8>
    1708:	10 82       	st	Z, r1
    170a:	0e c0       	rjmp	.+28     	; 0x1728 <__unpack_f+0xc8>
    170c:	8f 57       	subi	r24, 0x7F	; 127
    170e:	90 40       	sbci	r25, 0x00	; 0
    1710:	93 83       	std	Z+3, r25	; 0x03
    1712:	82 83       	std	Z+2, r24	; 0x02
    1714:	83 e0       	ldi	r24, 0x03	; 3
    1716:	80 83       	st	Z, r24
    1718:	87 e0       	ldi	r24, 0x07	; 7
    171a:	44 0f       	add	r20, r20
    171c:	55 1f       	adc	r21, r21
    171e:	66 1f       	adc	r22, r22
    1720:	77 1f       	adc	r23, r23
    1722:	8a 95       	dec	r24
    1724:	d1 f7       	brne	.-12     	; 0x171a <__unpack_f+0xba>
    1726:	70 64       	ori	r23, 0x40	; 64
    1728:	44 83       	std	Z+4, r20	; 0x04
    172a:	55 83       	std	Z+5, r21	; 0x05
    172c:	66 83       	std	Z+6, r22	; 0x06
    172e:	77 83       	std	Z+7, r23	; 0x07
    1730:	08 95       	ret

00001732 <main>:
#include "queue.h"
#include "link.h"
#include "timer_task.h"
#include "ADC.h"

int main() {
    1732:	cf 93       	push	r28
    1734:	df 93       	push	r29
    1736:	cd b7       	in	r28, 0x3d	; 61
    1738:	de b7       	in	r29, 0x3e	; 62
    173a:	2a 97       	sbiw	r28, 0x0a	; 10
    173c:	0f b6       	in	r0, 0x3f	; 63
    173e:	f8 94       	cli
    1740:	de bf       	out	0x3e, r29	; 62
    1742:	0f be       	out	0x3f, r0	; 63
    1744:	cd bf       	out	0x3d, r28	; 61
	int 	tag;
	struct 	task task;

	uart_init();
    1746:	0e 94 ee 06 	call	0xddc	; 0xddc <uart_init>
	task_init();
    174a:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <task_init>
	timer_init();
    174e:	0e 94 cb 04 	call	0x996	; 0x996 <timer_init>
	adc_init();
    1752:	0e 94 c7 07 	call	0xf8e	; 0xf8e <adc_init>
	led_init();
    1756:	0e 94 f7 02 	call	0x5ee	; 0x5ee <led_init>

	printf("$ ");
    175a:	0f 92       	push	r0
    175c:	0f 92       	push	r0
    175e:	82 e2       	ldi	r24, 0x22	; 34
    1760:	92 e0       	ldi	r25, 0x02	; 2
    1762:	ed b7       	in	r30, 0x3d	; 61
    1764:	fe b7       	in	r31, 0x3e	; 62
    1766:	92 83       	std	Z+2, r25	; 0x02
    1768:	81 83       	std	Z+1, r24	; 0x01
    176a:	0e 94 17 0e 	call	0x1c2e	; 0x1c2e <printf>
    176e:	0f 90       	pop	r0
    1770:	0f 90       	pop	r0

	while(1) {
	int i;
	for(i = 0;i < 3;i++) {
    1772:	00 e0       	ldi	r16, 0x00	; 0
    1774:	10 e0       	ldi	r17, 0x00	; 0
		cli();
    1776:	f8 94       	cli
		tag = task_delete(&task);
    1778:	ce 01       	movw	r24, r28
    177a:	01 96       	adiw	r24, 0x01	; 1
    177c:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <task_delete>
		sei();
    1780:	78 94       	sei
		if(tag)
    1782:	00 97       	sbiw	r24, 0x00	; 0
    1784:	29 f0       	breq	.+10     	; 0x1790 <main+0x5e>
			(*(task.fun))(task.arg);
    1786:	e9 81       	ldd	r30, Y+1	; 0x01
    1788:	fa 81       	ldd	r31, Y+2	; 0x02
    178a:	ce 01       	movw	r24, r28
    178c:	03 96       	adiw	r24, 0x03	; 3
    178e:	19 95       	eicall

	printf("$ ");

	while(1) {
	int i;
	for(i = 0;i < 3;i++) {
    1790:	0f 5f       	subi	r16, 0xFF	; 255
    1792:	1f 4f       	sbci	r17, 0xFF	; 255
    1794:	03 30       	cpi	r16, 0x03	; 3
    1796:	11 05       	cpc	r17, r1
    1798:	64 f7       	brge	.-40     	; 0x1772 <main+0x40>
    179a:	ed cf       	rjmp	.-38     	; 0x1776 <main+0x44>

0000179c <__divmodhi4>:
    179c:	97 fb       	bst	r25, 7
    179e:	09 2e       	mov	r0, r25
    17a0:	07 26       	eor	r0, r23
    17a2:	0a d0       	rcall	.+20     	; 0x17b8 <__divmodhi4_neg1>
    17a4:	77 fd       	sbrc	r23, 7
    17a6:	04 d0       	rcall	.+8      	; 0x17b0 <__divmodhi4_neg2>
    17a8:	0c d0       	rcall	.+24     	; 0x17c2 <__udivmodhi4>
    17aa:	06 d0       	rcall	.+12     	; 0x17b8 <__divmodhi4_neg1>
    17ac:	00 20       	and	r0, r0
    17ae:	1a f4       	brpl	.+6      	; 0x17b6 <__divmodhi4_exit>

000017b0 <__divmodhi4_neg2>:
    17b0:	70 95       	com	r23
    17b2:	61 95       	neg	r22
    17b4:	7f 4f       	sbci	r23, 0xFF	; 255

000017b6 <__divmodhi4_exit>:
    17b6:	08 95       	ret

000017b8 <__divmodhi4_neg1>:
    17b8:	f6 f7       	brtc	.-4      	; 0x17b6 <__divmodhi4_exit>
    17ba:	90 95       	com	r25
    17bc:	81 95       	neg	r24
    17be:	9f 4f       	sbci	r25, 0xFF	; 255
    17c0:	08 95       	ret

000017c2 <__udivmodhi4>:
    17c2:	aa 1b       	sub	r26, r26
    17c4:	bb 1b       	sub	r27, r27
    17c6:	51 e1       	ldi	r21, 0x11	; 17
    17c8:	07 c0       	rjmp	.+14     	; 0x17d8 <__udivmodhi4_ep>

000017ca <__udivmodhi4_loop>:
    17ca:	aa 1f       	adc	r26, r26
    17cc:	bb 1f       	adc	r27, r27
    17ce:	a6 17       	cp	r26, r22
    17d0:	b7 07       	cpc	r27, r23
    17d2:	10 f0       	brcs	.+4      	; 0x17d8 <__udivmodhi4_ep>
    17d4:	a6 1b       	sub	r26, r22
    17d6:	b7 0b       	sbc	r27, r23

000017d8 <__udivmodhi4_ep>:
    17d8:	88 1f       	adc	r24, r24
    17da:	99 1f       	adc	r25, r25
    17dc:	5a 95       	dec	r21
    17de:	a9 f7       	brne	.-22     	; 0x17ca <__udivmodhi4_loop>
    17e0:	80 95       	com	r24
    17e2:	90 95       	com	r25
    17e4:	bc 01       	movw	r22, r24
    17e6:	cd 01       	movw	r24, r26
    17e8:	08 95       	ret

000017ea <__prologue_saves__>:
    17ea:	2f 92       	push	r2
    17ec:	3f 92       	push	r3
    17ee:	4f 92       	push	r4
    17f0:	5f 92       	push	r5
    17f2:	6f 92       	push	r6
    17f4:	7f 92       	push	r7
    17f6:	8f 92       	push	r8
    17f8:	9f 92       	push	r9
    17fa:	af 92       	push	r10
    17fc:	bf 92       	push	r11
    17fe:	cf 92       	push	r12
    1800:	df 92       	push	r13
    1802:	ef 92       	push	r14
    1804:	ff 92       	push	r15
    1806:	0f 93       	push	r16
    1808:	1f 93       	push	r17
    180a:	cf 93       	push	r28
    180c:	df 93       	push	r29
    180e:	cd b7       	in	r28, 0x3d	; 61
    1810:	de b7       	in	r29, 0x3e	; 62
    1812:	ca 1b       	sub	r28, r26
    1814:	db 0b       	sbc	r29, r27
    1816:	0f b6       	in	r0, 0x3f	; 63
    1818:	f8 94       	cli
    181a:	de bf       	out	0x3e, r29	; 62
    181c:	0f be       	out	0x3f, r0	; 63
    181e:	cd bf       	out	0x3d, r28	; 61
    1820:	19 94       	eijmp

00001822 <__epilogue_restores__>:
    1822:	2a 88       	ldd	r2, Y+18	; 0x12
    1824:	39 88       	ldd	r3, Y+17	; 0x11
    1826:	48 88       	ldd	r4, Y+16	; 0x10
    1828:	5f 84       	ldd	r5, Y+15	; 0x0f
    182a:	6e 84       	ldd	r6, Y+14	; 0x0e
    182c:	7d 84       	ldd	r7, Y+13	; 0x0d
    182e:	8c 84       	ldd	r8, Y+12	; 0x0c
    1830:	9b 84       	ldd	r9, Y+11	; 0x0b
    1832:	aa 84       	ldd	r10, Y+10	; 0x0a
    1834:	b9 84       	ldd	r11, Y+9	; 0x09
    1836:	c8 84       	ldd	r12, Y+8	; 0x08
    1838:	df 80       	ldd	r13, Y+7	; 0x07
    183a:	ee 80       	ldd	r14, Y+6	; 0x06
    183c:	fd 80       	ldd	r15, Y+5	; 0x05
    183e:	0c 81       	ldd	r16, Y+4	; 0x04
    1840:	1b 81       	ldd	r17, Y+3	; 0x03
    1842:	aa 81       	ldd	r26, Y+2	; 0x02
    1844:	b9 81       	ldd	r27, Y+1	; 0x01
    1846:	ce 0f       	add	r28, r30
    1848:	d1 1d       	adc	r29, r1
    184a:	0f b6       	in	r0, 0x3f	; 63
    184c:	f8 94       	cli
    184e:	de bf       	out	0x3e, r29	; 62
    1850:	0f be       	out	0x3f, r0	; 63
    1852:	cd bf       	out	0x3d, r28	; 61
    1854:	ed 01       	movw	r28, r26
    1856:	08 95       	ret

00001858 <malloc>:
    1858:	cf 93       	push	r28
    185a:	df 93       	push	r29
    185c:	ac 01       	movw	r20, r24
    185e:	82 30       	cpi	r24, 0x02	; 2
    1860:	91 05       	cpc	r25, r1
    1862:	10 f4       	brcc	.+4      	; 0x1868 <malloc+0x10>
    1864:	42 e0       	ldi	r20, 0x02	; 2
    1866:	50 e0       	ldi	r21, 0x00	; 0
    1868:	e0 91 4a 05 	lds	r30, 0x054A
    186c:	f0 91 4b 05 	lds	r31, 0x054B
    1870:	20 e0       	ldi	r18, 0x00	; 0
    1872:	30 e0       	ldi	r19, 0x00	; 0
    1874:	a0 e0       	ldi	r26, 0x00	; 0
    1876:	b0 e0       	ldi	r27, 0x00	; 0
    1878:	24 c0       	rjmp	.+72     	; 0x18c2 <malloc+0x6a>
    187a:	80 81       	ld	r24, Z
    187c:	91 81       	ldd	r25, Z+1	; 0x01
    187e:	84 17       	cp	r24, r20
    1880:	95 07       	cpc	r25, r21
    1882:	d0 f0       	brcs	.+52     	; 0x18b8 <malloc+0x60>
    1884:	84 17       	cp	r24, r20
    1886:	95 07       	cpc	r25, r21
    1888:	71 f4       	brne	.+28     	; 0x18a6 <malloc+0x4e>
    188a:	82 81       	ldd	r24, Z+2	; 0x02
    188c:	93 81       	ldd	r25, Z+3	; 0x03
    188e:	10 97       	sbiw	r26, 0x00	; 0
    1890:	29 f0       	breq	.+10     	; 0x189c <malloc+0x44>
    1892:	13 96       	adiw	r26, 0x03	; 3
    1894:	9c 93       	st	X, r25
    1896:	8e 93       	st	-X, r24
    1898:	12 97       	sbiw	r26, 0x02	; 2
    189a:	2c c0       	rjmp	.+88     	; 0x18f4 <malloc+0x9c>
    189c:	90 93 4b 05 	sts	0x054B, r25
    18a0:	80 93 4a 05 	sts	0x054A, r24
    18a4:	27 c0       	rjmp	.+78     	; 0x18f4 <malloc+0x9c>
    18a6:	21 15       	cp	r18, r1
    18a8:	31 05       	cpc	r19, r1
    18aa:	19 f0       	breq	.+6      	; 0x18b2 <malloc+0x5a>
    18ac:	82 17       	cp	r24, r18
    18ae:	93 07       	cpc	r25, r19
    18b0:	18 f4       	brcc	.+6      	; 0x18b8 <malloc+0x60>
    18b2:	9c 01       	movw	r18, r24
    18b4:	bd 01       	movw	r22, r26
    18b6:	ef 01       	movw	r28, r30
    18b8:	92 81       	ldd	r25, Z+2	; 0x02
    18ba:	83 81       	ldd	r24, Z+3	; 0x03
    18bc:	df 01       	movw	r26, r30
    18be:	e9 2f       	mov	r30, r25
    18c0:	f8 2f       	mov	r31, r24
    18c2:	30 97       	sbiw	r30, 0x00	; 0
    18c4:	d1 f6       	brne	.-76     	; 0x187a <malloc+0x22>
    18c6:	21 15       	cp	r18, r1
    18c8:	31 05       	cpc	r19, r1
    18ca:	f9 f0       	breq	.+62     	; 0x190a <malloc+0xb2>
    18cc:	c9 01       	movw	r24, r18
    18ce:	84 1b       	sub	r24, r20
    18d0:	95 0b       	sbc	r25, r21
    18d2:	84 30       	cpi	r24, 0x04	; 4
    18d4:	91 05       	cpc	r25, r1
    18d6:	80 f4       	brcc	.+32     	; 0x18f8 <malloc+0xa0>
    18d8:	8a 81       	ldd	r24, Y+2	; 0x02
    18da:	9b 81       	ldd	r25, Y+3	; 0x03
    18dc:	61 15       	cp	r22, r1
    18de:	71 05       	cpc	r23, r1
    18e0:	21 f0       	breq	.+8      	; 0x18ea <malloc+0x92>
    18e2:	fb 01       	movw	r30, r22
    18e4:	93 83       	std	Z+3, r25	; 0x03
    18e6:	82 83       	std	Z+2, r24	; 0x02
    18e8:	04 c0       	rjmp	.+8      	; 0x18f2 <malloc+0x9a>
    18ea:	90 93 4b 05 	sts	0x054B, r25
    18ee:	80 93 4a 05 	sts	0x054A, r24
    18f2:	fe 01       	movw	r30, r28
    18f4:	32 96       	adiw	r30, 0x02	; 2
    18f6:	42 c0       	rjmp	.+132    	; 0x197c <malloc+0x124>
    18f8:	fe 01       	movw	r30, r28
    18fa:	e8 0f       	add	r30, r24
    18fc:	f9 1f       	adc	r31, r25
    18fe:	41 93       	st	Z+, r20
    1900:	51 93       	st	Z+, r21
    1902:	02 97       	sbiw	r24, 0x02	; 2
    1904:	99 83       	std	Y+1, r25	; 0x01
    1906:	88 83       	st	Y, r24
    1908:	39 c0       	rjmp	.+114    	; 0x197c <malloc+0x124>
    190a:	80 91 48 05 	lds	r24, 0x0548
    190e:	90 91 49 05 	lds	r25, 0x0549
    1912:	00 97       	sbiw	r24, 0x00	; 0
    1914:	41 f4       	brne	.+16     	; 0x1926 <malloc+0xce>
    1916:	80 91 0b 04 	lds	r24, 0x040B
    191a:	90 91 0c 04 	lds	r25, 0x040C
    191e:	90 93 49 05 	sts	0x0549, r25
    1922:	80 93 48 05 	sts	0x0548, r24
    1926:	20 91 09 04 	lds	r18, 0x0409
    192a:	30 91 0a 04 	lds	r19, 0x040A
    192e:	21 15       	cp	r18, r1
    1930:	31 05       	cpc	r19, r1
    1932:	41 f4       	brne	.+16     	; 0x1944 <malloc+0xec>
    1934:	2d b7       	in	r18, 0x3d	; 61
    1936:	3e b7       	in	r19, 0x3e	; 62
    1938:	80 91 0d 04 	lds	r24, 0x040D
    193c:	90 91 0e 04 	lds	r25, 0x040E
    1940:	28 1b       	sub	r18, r24
    1942:	39 0b       	sbc	r19, r25
    1944:	e0 91 48 05 	lds	r30, 0x0548
    1948:	f0 91 49 05 	lds	r31, 0x0549
    194c:	e2 17       	cp	r30, r18
    194e:	f3 07       	cpc	r31, r19
    1950:	98 f4       	brcc	.+38     	; 0x1978 <malloc+0x120>
    1952:	2e 1b       	sub	r18, r30
    1954:	3f 0b       	sbc	r19, r31
    1956:	24 17       	cp	r18, r20
    1958:	35 07       	cpc	r19, r21
    195a:	70 f0       	brcs	.+28     	; 0x1978 <malloc+0x120>
    195c:	ca 01       	movw	r24, r20
    195e:	02 96       	adiw	r24, 0x02	; 2
    1960:	28 17       	cp	r18, r24
    1962:	39 07       	cpc	r19, r25
    1964:	48 f0       	brcs	.+18     	; 0x1978 <malloc+0x120>
    1966:	8e 0f       	add	r24, r30
    1968:	9f 1f       	adc	r25, r31
    196a:	90 93 49 05 	sts	0x0549, r25
    196e:	80 93 48 05 	sts	0x0548, r24
    1972:	41 93       	st	Z+, r20
    1974:	51 93       	st	Z+, r21
    1976:	02 c0       	rjmp	.+4      	; 0x197c <malloc+0x124>
    1978:	e0 e0       	ldi	r30, 0x00	; 0
    197a:	f0 e0       	ldi	r31, 0x00	; 0
    197c:	cf 01       	movw	r24, r30
    197e:	df 91       	pop	r29
    1980:	cf 91       	pop	r28
    1982:	08 95       	ret

00001984 <free>:
    1984:	0f 93       	push	r16
    1986:	1f 93       	push	r17
    1988:	cf 93       	push	r28
    198a:	df 93       	push	r29
    198c:	9c 01       	movw	r18, r24
    198e:	00 97       	sbiw	r24, 0x00	; 0
    1990:	09 f4       	brne	.+2      	; 0x1994 <free+0x10>
    1992:	8c c0       	rjmp	.+280    	; 0x1aac <free+0x128>
    1994:	dc 01       	movw	r26, r24
    1996:	12 97       	sbiw	r26, 0x02	; 2
    1998:	13 96       	adiw	r26, 0x03	; 3
    199a:	1c 92       	st	X, r1
    199c:	1e 92       	st	-X, r1
    199e:	12 97       	sbiw	r26, 0x02	; 2
    19a0:	60 91 4a 05 	lds	r22, 0x054A
    19a4:	70 91 4b 05 	lds	r23, 0x054B
    19a8:	61 15       	cp	r22, r1
    19aa:	71 05       	cpc	r23, r1
    19ac:	89 f4       	brne	.+34     	; 0x19d0 <free+0x4c>
    19ae:	8d 91       	ld	r24, X+
    19b0:	9c 91       	ld	r25, X
    19b2:	11 97       	sbiw	r26, 0x01	; 1
    19b4:	82 0f       	add	r24, r18
    19b6:	93 1f       	adc	r25, r19
    19b8:	20 91 48 05 	lds	r18, 0x0548
    19bc:	30 91 49 05 	lds	r19, 0x0549
    19c0:	28 17       	cp	r18, r24
    19c2:	39 07       	cpc	r19, r25
    19c4:	69 f5       	brne	.+90     	; 0x1a20 <free+0x9c>
    19c6:	b0 93 49 05 	sts	0x0549, r27
    19ca:	a0 93 48 05 	sts	0x0548, r26
    19ce:	6e c0       	rjmp	.+220    	; 0x1aac <free+0x128>
    19d0:	fb 01       	movw	r30, r22
    19d2:	40 e0       	ldi	r20, 0x00	; 0
    19d4:	50 e0       	ldi	r21, 0x00	; 0
    19d6:	01 c0       	rjmp	.+2      	; 0x19da <free+0x56>
    19d8:	fc 01       	movw	r30, r24
    19da:	ea 17       	cp	r30, r26
    19dc:	fb 07       	cpc	r31, r27
    19de:	30 f4       	brcc	.+12     	; 0x19ec <free+0x68>
    19e0:	82 81       	ldd	r24, Z+2	; 0x02
    19e2:	93 81       	ldd	r25, Z+3	; 0x03
    19e4:	af 01       	movw	r20, r30
    19e6:	00 97       	sbiw	r24, 0x00	; 0
    19e8:	b9 f7       	brne	.-18     	; 0x19d8 <free+0x54>
    19ea:	1f c0       	rjmp	.+62     	; 0x1a2a <free+0xa6>
    19ec:	e9 01       	movw	r28, r18
    19ee:	22 97       	sbiw	r28, 0x02	; 2
    19f0:	fb 83       	std	Y+3, r31	; 0x03
    19f2:	ea 83       	std	Y+2, r30	; 0x02
    19f4:	08 81       	ld	r16, Y
    19f6:	19 81       	ldd	r17, Y+1	; 0x01
    19f8:	c9 01       	movw	r24, r18
    19fa:	80 0f       	add	r24, r16
    19fc:	91 1f       	adc	r25, r17
    19fe:	8e 17       	cp	r24, r30
    1a00:	9f 07       	cpc	r25, r31
    1a02:	59 f4       	brne	.+22     	; 0x1a1a <free+0x96>
    1a04:	80 81       	ld	r24, Z
    1a06:	91 81       	ldd	r25, Z+1	; 0x01
    1a08:	80 0f       	add	r24, r16
    1a0a:	91 1f       	adc	r25, r17
    1a0c:	02 96       	adiw	r24, 0x02	; 2
    1a0e:	99 83       	std	Y+1, r25	; 0x01
    1a10:	88 83       	st	Y, r24
    1a12:	82 81       	ldd	r24, Z+2	; 0x02
    1a14:	93 81       	ldd	r25, Z+3	; 0x03
    1a16:	9b 83       	std	Y+3, r25	; 0x03
    1a18:	8a 83       	std	Y+2, r24	; 0x02
    1a1a:	41 15       	cp	r20, r1
    1a1c:	51 05       	cpc	r21, r1
    1a1e:	29 f4       	brne	.+10     	; 0x1a2a <free+0xa6>
    1a20:	b0 93 4b 05 	sts	0x054B, r27
    1a24:	a0 93 4a 05 	sts	0x054A, r26
    1a28:	41 c0       	rjmp	.+130    	; 0x1aac <free+0x128>
    1a2a:	fa 01       	movw	r30, r20
    1a2c:	b3 83       	std	Z+3, r27	; 0x03
    1a2e:	a2 83       	std	Z+2, r26	; 0x02
    1a30:	c1 91       	ld	r28, Z+
    1a32:	d1 91       	ld	r29, Z+
    1a34:	ec 0f       	add	r30, r28
    1a36:	fd 1f       	adc	r31, r29
    1a38:	ae 17       	cp	r26, r30
    1a3a:	bf 07       	cpc	r27, r31
    1a3c:	81 f4       	brne	.+32     	; 0x1a5e <free+0xda>
    1a3e:	f9 01       	movw	r30, r18
    1a40:	92 91       	ld	r25, -Z
    1a42:	82 91       	ld	r24, -Z
    1a44:	8c 0f       	add	r24, r28
    1a46:	9d 1f       	adc	r25, r29
    1a48:	02 96       	adiw	r24, 0x02	; 2
    1a4a:	da 01       	movw	r26, r20
    1a4c:	11 96       	adiw	r26, 0x01	; 1
    1a4e:	9c 93       	st	X, r25
    1a50:	8e 93       	st	-X, r24
    1a52:	82 81       	ldd	r24, Z+2	; 0x02
    1a54:	93 81       	ldd	r25, Z+3	; 0x03
    1a56:	13 96       	adiw	r26, 0x03	; 3
    1a58:	9c 93       	st	X, r25
    1a5a:	8e 93       	st	-X, r24
    1a5c:	12 97       	sbiw	r26, 0x02	; 2
    1a5e:	e0 e0       	ldi	r30, 0x00	; 0
    1a60:	f0 e0       	ldi	r31, 0x00	; 0
    1a62:	02 c0       	rjmp	.+4      	; 0x1a68 <free+0xe4>
    1a64:	fb 01       	movw	r30, r22
    1a66:	bc 01       	movw	r22, r24
    1a68:	db 01       	movw	r26, r22
    1a6a:	12 96       	adiw	r26, 0x02	; 2
    1a6c:	8d 91       	ld	r24, X+
    1a6e:	9c 91       	ld	r25, X
    1a70:	13 97       	sbiw	r26, 0x03	; 3
    1a72:	00 97       	sbiw	r24, 0x00	; 0
    1a74:	b9 f7       	brne	.-18     	; 0x1a64 <free+0xe0>
    1a76:	cb 01       	movw	r24, r22
    1a78:	02 96       	adiw	r24, 0x02	; 2
    1a7a:	2d 91       	ld	r18, X+
    1a7c:	3c 91       	ld	r19, X
    1a7e:	11 97       	sbiw	r26, 0x01	; 1
    1a80:	82 0f       	add	r24, r18
    1a82:	93 1f       	adc	r25, r19
    1a84:	20 91 48 05 	lds	r18, 0x0548
    1a88:	30 91 49 05 	lds	r19, 0x0549
    1a8c:	28 17       	cp	r18, r24
    1a8e:	39 07       	cpc	r19, r25
    1a90:	69 f4       	brne	.+26     	; 0x1aac <free+0x128>
    1a92:	30 97       	sbiw	r30, 0x00	; 0
    1a94:	29 f4       	brne	.+10     	; 0x1aa0 <free+0x11c>
    1a96:	10 92 4b 05 	sts	0x054B, r1
    1a9a:	10 92 4a 05 	sts	0x054A, r1
    1a9e:	02 c0       	rjmp	.+4      	; 0x1aa4 <free+0x120>
    1aa0:	13 82       	std	Z+3, r1	; 0x03
    1aa2:	12 82       	std	Z+2, r1	; 0x02
    1aa4:	70 93 49 05 	sts	0x0549, r23
    1aa8:	60 93 48 05 	sts	0x0548, r22
    1aac:	df 91       	pop	r29
    1aae:	cf 91       	pop	r28
    1ab0:	1f 91       	pop	r17
    1ab2:	0f 91       	pop	r16
    1ab4:	08 95       	ret

00001ab6 <atoi>:
    1ab6:	fc 01       	movw	r30, r24
    1ab8:	88 27       	eor	r24, r24
    1aba:	99 27       	eor	r25, r25
    1abc:	e8 94       	clt
    1abe:	21 91       	ld	r18, Z+
    1ac0:	20 32       	cpi	r18, 0x20	; 32
    1ac2:	e9 f3       	breq	.-6      	; 0x1abe <atoi+0x8>
    1ac4:	29 30       	cpi	r18, 0x09	; 9
    1ac6:	10 f0       	brcs	.+4      	; 0x1acc <atoi+0x16>
    1ac8:	2e 30       	cpi	r18, 0x0E	; 14
    1aca:	c8 f3       	brcs	.-14     	; 0x1abe <atoi+0x8>
    1acc:	2b 32       	cpi	r18, 0x2B	; 43
    1ace:	41 f0       	breq	.+16     	; 0x1ae0 <atoi+0x2a>
    1ad0:	2d 32       	cpi	r18, 0x2D	; 45
    1ad2:	39 f4       	brne	.+14     	; 0x1ae2 <atoi+0x2c>
    1ad4:	68 94       	set
    1ad6:	04 c0       	rjmp	.+8      	; 0x1ae0 <atoi+0x2a>
    1ad8:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <__mulhi_const_10>
    1adc:	82 0f       	add	r24, r18
    1ade:	91 1d       	adc	r25, r1
    1ae0:	21 91       	ld	r18, Z+
    1ae2:	20 53       	subi	r18, 0x30	; 48
    1ae4:	2a 30       	cpi	r18, 0x0A	; 10
    1ae6:	c0 f3       	brcs	.-16     	; 0x1ad8 <atoi+0x22>
    1ae8:	1e f4       	brtc	.+6      	; 0x1af0 <atoi+0x3a>
    1aea:	90 95       	com	r25
    1aec:	81 95       	neg	r24
    1aee:	9f 4f       	sbci	r25, 0xFF	; 255
    1af0:	08 95       	ret

00001af2 <strtok>:
    1af2:	49 e1       	ldi	r20, 0x19	; 25
    1af4:	54 e0       	ldi	r21, 0x04	; 4
    1af6:	0e 94 8e 0d 	call	0x1b1c	; 0x1b1c <strtok_r>
    1afa:	08 95       	ret

00001afc <strcmp>:
    1afc:	fb 01       	movw	r30, r22
    1afe:	dc 01       	movw	r26, r24
    1b00:	8d 91       	ld	r24, X+
    1b02:	01 90       	ld	r0, Z+
    1b04:	80 19       	sub	r24, r0
    1b06:	01 10       	cpse	r0, r1
    1b08:	d9 f3       	breq	.-10     	; 0x1b00 <strcmp+0x4>
    1b0a:	99 0b       	sbc	r25, r25
    1b0c:	08 95       	ret

00001b0e <strcpy>:
    1b0e:	fb 01       	movw	r30, r22
    1b10:	dc 01       	movw	r26, r24
    1b12:	01 90       	ld	r0, Z+
    1b14:	0d 92       	st	X+, r0
    1b16:	00 20       	and	r0, r0
    1b18:	e1 f7       	brne	.-8      	; 0x1b12 <strcpy+0x4>
    1b1a:	08 95       	ret

00001b1c <strtok_r>:
    1b1c:	fa 01       	movw	r30, r20
    1b1e:	a1 91       	ld	r26, Z+
    1b20:	b0 81       	ld	r27, Z
    1b22:	00 97       	sbiw	r24, 0x00	; 0
    1b24:	19 f4       	brne	.+6      	; 0x1b2c <strtok_r+0x10>
    1b26:	10 97       	sbiw	r26, 0x00	; 0
    1b28:	e1 f0       	breq	.+56     	; 0x1b62 <strtok_r+0x46>
    1b2a:	cd 01       	movw	r24, r26
    1b2c:	dc 01       	movw	r26, r24
    1b2e:	cd 01       	movw	r24, r26
    1b30:	0d 90       	ld	r0, X+
    1b32:	00 20       	and	r0, r0
    1b34:	11 f4       	brne	.+4      	; 0x1b3a <strtok_r+0x1e>
    1b36:	c0 01       	movw	r24, r0
    1b38:	13 c0       	rjmp	.+38     	; 0x1b60 <strtok_r+0x44>
    1b3a:	fb 01       	movw	r30, r22
    1b3c:	21 91       	ld	r18, Z+
    1b3e:	22 23       	and	r18, r18
    1b40:	19 f0       	breq	.+6      	; 0x1b48 <strtok_r+0x2c>
    1b42:	20 15       	cp	r18, r0
    1b44:	d9 f7       	brne	.-10     	; 0x1b3c <strtok_r+0x20>
    1b46:	f3 cf       	rjmp	.-26     	; 0x1b2e <strtok_r+0x12>
    1b48:	fb 01       	movw	r30, r22
    1b4a:	21 91       	ld	r18, Z+
    1b4c:	20 15       	cp	r18, r0
    1b4e:	19 f4       	brne	.+6      	; 0x1b56 <strtok_r+0x3a>
    1b50:	1e 92       	st	-X, r1
    1b52:	11 96       	adiw	r26, 0x01	; 1
    1b54:	06 c0       	rjmp	.+12     	; 0x1b62 <strtok_r+0x46>
    1b56:	22 23       	and	r18, r18
    1b58:	c1 f7       	brne	.-16     	; 0x1b4a <strtok_r+0x2e>
    1b5a:	0d 90       	ld	r0, X+
    1b5c:	00 20       	and	r0, r0
    1b5e:	a1 f7       	brne	.-24     	; 0x1b48 <strtok_r+0x2c>
    1b60:	d0 01       	movw	r26, r0
    1b62:	fa 01       	movw	r30, r20
    1b64:	a1 93       	st	Z+, r26
    1b66:	b0 83       	st	Z, r27
    1b68:	08 95       	ret

00001b6a <__mulhi_const_10>:
    1b6a:	7a e0       	ldi	r23, 0x0A	; 10
    1b6c:	97 9f       	mul	r25, r23
    1b6e:	90 2d       	mov	r25, r0
    1b70:	87 9f       	mul	r24, r23
    1b72:	80 2d       	mov	r24, r0
    1b74:	91 0d       	add	r25, r1
    1b76:	11 24       	eor	r1, r1
    1b78:	08 95       	ret

00001b7a <fgets>:
    1b7a:	cf 92       	push	r12
    1b7c:	df 92       	push	r13
    1b7e:	ef 92       	push	r14
    1b80:	ff 92       	push	r15
    1b82:	0f 93       	push	r16
    1b84:	1f 93       	push	r17
    1b86:	cf 93       	push	r28
    1b88:	df 93       	push	r29
    1b8a:	8c 01       	movw	r16, r24
    1b8c:	6a 01       	movw	r12, r20
    1b8e:	fa 01       	movw	r30, r20
    1b90:	83 81       	ldd	r24, Z+3	; 0x03
    1b92:	80 ff       	sbrs	r24, 0
    1b94:	1a c0       	rjmp	.+52     	; 0x1bca <fgets+0x50>
    1b96:	16 16       	cp	r1, r22
    1b98:	17 06       	cpc	r1, r23
    1b9a:	bc f4       	brge	.+46     	; 0x1bca <fgets+0x50>
    1b9c:	7b 01       	movw	r14, r22
    1b9e:	e8 01       	movw	r28, r16
    1ba0:	0e c0       	rjmp	.+28     	; 0x1bbe <fgets+0x44>
    1ba2:	c6 01       	movw	r24, r12
    1ba4:	0e 94 aa 10 	call	0x2154	; 0x2154 <fgetc>
    1ba8:	ff ef       	ldi	r31, 0xFF	; 255
    1baa:	8f 3f       	cpi	r24, 0xFF	; 255
    1bac:	9f 07       	cpc	r25, r31
    1bae:	69 f0       	breq	.+26     	; 0x1bca <fgets+0x50>
    1bb0:	89 93       	st	Y+, r24
    1bb2:	08 94       	sec
    1bb4:	e1 08       	sbc	r14, r1
    1bb6:	f1 08       	sbc	r15, r1
    1bb8:	8a 30       	cpi	r24, 0x0A	; 10
    1bba:	91 05       	cpc	r25, r1
    1bbc:	21 f0       	breq	.+8      	; 0x1bc6 <fgets+0x4c>
    1bbe:	21 e0       	ldi	r18, 0x01	; 1
    1bc0:	e2 16       	cp	r14, r18
    1bc2:	f1 04       	cpc	r15, r1
    1bc4:	71 f7       	brne	.-36     	; 0x1ba2 <fgets+0x28>
    1bc6:	18 82       	st	Y, r1
    1bc8:	02 c0       	rjmp	.+4      	; 0x1bce <fgets+0x54>
    1bca:	00 e0       	ldi	r16, 0x00	; 0
    1bcc:	10 e0       	ldi	r17, 0x00	; 0
    1bce:	c8 01       	movw	r24, r16
    1bd0:	df 91       	pop	r29
    1bd2:	cf 91       	pop	r28
    1bd4:	1f 91       	pop	r17
    1bd6:	0f 91       	pop	r16
    1bd8:	ff 90       	pop	r15
    1bda:	ef 90       	pop	r14
    1bdc:	df 90       	pop	r13
    1bde:	cf 90       	pop	r12
    1be0:	08 95       	ret

00001be2 <gets>:
    1be2:	0f 93       	push	r16
    1be4:	1f 93       	push	r17
    1be6:	cf 93       	push	r28
    1be8:	df 93       	push	r29
    1bea:	8c 01       	movw	r16, r24
    1bec:	e0 91 4c 05 	lds	r30, 0x054C
    1bf0:	f0 91 4d 05 	lds	r31, 0x054D
    1bf4:	83 81       	ldd	r24, Z+3	; 0x03
    1bf6:	80 ff       	sbrs	r24, 0
    1bf8:	12 c0       	rjmp	.+36     	; 0x1c1e <gets+0x3c>
    1bfa:	e8 01       	movw	r28, r16
    1bfc:	80 91 4c 05 	lds	r24, 0x054C
    1c00:	90 91 4d 05 	lds	r25, 0x054D
    1c04:	0e 94 aa 10 	call	0x2154	; 0x2154 <fgetc>
    1c08:	2f ef       	ldi	r18, 0xFF	; 255
    1c0a:	8f 3f       	cpi	r24, 0xFF	; 255
    1c0c:	92 07       	cpc	r25, r18
    1c0e:	39 f0       	breq	.+14     	; 0x1c1e <gets+0x3c>
    1c10:	89 93       	st	Y+, r24
    1c12:	8a 30       	cpi	r24, 0x0A	; 10
    1c14:	91 05       	cpc	r25, r1
    1c16:	91 f7       	brne	.-28     	; 0x1bfc <gets+0x1a>
    1c18:	21 97       	sbiw	r28, 0x01	; 1
    1c1a:	18 82       	st	Y, r1
    1c1c:	02 c0       	rjmp	.+4      	; 0x1c22 <gets+0x40>
    1c1e:	00 e0       	ldi	r16, 0x00	; 0
    1c20:	10 e0       	ldi	r17, 0x00	; 0
    1c22:	c8 01       	movw	r24, r16
    1c24:	df 91       	pop	r29
    1c26:	cf 91       	pop	r28
    1c28:	1f 91       	pop	r17
    1c2a:	0f 91       	pop	r16
    1c2c:	08 95       	ret

00001c2e <printf>:
    1c2e:	cf 93       	push	r28
    1c30:	df 93       	push	r29
    1c32:	cd b7       	in	r28, 0x3d	; 61
    1c34:	de b7       	in	r29, 0x3e	; 62
    1c36:	fe 01       	movw	r30, r28
    1c38:	36 96       	adiw	r30, 0x06	; 6
    1c3a:	61 91       	ld	r22, Z+
    1c3c:	71 91       	ld	r23, Z+
    1c3e:	80 91 4e 05 	lds	r24, 0x054E
    1c42:	90 91 4f 05 	lds	r25, 0x054F
    1c46:	af 01       	movw	r20, r30
    1c48:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <vfprintf>
    1c4c:	df 91       	pop	r29
    1c4e:	cf 91       	pop	r28
    1c50:	08 95       	ret

00001c52 <putchar>:
    1c52:	60 91 4e 05 	lds	r22, 0x054E
    1c56:	70 91 4f 05 	lds	r23, 0x054F
    1c5a:	0e 94 ea 10 	call	0x21d4	; 0x21d4 <fputc>
    1c5e:	08 95       	ret

00001c60 <puts>:
    1c60:	0f 93       	push	r16
    1c62:	1f 93       	push	r17
    1c64:	cf 93       	push	r28
    1c66:	df 93       	push	r29
    1c68:	8c 01       	movw	r16, r24
    1c6a:	e0 91 4e 05 	lds	r30, 0x054E
    1c6e:	f0 91 4f 05 	lds	r31, 0x054F
    1c72:	83 81       	ldd	r24, Z+3	; 0x03
    1c74:	81 ff       	sbrs	r24, 1
    1c76:	1a c0       	rjmp	.+52     	; 0x1cac <puts+0x4c>
    1c78:	c0 e0       	ldi	r28, 0x00	; 0
    1c7a:	d0 e0       	ldi	r29, 0x00	; 0
    1c7c:	05 c0       	rjmp	.+10     	; 0x1c88 <puts+0x28>
    1c7e:	19 95       	eicall
    1c80:	00 97       	sbiw	r24, 0x00	; 0
    1c82:	11 f0       	breq	.+4      	; 0x1c88 <puts+0x28>
    1c84:	cf ef       	ldi	r28, 0xFF	; 255
    1c86:	df ef       	ldi	r29, 0xFF	; 255
    1c88:	f8 01       	movw	r30, r16
    1c8a:	81 91       	ld	r24, Z+
    1c8c:	8f 01       	movw	r16, r30
    1c8e:	60 91 4e 05 	lds	r22, 0x054E
    1c92:	70 91 4f 05 	lds	r23, 0x054F
    1c96:	db 01       	movw	r26, r22
    1c98:	18 96       	adiw	r26, 0x08	; 8
    1c9a:	ed 91       	ld	r30, X+
    1c9c:	fc 91       	ld	r31, X
    1c9e:	19 97       	sbiw	r26, 0x09	; 9
    1ca0:	88 23       	and	r24, r24
    1ca2:	69 f7       	brne	.-38     	; 0x1c7e <puts+0x1e>
    1ca4:	8a e0       	ldi	r24, 0x0A	; 10
    1ca6:	19 95       	eicall
    1ca8:	00 97       	sbiw	r24, 0x00	; 0
    1caa:	11 f0       	breq	.+4      	; 0x1cb0 <puts+0x50>
    1cac:	cf ef       	ldi	r28, 0xFF	; 255
    1cae:	df ef       	ldi	r29, 0xFF	; 255
    1cb0:	ce 01       	movw	r24, r28
    1cb2:	df 91       	pop	r29
    1cb4:	cf 91       	pop	r28
    1cb6:	1f 91       	pop	r17
    1cb8:	0f 91       	pop	r16
    1cba:	08 95       	ret

00001cbc <sprintf>:
    1cbc:	0f 93       	push	r16
    1cbe:	1f 93       	push	r17
    1cc0:	cf 93       	push	r28
    1cc2:	df 93       	push	r29
    1cc4:	cd b7       	in	r28, 0x3d	; 61
    1cc6:	de b7       	in	r29, 0x3e	; 62
    1cc8:	2e 97       	sbiw	r28, 0x0e	; 14
    1cca:	0f b6       	in	r0, 0x3f	; 63
    1ccc:	f8 94       	cli
    1cce:	de bf       	out	0x3e, r29	; 62
    1cd0:	0f be       	out	0x3f, r0	; 63
    1cd2:	cd bf       	out	0x3d, r28	; 61
    1cd4:	0e 89       	ldd	r16, Y+22	; 0x16
    1cd6:	1f 89       	ldd	r17, Y+23	; 0x17
    1cd8:	86 e0       	ldi	r24, 0x06	; 6
    1cda:	8c 83       	std	Y+4, r24	; 0x04
    1cdc:	1a 83       	std	Y+2, r17	; 0x02
    1cde:	09 83       	std	Y+1, r16	; 0x01
    1ce0:	8f ef       	ldi	r24, 0xFF	; 255
    1ce2:	9f e7       	ldi	r25, 0x7F	; 127
    1ce4:	9e 83       	std	Y+6, r25	; 0x06
    1ce6:	8d 83       	std	Y+5, r24	; 0x05
    1ce8:	ae 01       	movw	r20, r28
    1cea:	46 5e       	subi	r20, 0xE6	; 230
    1cec:	5f 4f       	sbci	r21, 0xFF	; 255
    1cee:	ce 01       	movw	r24, r28
    1cf0:	01 96       	adiw	r24, 0x01	; 1
    1cf2:	68 8d       	ldd	r22, Y+24	; 0x18
    1cf4:	79 8d       	ldd	r23, Y+25	; 0x19
    1cf6:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <vfprintf>
    1cfa:	ef 81       	ldd	r30, Y+7	; 0x07
    1cfc:	f8 85       	ldd	r31, Y+8	; 0x08
    1cfe:	e0 0f       	add	r30, r16
    1d00:	f1 1f       	adc	r31, r17
    1d02:	10 82       	st	Z, r1
    1d04:	2e 96       	adiw	r28, 0x0e	; 14
    1d06:	0f b6       	in	r0, 0x3f	; 63
    1d08:	f8 94       	cli
    1d0a:	de bf       	out	0x3e, r29	; 62
    1d0c:	0f be       	out	0x3f, r0	; 63
    1d0e:	cd bf       	out	0x3d, r28	; 61
    1d10:	df 91       	pop	r29
    1d12:	cf 91       	pop	r28
    1d14:	1f 91       	pop	r17
    1d16:	0f 91       	pop	r16
    1d18:	08 95       	ret

00001d1a <vfprintf>:
    1d1a:	2f 92       	push	r2
    1d1c:	3f 92       	push	r3
    1d1e:	4f 92       	push	r4
    1d20:	5f 92       	push	r5
    1d22:	6f 92       	push	r6
    1d24:	7f 92       	push	r7
    1d26:	8f 92       	push	r8
    1d28:	9f 92       	push	r9
    1d2a:	af 92       	push	r10
    1d2c:	bf 92       	push	r11
    1d2e:	cf 92       	push	r12
    1d30:	df 92       	push	r13
    1d32:	ef 92       	push	r14
    1d34:	ff 92       	push	r15
    1d36:	0f 93       	push	r16
    1d38:	1f 93       	push	r17
    1d3a:	cf 93       	push	r28
    1d3c:	df 93       	push	r29
    1d3e:	cd b7       	in	r28, 0x3d	; 61
    1d40:	de b7       	in	r29, 0x3e	; 62
    1d42:	2d 97       	sbiw	r28, 0x0d	; 13
    1d44:	0f b6       	in	r0, 0x3f	; 63
    1d46:	f8 94       	cli
    1d48:	de bf       	out	0x3e, r29	; 62
    1d4a:	0f be       	out	0x3f, r0	; 63
    1d4c:	cd bf       	out	0x3d, r28	; 61
    1d4e:	3c 01       	movw	r6, r24
    1d50:	7d 87       	std	Y+13, r23	; 0x0d
    1d52:	6c 87       	std	Y+12, r22	; 0x0c
    1d54:	5a 01       	movw	r10, r20
    1d56:	fc 01       	movw	r30, r24
    1d58:	17 82       	std	Z+7, r1	; 0x07
    1d5a:	16 82       	std	Z+6, r1	; 0x06
    1d5c:	83 81       	ldd	r24, Z+3	; 0x03
    1d5e:	81 ff       	sbrs	r24, 1
    1d60:	c8 c1       	rjmp	.+912    	; 0x20f2 <vfprintf+0x3d8>
    1d62:	2e 01       	movw	r4, r28
    1d64:	08 94       	sec
    1d66:	41 1c       	adc	r4, r1
    1d68:	51 1c       	adc	r5, r1
    1d6a:	f3 01       	movw	r30, r6
    1d6c:	93 81       	ldd	r25, Z+3	; 0x03
    1d6e:	ec 85       	ldd	r30, Y+12	; 0x0c
    1d70:	fd 85       	ldd	r31, Y+13	; 0x0d
    1d72:	93 fd       	sbrc	r25, 3
    1d74:	85 91       	lpm	r24, Z+
    1d76:	93 ff       	sbrs	r25, 3
    1d78:	81 91       	ld	r24, Z+
    1d7a:	fd 87       	std	Y+13, r31	; 0x0d
    1d7c:	ec 87       	std	Y+12, r30	; 0x0c
    1d7e:	88 23       	and	r24, r24
    1d80:	09 f4       	brne	.+2      	; 0x1d84 <vfprintf+0x6a>
    1d82:	b3 c1       	rjmp	.+870    	; 0x20ea <vfprintf+0x3d0>
    1d84:	85 32       	cpi	r24, 0x25	; 37
    1d86:	41 f4       	brne	.+16     	; 0x1d98 <vfprintf+0x7e>
    1d88:	93 fd       	sbrc	r25, 3
    1d8a:	85 91       	lpm	r24, Z+
    1d8c:	93 ff       	sbrs	r25, 3
    1d8e:	81 91       	ld	r24, Z+
    1d90:	fd 87       	std	Y+13, r31	; 0x0d
    1d92:	ec 87       	std	Y+12, r30	; 0x0c
    1d94:	85 32       	cpi	r24, 0x25	; 37
    1d96:	29 f4       	brne	.+10     	; 0x1da2 <vfprintf+0x88>
    1d98:	90 e0       	ldi	r25, 0x00	; 0
    1d9a:	b3 01       	movw	r22, r6
    1d9c:	0e 94 ea 10 	call	0x21d4	; 0x21d4 <fputc>
    1da0:	e4 cf       	rjmp	.-56     	; 0x1d6a <vfprintf+0x50>
    1da2:	ff 24       	eor	r15, r15
    1da4:	ee 24       	eor	r14, r14
    1da6:	10 e0       	ldi	r17, 0x00	; 0
    1da8:	10 32       	cpi	r17, 0x20	; 32
    1daa:	b0 f4       	brcc	.+44     	; 0x1dd8 <vfprintf+0xbe>
    1dac:	8b 32       	cpi	r24, 0x2B	; 43
    1dae:	69 f0       	breq	.+26     	; 0x1dca <vfprintf+0xb0>
    1db0:	8c 32       	cpi	r24, 0x2C	; 44
    1db2:	28 f4       	brcc	.+10     	; 0x1dbe <vfprintf+0xa4>
    1db4:	80 32       	cpi	r24, 0x20	; 32
    1db6:	51 f0       	breq	.+20     	; 0x1dcc <vfprintf+0xb2>
    1db8:	83 32       	cpi	r24, 0x23	; 35
    1dba:	71 f4       	brne	.+28     	; 0x1dd8 <vfprintf+0xbe>
    1dbc:	0b c0       	rjmp	.+22     	; 0x1dd4 <vfprintf+0xba>
    1dbe:	8d 32       	cpi	r24, 0x2D	; 45
    1dc0:	39 f0       	breq	.+14     	; 0x1dd0 <vfprintf+0xb6>
    1dc2:	80 33       	cpi	r24, 0x30	; 48
    1dc4:	49 f4       	brne	.+18     	; 0x1dd8 <vfprintf+0xbe>
    1dc6:	11 60       	ori	r17, 0x01	; 1
    1dc8:	2c c0       	rjmp	.+88     	; 0x1e22 <vfprintf+0x108>
    1dca:	12 60       	ori	r17, 0x02	; 2
    1dcc:	14 60       	ori	r17, 0x04	; 4
    1dce:	29 c0       	rjmp	.+82     	; 0x1e22 <vfprintf+0x108>
    1dd0:	18 60       	ori	r17, 0x08	; 8
    1dd2:	27 c0       	rjmp	.+78     	; 0x1e22 <vfprintf+0x108>
    1dd4:	10 61       	ori	r17, 0x10	; 16
    1dd6:	25 c0       	rjmp	.+74     	; 0x1e22 <vfprintf+0x108>
    1dd8:	17 fd       	sbrc	r17, 7
    1dda:	2e c0       	rjmp	.+92     	; 0x1e38 <vfprintf+0x11e>
    1ddc:	28 2f       	mov	r18, r24
    1dde:	20 53       	subi	r18, 0x30	; 48
    1de0:	2a 30       	cpi	r18, 0x0A	; 10
    1de2:	98 f4       	brcc	.+38     	; 0x1e0a <vfprintf+0xf0>
    1de4:	16 ff       	sbrs	r17, 6
    1de6:	08 c0       	rjmp	.+16     	; 0x1df8 <vfprintf+0xde>
    1de8:	8f 2d       	mov	r24, r15
    1dea:	88 0f       	add	r24, r24
    1dec:	f8 2e       	mov	r15, r24
    1dee:	ff 0c       	add	r15, r15
    1df0:	ff 0c       	add	r15, r15
    1df2:	f8 0e       	add	r15, r24
    1df4:	f2 0e       	add	r15, r18
    1df6:	15 c0       	rjmp	.+42     	; 0x1e22 <vfprintf+0x108>
    1df8:	8e 2d       	mov	r24, r14
    1dfa:	88 0f       	add	r24, r24
    1dfc:	e8 2e       	mov	r14, r24
    1dfe:	ee 0c       	add	r14, r14
    1e00:	ee 0c       	add	r14, r14
    1e02:	e8 0e       	add	r14, r24
    1e04:	e2 0e       	add	r14, r18
    1e06:	10 62       	ori	r17, 0x20	; 32
    1e08:	0c c0       	rjmp	.+24     	; 0x1e22 <vfprintf+0x108>
    1e0a:	8e 32       	cpi	r24, 0x2E	; 46
    1e0c:	21 f4       	brne	.+8      	; 0x1e16 <vfprintf+0xfc>
    1e0e:	16 fd       	sbrc	r17, 6
    1e10:	6c c1       	rjmp	.+728    	; 0x20ea <vfprintf+0x3d0>
    1e12:	10 64       	ori	r17, 0x40	; 64
    1e14:	06 c0       	rjmp	.+12     	; 0x1e22 <vfprintf+0x108>
    1e16:	8c 36       	cpi	r24, 0x6C	; 108
    1e18:	11 f4       	brne	.+4      	; 0x1e1e <vfprintf+0x104>
    1e1a:	10 68       	ori	r17, 0x80	; 128
    1e1c:	02 c0       	rjmp	.+4      	; 0x1e22 <vfprintf+0x108>
    1e1e:	88 36       	cpi	r24, 0x68	; 104
    1e20:	59 f4       	brne	.+22     	; 0x1e38 <vfprintf+0x11e>
    1e22:	ec 85       	ldd	r30, Y+12	; 0x0c
    1e24:	fd 85       	ldd	r31, Y+13	; 0x0d
    1e26:	93 fd       	sbrc	r25, 3
    1e28:	85 91       	lpm	r24, Z+
    1e2a:	93 ff       	sbrs	r25, 3
    1e2c:	81 91       	ld	r24, Z+
    1e2e:	fd 87       	std	Y+13, r31	; 0x0d
    1e30:	ec 87       	std	Y+12, r30	; 0x0c
    1e32:	88 23       	and	r24, r24
    1e34:	09 f0       	breq	.+2      	; 0x1e38 <vfprintf+0x11e>
    1e36:	b8 cf       	rjmp	.-144    	; 0x1da8 <vfprintf+0x8e>
    1e38:	98 2f       	mov	r25, r24
    1e3a:	95 54       	subi	r25, 0x45	; 69
    1e3c:	93 30       	cpi	r25, 0x03	; 3
    1e3e:	18 f0       	brcs	.+6      	; 0x1e46 <vfprintf+0x12c>
    1e40:	90 52       	subi	r25, 0x20	; 32
    1e42:	93 30       	cpi	r25, 0x03	; 3
    1e44:	38 f4       	brcc	.+14     	; 0x1e54 <vfprintf+0x13a>
    1e46:	24 e0       	ldi	r18, 0x04	; 4
    1e48:	30 e0       	ldi	r19, 0x00	; 0
    1e4a:	a2 0e       	add	r10, r18
    1e4c:	b3 1e       	adc	r11, r19
    1e4e:	3f e3       	ldi	r19, 0x3F	; 63
    1e50:	39 83       	std	Y+1, r19	; 0x01
    1e52:	0f c0       	rjmp	.+30     	; 0x1e72 <vfprintf+0x158>
    1e54:	83 36       	cpi	r24, 0x63	; 99
    1e56:	31 f0       	breq	.+12     	; 0x1e64 <vfprintf+0x14a>
    1e58:	83 37       	cpi	r24, 0x73	; 115
    1e5a:	81 f0       	breq	.+32     	; 0x1e7c <vfprintf+0x162>
    1e5c:	83 35       	cpi	r24, 0x53	; 83
    1e5e:	09 f0       	breq	.+2      	; 0x1e62 <vfprintf+0x148>
    1e60:	5a c0       	rjmp	.+180    	; 0x1f16 <vfprintf+0x1fc>
    1e62:	22 c0       	rjmp	.+68     	; 0x1ea8 <vfprintf+0x18e>
    1e64:	f5 01       	movw	r30, r10
    1e66:	80 81       	ld	r24, Z
    1e68:	89 83       	std	Y+1, r24	; 0x01
    1e6a:	22 e0       	ldi	r18, 0x02	; 2
    1e6c:	30 e0       	ldi	r19, 0x00	; 0
    1e6e:	a2 0e       	add	r10, r18
    1e70:	b3 1e       	adc	r11, r19
    1e72:	21 e0       	ldi	r18, 0x01	; 1
    1e74:	c2 2e       	mov	r12, r18
    1e76:	d1 2c       	mov	r13, r1
    1e78:	42 01       	movw	r8, r4
    1e7a:	14 c0       	rjmp	.+40     	; 0x1ea4 <vfprintf+0x18a>
    1e7c:	92 e0       	ldi	r25, 0x02	; 2
    1e7e:	29 2e       	mov	r2, r25
    1e80:	31 2c       	mov	r3, r1
    1e82:	2a 0c       	add	r2, r10
    1e84:	3b 1c       	adc	r3, r11
    1e86:	f5 01       	movw	r30, r10
    1e88:	80 80       	ld	r8, Z
    1e8a:	91 80       	ldd	r9, Z+1	; 0x01
    1e8c:	16 ff       	sbrs	r17, 6
    1e8e:	03 c0       	rjmp	.+6      	; 0x1e96 <vfprintf+0x17c>
    1e90:	6f 2d       	mov	r22, r15
    1e92:	70 e0       	ldi	r23, 0x00	; 0
    1e94:	02 c0       	rjmp	.+4      	; 0x1e9a <vfprintf+0x180>
    1e96:	6f ef       	ldi	r22, 0xFF	; 255
    1e98:	7f ef       	ldi	r23, 0xFF	; 255
    1e9a:	c4 01       	movw	r24, r8
    1e9c:	0e 94 9f 10 	call	0x213e	; 0x213e <strnlen>
    1ea0:	6c 01       	movw	r12, r24
    1ea2:	51 01       	movw	r10, r2
    1ea4:	1f 77       	andi	r17, 0x7F	; 127
    1ea6:	15 c0       	rjmp	.+42     	; 0x1ed2 <vfprintf+0x1b8>
    1ea8:	82 e0       	ldi	r24, 0x02	; 2
    1eaa:	28 2e       	mov	r2, r24
    1eac:	31 2c       	mov	r3, r1
    1eae:	2a 0c       	add	r2, r10
    1eb0:	3b 1c       	adc	r3, r11
    1eb2:	f5 01       	movw	r30, r10
    1eb4:	80 80       	ld	r8, Z
    1eb6:	91 80       	ldd	r9, Z+1	; 0x01
    1eb8:	16 ff       	sbrs	r17, 6
    1eba:	03 c0       	rjmp	.+6      	; 0x1ec2 <vfprintf+0x1a8>
    1ebc:	6f 2d       	mov	r22, r15
    1ebe:	70 e0       	ldi	r23, 0x00	; 0
    1ec0:	02 c0       	rjmp	.+4      	; 0x1ec6 <vfprintf+0x1ac>
    1ec2:	6f ef       	ldi	r22, 0xFF	; 255
    1ec4:	7f ef       	ldi	r23, 0xFF	; 255
    1ec6:	c4 01       	movw	r24, r8
    1ec8:	0e 94 94 10 	call	0x2128	; 0x2128 <strnlen_P>
    1ecc:	6c 01       	movw	r12, r24
    1ece:	10 68       	ori	r17, 0x80	; 128
    1ed0:	51 01       	movw	r10, r2
    1ed2:	13 fd       	sbrc	r17, 3
    1ed4:	1c c0       	rjmp	.+56     	; 0x1f0e <vfprintf+0x1f4>
    1ed6:	06 c0       	rjmp	.+12     	; 0x1ee4 <vfprintf+0x1ca>
    1ed8:	80 e2       	ldi	r24, 0x20	; 32
    1eda:	90 e0       	ldi	r25, 0x00	; 0
    1edc:	b3 01       	movw	r22, r6
    1ede:	0e 94 ea 10 	call	0x21d4	; 0x21d4 <fputc>
    1ee2:	ea 94       	dec	r14
    1ee4:	8e 2d       	mov	r24, r14
    1ee6:	90 e0       	ldi	r25, 0x00	; 0
    1ee8:	c8 16       	cp	r12, r24
    1eea:	d9 06       	cpc	r13, r25
    1eec:	a8 f3       	brcs	.-22     	; 0x1ed8 <vfprintf+0x1be>
    1eee:	0f c0       	rjmp	.+30     	; 0x1f0e <vfprintf+0x1f4>
    1ef0:	f4 01       	movw	r30, r8
    1ef2:	17 fd       	sbrc	r17, 7
    1ef4:	85 91       	lpm	r24, Z+
    1ef6:	17 ff       	sbrs	r17, 7
    1ef8:	81 91       	ld	r24, Z+
    1efa:	4f 01       	movw	r8, r30
    1efc:	90 e0       	ldi	r25, 0x00	; 0
    1efe:	b3 01       	movw	r22, r6
    1f00:	0e 94 ea 10 	call	0x21d4	; 0x21d4 <fputc>
    1f04:	e1 10       	cpse	r14, r1
    1f06:	ea 94       	dec	r14
    1f08:	08 94       	sec
    1f0a:	c1 08       	sbc	r12, r1
    1f0c:	d1 08       	sbc	r13, r1
    1f0e:	c1 14       	cp	r12, r1
    1f10:	d1 04       	cpc	r13, r1
    1f12:	71 f7       	brne	.-36     	; 0x1ef0 <vfprintf+0x1d6>
    1f14:	e7 c0       	rjmp	.+462    	; 0x20e4 <vfprintf+0x3ca>
    1f16:	84 36       	cpi	r24, 0x64	; 100
    1f18:	11 f0       	breq	.+4      	; 0x1f1e <vfprintf+0x204>
    1f1a:	89 36       	cpi	r24, 0x69	; 105
    1f1c:	51 f5       	brne	.+84     	; 0x1f72 <vfprintf+0x258>
    1f1e:	f5 01       	movw	r30, r10
    1f20:	17 ff       	sbrs	r17, 7
    1f22:	07 c0       	rjmp	.+14     	; 0x1f32 <vfprintf+0x218>
    1f24:	80 81       	ld	r24, Z
    1f26:	91 81       	ldd	r25, Z+1	; 0x01
    1f28:	a2 81       	ldd	r26, Z+2	; 0x02
    1f2a:	b3 81       	ldd	r27, Z+3	; 0x03
    1f2c:	24 e0       	ldi	r18, 0x04	; 4
    1f2e:	30 e0       	ldi	r19, 0x00	; 0
    1f30:	08 c0       	rjmp	.+16     	; 0x1f42 <vfprintf+0x228>
    1f32:	80 81       	ld	r24, Z
    1f34:	91 81       	ldd	r25, Z+1	; 0x01
    1f36:	aa 27       	eor	r26, r26
    1f38:	97 fd       	sbrc	r25, 7
    1f3a:	a0 95       	com	r26
    1f3c:	ba 2f       	mov	r27, r26
    1f3e:	22 e0       	ldi	r18, 0x02	; 2
    1f40:	30 e0       	ldi	r19, 0x00	; 0
    1f42:	a2 0e       	add	r10, r18
    1f44:	b3 1e       	adc	r11, r19
    1f46:	01 2f       	mov	r16, r17
    1f48:	0f 76       	andi	r16, 0x6F	; 111
    1f4a:	b7 ff       	sbrs	r27, 7
    1f4c:	08 c0       	rjmp	.+16     	; 0x1f5e <vfprintf+0x244>
    1f4e:	b0 95       	com	r27
    1f50:	a0 95       	com	r26
    1f52:	90 95       	com	r25
    1f54:	81 95       	neg	r24
    1f56:	9f 4f       	sbci	r25, 0xFF	; 255
    1f58:	af 4f       	sbci	r26, 0xFF	; 255
    1f5a:	bf 4f       	sbci	r27, 0xFF	; 255
    1f5c:	00 68       	ori	r16, 0x80	; 128
    1f5e:	bc 01       	movw	r22, r24
    1f60:	cd 01       	movw	r24, r26
    1f62:	a2 01       	movw	r20, r4
    1f64:	2a e0       	ldi	r18, 0x0A	; 10
    1f66:	30 e0       	ldi	r19, 0x00	; 0
    1f68:	0e 94 16 11 	call	0x222c	; 0x222c <__ultoa_invert>
    1f6c:	d8 2e       	mov	r13, r24
    1f6e:	d4 18       	sub	r13, r4
    1f70:	3f c0       	rjmp	.+126    	; 0x1ff0 <vfprintf+0x2d6>
    1f72:	85 37       	cpi	r24, 0x75	; 117
    1f74:	21 f4       	brne	.+8      	; 0x1f7e <vfprintf+0x264>
    1f76:	1f 7e       	andi	r17, 0xEF	; 239
    1f78:	2a e0       	ldi	r18, 0x0A	; 10
    1f7a:	30 e0       	ldi	r19, 0x00	; 0
    1f7c:	20 c0       	rjmp	.+64     	; 0x1fbe <vfprintf+0x2a4>
    1f7e:	19 7f       	andi	r17, 0xF9	; 249
    1f80:	8f 36       	cpi	r24, 0x6F	; 111
    1f82:	a9 f0       	breq	.+42     	; 0x1fae <vfprintf+0x294>
    1f84:	80 37       	cpi	r24, 0x70	; 112
    1f86:	20 f4       	brcc	.+8      	; 0x1f90 <vfprintf+0x276>
    1f88:	88 35       	cpi	r24, 0x58	; 88
    1f8a:	09 f0       	breq	.+2      	; 0x1f8e <vfprintf+0x274>
    1f8c:	ae c0       	rjmp	.+348    	; 0x20ea <vfprintf+0x3d0>
    1f8e:	0b c0       	rjmp	.+22     	; 0x1fa6 <vfprintf+0x28c>
    1f90:	80 37       	cpi	r24, 0x70	; 112
    1f92:	21 f0       	breq	.+8      	; 0x1f9c <vfprintf+0x282>
    1f94:	88 37       	cpi	r24, 0x78	; 120
    1f96:	09 f0       	breq	.+2      	; 0x1f9a <vfprintf+0x280>
    1f98:	a8 c0       	rjmp	.+336    	; 0x20ea <vfprintf+0x3d0>
    1f9a:	01 c0       	rjmp	.+2      	; 0x1f9e <vfprintf+0x284>
    1f9c:	10 61       	ori	r17, 0x10	; 16
    1f9e:	14 ff       	sbrs	r17, 4
    1fa0:	09 c0       	rjmp	.+18     	; 0x1fb4 <vfprintf+0x29a>
    1fa2:	14 60       	ori	r17, 0x04	; 4
    1fa4:	07 c0       	rjmp	.+14     	; 0x1fb4 <vfprintf+0x29a>
    1fa6:	14 ff       	sbrs	r17, 4
    1fa8:	08 c0       	rjmp	.+16     	; 0x1fba <vfprintf+0x2a0>
    1faa:	16 60       	ori	r17, 0x06	; 6
    1fac:	06 c0       	rjmp	.+12     	; 0x1fba <vfprintf+0x2a0>
    1fae:	28 e0       	ldi	r18, 0x08	; 8
    1fb0:	30 e0       	ldi	r19, 0x00	; 0
    1fb2:	05 c0       	rjmp	.+10     	; 0x1fbe <vfprintf+0x2a4>
    1fb4:	20 e1       	ldi	r18, 0x10	; 16
    1fb6:	30 e0       	ldi	r19, 0x00	; 0
    1fb8:	02 c0       	rjmp	.+4      	; 0x1fbe <vfprintf+0x2a4>
    1fba:	20 e1       	ldi	r18, 0x10	; 16
    1fbc:	32 e0       	ldi	r19, 0x02	; 2
    1fbe:	f5 01       	movw	r30, r10
    1fc0:	17 ff       	sbrs	r17, 7
    1fc2:	07 c0       	rjmp	.+14     	; 0x1fd2 <vfprintf+0x2b8>
    1fc4:	60 81       	ld	r22, Z
    1fc6:	71 81       	ldd	r23, Z+1	; 0x01
    1fc8:	82 81       	ldd	r24, Z+2	; 0x02
    1fca:	93 81       	ldd	r25, Z+3	; 0x03
    1fcc:	44 e0       	ldi	r20, 0x04	; 4
    1fce:	50 e0       	ldi	r21, 0x00	; 0
    1fd0:	06 c0       	rjmp	.+12     	; 0x1fde <vfprintf+0x2c4>
    1fd2:	60 81       	ld	r22, Z
    1fd4:	71 81       	ldd	r23, Z+1	; 0x01
    1fd6:	80 e0       	ldi	r24, 0x00	; 0
    1fd8:	90 e0       	ldi	r25, 0x00	; 0
    1fda:	42 e0       	ldi	r20, 0x02	; 2
    1fdc:	50 e0       	ldi	r21, 0x00	; 0
    1fde:	a4 0e       	add	r10, r20
    1fe0:	b5 1e       	adc	r11, r21
    1fe2:	a2 01       	movw	r20, r4
    1fe4:	0e 94 16 11 	call	0x222c	; 0x222c <__ultoa_invert>
    1fe8:	d8 2e       	mov	r13, r24
    1fea:	d4 18       	sub	r13, r4
    1fec:	01 2f       	mov	r16, r17
    1fee:	0f 77       	andi	r16, 0x7F	; 127
    1ff0:	06 ff       	sbrs	r16, 6
    1ff2:	09 c0       	rjmp	.+18     	; 0x2006 <vfprintf+0x2ec>
    1ff4:	0e 7f       	andi	r16, 0xFE	; 254
    1ff6:	df 14       	cp	r13, r15
    1ff8:	30 f4       	brcc	.+12     	; 0x2006 <vfprintf+0x2ec>
    1ffa:	04 ff       	sbrs	r16, 4
    1ffc:	06 c0       	rjmp	.+12     	; 0x200a <vfprintf+0x2f0>
    1ffe:	02 fd       	sbrc	r16, 2
    2000:	04 c0       	rjmp	.+8      	; 0x200a <vfprintf+0x2f0>
    2002:	0f 7e       	andi	r16, 0xEF	; 239
    2004:	02 c0       	rjmp	.+4      	; 0x200a <vfprintf+0x2f0>
    2006:	1d 2d       	mov	r17, r13
    2008:	01 c0       	rjmp	.+2      	; 0x200c <vfprintf+0x2f2>
    200a:	1f 2d       	mov	r17, r15
    200c:	80 2f       	mov	r24, r16
    200e:	90 e0       	ldi	r25, 0x00	; 0
    2010:	04 ff       	sbrs	r16, 4
    2012:	0c c0       	rjmp	.+24     	; 0x202c <vfprintf+0x312>
    2014:	fe 01       	movw	r30, r28
    2016:	ed 0d       	add	r30, r13
    2018:	f1 1d       	adc	r31, r1
    201a:	20 81       	ld	r18, Z
    201c:	20 33       	cpi	r18, 0x30	; 48
    201e:	11 f4       	brne	.+4      	; 0x2024 <vfprintf+0x30a>
    2020:	09 7e       	andi	r16, 0xE9	; 233
    2022:	09 c0       	rjmp	.+18     	; 0x2036 <vfprintf+0x31c>
    2024:	02 ff       	sbrs	r16, 2
    2026:	06 c0       	rjmp	.+12     	; 0x2034 <vfprintf+0x31a>
    2028:	1e 5f       	subi	r17, 0xFE	; 254
    202a:	05 c0       	rjmp	.+10     	; 0x2036 <vfprintf+0x31c>
    202c:	86 78       	andi	r24, 0x86	; 134
    202e:	90 70       	andi	r25, 0x00	; 0
    2030:	00 97       	sbiw	r24, 0x00	; 0
    2032:	09 f0       	breq	.+2      	; 0x2036 <vfprintf+0x31c>
    2034:	1f 5f       	subi	r17, 0xFF	; 255
    2036:	80 2e       	mov	r8, r16
    2038:	99 24       	eor	r9, r9
    203a:	03 fd       	sbrc	r16, 3
    203c:	12 c0       	rjmp	.+36     	; 0x2062 <vfprintf+0x348>
    203e:	00 ff       	sbrs	r16, 0
    2040:	0d c0       	rjmp	.+26     	; 0x205c <vfprintf+0x342>
    2042:	fd 2c       	mov	r15, r13
    2044:	1e 15       	cp	r17, r14
    2046:	50 f4       	brcc	.+20     	; 0x205c <vfprintf+0x342>
    2048:	fe 0c       	add	r15, r14
    204a:	f1 1a       	sub	r15, r17
    204c:	1e 2d       	mov	r17, r14
    204e:	06 c0       	rjmp	.+12     	; 0x205c <vfprintf+0x342>
    2050:	80 e2       	ldi	r24, 0x20	; 32
    2052:	90 e0       	ldi	r25, 0x00	; 0
    2054:	b3 01       	movw	r22, r6
    2056:	0e 94 ea 10 	call	0x21d4	; 0x21d4 <fputc>
    205a:	1f 5f       	subi	r17, 0xFF	; 255
    205c:	1e 15       	cp	r17, r14
    205e:	c0 f3       	brcs	.-16     	; 0x2050 <vfprintf+0x336>
    2060:	04 c0       	rjmp	.+8      	; 0x206a <vfprintf+0x350>
    2062:	1e 15       	cp	r17, r14
    2064:	10 f4       	brcc	.+4      	; 0x206a <vfprintf+0x350>
    2066:	e1 1a       	sub	r14, r17
    2068:	01 c0       	rjmp	.+2      	; 0x206c <vfprintf+0x352>
    206a:	ee 24       	eor	r14, r14
    206c:	84 fe       	sbrs	r8, 4
    206e:	0f c0       	rjmp	.+30     	; 0x208e <vfprintf+0x374>
    2070:	80 e3       	ldi	r24, 0x30	; 48
    2072:	90 e0       	ldi	r25, 0x00	; 0
    2074:	b3 01       	movw	r22, r6
    2076:	0e 94 ea 10 	call	0x21d4	; 0x21d4 <fputc>
    207a:	82 fe       	sbrs	r8, 2
    207c:	1f c0       	rjmp	.+62     	; 0x20bc <vfprintf+0x3a2>
    207e:	81 fe       	sbrs	r8, 1
    2080:	03 c0       	rjmp	.+6      	; 0x2088 <vfprintf+0x36e>
    2082:	88 e5       	ldi	r24, 0x58	; 88
    2084:	90 e0       	ldi	r25, 0x00	; 0
    2086:	10 c0       	rjmp	.+32     	; 0x20a8 <vfprintf+0x38e>
    2088:	88 e7       	ldi	r24, 0x78	; 120
    208a:	90 e0       	ldi	r25, 0x00	; 0
    208c:	0d c0       	rjmp	.+26     	; 0x20a8 <vfprintf+0x38e>
    208e:	c4 01       	movw	r24, r8
    2090:	86 78       	andi	r24, 0x86	; 134
    2092:	90 70       	andi	r25, 0x00	; 0
    2094:	00 97       	sbiw	r24, 0x00	; 0
    2096:	91 f0       	breq	.+36     	; 0x20bc <vfprintf+0x3a2>
    2098:	81 fc       	sbrc	r8, 1
    209a:	02 c0       	rjmp	.+4      	; 0x20a0 <vfprintf+0x386>
    209c:	80 e2       	ldi	r24, 0x20	; 32
    209e:	01 c0       	rjmp	.+2      	; 0x20a2 <vfprintf+0x388>
    20a0:	8b e2       	ldi	r24, 0x2B	; 43
    20a2:	07 fd       	sbrc	r16, 7
    20a4:	8d e2       	ldi	r24, 0x2D	; 45
    20a6:	90 e0       	ldi	r25, 0x00	; 0
    20a8:	b3 01       	movw	r22, r6
    20aa:	0e 94 ea 10 	call	0x21d4	; 0x21d4 <fputc>
    20ae:	06 c0       	rjmp	.+12     	; 0x20bc <vfprintf+0x3a2>
    20b0:	80 e3       	ldi	r24, 0x30	; 48
    20b2:	90 e0       	ldi	r25, 0x00	; 0
    20b4:	b3 01       	movw	r22, r6
    20b6:	0e 94 ea 10 	call	0x21d4	; 0x21d4 <fputc>
    20ba:	fa 94       	dec	r15
    20bc:	df 14       	cp	r13, r15
    20be:	c0 f3       	brcs	.-16     	; 0x20b0 <vfprintf+0x396>
    20c0:	da 94       	dec	r13
    20c2:	f2 01       	movw	r30, r4
    20c4:	ed 0d       	add	r30, r13
    20c6:	f1 1d       	adc	r31, r1
    20c8:	80 81       	ld	r24, Z
    20ca:	90 e0       	ldi	r25, 0x00	; 0
    20cc:	b3 01       	movw	r22, r6
    20ce:	0e 94 ea 10 	call	0x21d4	; 0x21d4 <fputc>
    20d2:	dd 20       	and	r13, r13
    20d4:	a9 f7       	brne	.-22     	; 0x20c0 <vfprintf+0x3a6>
    20d6:	06 c0       	rjmp	.+12     	; 0x20e4 <vfprintf+0x3ca>
    20d8:	80 e2       	ldi	r24, 0x20	; 32
    20da:	90 e0       	ldi	r25, 0x00	; 0
    20dc:	b3 01       	movw	r22, r6
    20de:	0e 94 ea 10 	call	0x21d4	; 0x21d4 <fputc>
    20e2:	ea 94       	dec	r14
    20e4:	ee 20       	and	r14, r14
    20e6:	c1 f7       	brne	.-16     	; 0x20d8 <vfprintf+0x3be>
    20e8:	40 ce       	rjmp	.-896    	; 0x1d6a <vfprintf+0x50>
    20ea:	f3 01       	movw	r30, r6
    20ec:	86 81       	ldd	r24, Z+6	; 0x06
    20ee:	97 81       	ldd	r25, Z+7	; 0x07
    20f0:	02 c0       	rjmp	.+4      	; 0x20f6 <vfprintf+0x3dc>
    20f2:	8f ef       	ldi	r24, 0xFF	; 255
    20f4:	9f ef       	ldi	r25, 0xFF	; 255
    20f6:	2d 96       	adiw	r28, 0x0d	; 13
    20f8:	0f b6       	in	r0, 0x3f	; 63
    20fa:	f8 94       	cli
    20fc:	de bf       	out	0x3e, r29	; 62
    20fe:	0f be       	out	0x3f, r0	; 63
    2100:	cd bf       	out	0x3d, r28	; 61
    2102:	df 91       	pop	r29
    2104:	cf 91       	pop	r28
    2106:	1f 91       	pop	r17
    2108:	0f 91       	pop	r16
    210a:	ff 90       	pop	r15
    210c:	ef 90       	pop	r14
    210e:	df 90       	pop	r13
    2110:	cf 90       	pop	r12
    2112:	bf 90       	pop	r11
    2114:	af 90       	pop	r10
    2116:	9f 90       	pop	r9
    2118:	8f 90       	pop	r8
    211a:	7f 90       	pop	r7
    211c:	6f 90       	pop	r6
    211e:	5f 90       	pop	r5
    2120:	4f 90       	pop	r4
    2122:	3f 90       	pop	r3
    2124:	2f 90       	pop	r2
    2126:	08 95       	ret

00002128 <strnlen_P>:
    2128:	fc 01       	movw	r30, r24
    212a:	05 90       	lpm	r0, Z+
    212c:	61 50       	subi	r22, 0x01	; 1
    212e:	70 40       	sbci	r23, 0x00	; 0
    2130:	01 10       	cpse	r0, r1
    2132:	d8 f7       	brcc	.-10     	; 0x212a <strnlen_P+0x2>
    2134:	80 95       	com	r24
    2136:	90 95       	com	r25
    2138:	8e 0f       	add	r24, r30
    213a:	9f 1f       	adc	r25, r31
    213c:	08 95       	ret

0000213e <strnlen>:
    213e:	fc 01       	movw	r30, r24
    2140:	61 50       	subi	r22, 0x01	; 1
    2142:	70 40       	sbci	r23, 0x00	; 0
    2144:	01 90       	ld	r0, Z+
    2146:	01 10       	cpse	r0, r1
    2148:	d8 f7       	brcc	.-10     	; 0x2140 <strnlen+0x2>
    214a:	80 95       	com	r24
    214c:	90 95       	com	r25
    214e:	8e 0f       	add	r24, r30
    2150:	9f 1f       	adc	r25, r31
    2152:	08 95       	ret

00002154 <fgetc>:
    2154:	cf 93       	push	r28
    2156:	df 93       	push	r29
    2158:	ec 01       	movw	r28, r24
    215a:	2b 81       	ldd	r18, Y+3	; 0x03
    215c:	20 ff       	sbrs	r18, 0
    215e:	35 c0       	rjmp	.+106    	; 0x21ca <fgetc+0x76>
    2160:	26 ff       	sbrs	r18, 6
    2162:	09 c0       	rjmp	.+18     	; 0x2176 <fgetc+0x22>
    2164:	2f 7b       	andi	r18, 0xBF	; 191
    2166:	2b 83       	std	Y+3, r18	; 0x03
    2168:	8e 81       	ldd	r24, Y+6	; 0x06
    216a:	9f 81       	ldd	r25, Y+7	; 0x07
    216c:	01 96       	adiw	r24, 0x01	; 1
    216e:	9f 83       	std	Y+7, r25	; 0x07
    2170:	8e 83       	std	Y+6, r24	; 0x06
    2172:	8a 81       	ldd	r24, Y+2	; 0x02
    2174:	28 c0       	rjmp	.+80     	; 0x21c6 <fgetc+0x72>
    2176:	22 ff       	sbrs	r18, 2
    2178:	0f c0       	rjmp	.+30     	; 0x2198 <fgetc+0x44>
    217a:	e8 81       	ld	r30, Y
    217c:	f9 81       	ldd	r31, Y+1	; 0x01
    217e:	80 81       	ld	r24, Z
    2180:	99 27       	eor	r25, r25
    2182:	87 fd       	sbrc	r24, 7
    2184:	90 95       	com	r25
    2186:	00 97       	sbiw	r24, 0x00	; 0
    2188:	19 f4       	brne	.+6      	; 0x2190 <fgetc+0x3c>
    218a:	20 62       	ori	r18, 0x20	; 32
    218c:	2b 83       	std	Y+3, r18	; 0x03
    218e:	1d c0       	rjmp	.+58     	; 0x21ca <fgetc+0x76>
    2190:	31 96       	adiw	r30, 0x01	; 1
    2192:	f9 83       	std	Y+1, r31	; 0x01
    2194:	e8 83       	st	Y, r30
    2196:	11 c0       	rjmp	.+34     	; 0x21ba <fgetc+0x66>
    2198:	ea 85       	ldd	r30, Y+10	; 0x0a
    219a:	fb 85       	ldd	r31, Y+11	; 0x0b
    219c:	ce 01       	movw	r24, r28
    219e:	19 95       	eicall
    21a0:	97 ff       	sbrs	r25, 7
    21a2:	0b c0       	rjmp	.+22     	; 0x21ba <fgetc+0x66>
    21a4:	2b 81       	ldd	r18, Y+3	; 0x03
    21a6:	3f ef       	ldi	r19, 0xFF	; 255
    21a8:	8f 3f       	cpi	r24, 0xFF	; 255
    21aa:	93 07       	cpc	r25, r19
    21ac:	11 f4       	brne	.+4      	; 0x21b2 <fgetc+0x5e>
    21ae:	80 e1       	ldi	r24, 0x10	; 16
    21b0:	01 c0       	rjmp	.+2      	; 0x21b4 <fgetc+0x60>
    21b2:	80 e2       	ldi	r24, 0x20	; 32
    21b4:	82 2b       	or	r24, r18
    21b6:	8b 83       	std	Y+3, r24	; 0x03
    21b8:	08 c0       	rjmp	.+16     	; 0x21ca <fgetc+0x76>
    21ba:	2e 81       	ldd	r18, Y+6	; 0x06
    21bc:	3f 81       	ldd	r19, Y+7	; 0x07
    21be:	2f 5f       	subi	r18, 0xFF	; 255
    21c0:	3f 4f       	sbci	r19, 0xFF	; 255
    21c2:	3f 83       	std	Y+7, r19	; 0x07
    21c4:	2e 83       	std	Y+6, r18	; 0x06
    21c6:	90 e0       	ldi	r25, 0x00	; 0
    21c8:	02 c0       	rjmp	.+4      	; 0x21ce <fgetc+0x7a>
    21ca:	8f ef       	ldi	r24, 0xFF	; 255
    21cc:	9f ef       	ldi	r25, 0xFF	; 255
    21ce:	df 91       	pop	r29
    21d0:	cf 91       	pop	r28
    21d2:	08 95       	ret

000021d4 <fputc>:
    21d4:	0f 93       	push	r16
    21d6:	1f 93       	push	r17
    21d8:	cf 93       	push	r28
    21da:	df 93       	push	r29
    21dc:	8c 01       	movw	r16, r24
    21de:	eb 01       	movw	r28, r22
    21e0:	8b 81       	ldd	r24, Y+3	; 0x03
    21e2:	81 ff       	sbrs	r24, 1
    21e4:	1b c0       	rjmp	.+54     	; 0x221c <__stack+0x1d>
    21e6:	82 ff       	sbrs	r24, 2
    21e8:	0d c0       	rjmp	.+26     	; 0x2204 <__stack+0x5>
    21ea:	2e 81       	ldd	r18, Y+6	; 0x06
    21ec:	3f 81       	ldd	r19, Y+7	; 0x07
    21ee:	8c 81       	ldd	r24, Y+4	; 0x04
    21f0:	9d 81       	ldd	r25, Y+5	; 0x05
    21f2:	28 17       	cp	r18, r24
    21f4:	39 07       	cpc	r19, r25
    21f6:	64 f4       	brge	.+24     	; 0x2210 <__stack+0x11>
    21f8:	e8 81       	ld	r30, Y
    21fa:	f9 81       	ldd	r31, Y+1	; 0x01
    21fc:	01 93       	st	Z+, r16
    21fe:	f9 83       	std	Y+1, r31	; 0x01
    2200:	e8 83       	st	Y, r30
    2202:	06 c0       	rjmp	.+12     	; 0x2210 <__stack+0x11>
    2204:	e8 85       	ldd	r30, Y+8	; 0x08
    2206:	f9 85       	ldd	r31, Y+9	; 0x09
    2208:	80 2f       	mov	r24, r16
    220a:	19 95       	eicall
    220c:	00 97       	sbiw	r24, 0x00	; 0
    220e:	31 f4       	brne	.+12     	; 0x221c <__stack+0x1d>
    2210:	8e 81       	ldd	r24, Y+6	; 0x06
    2212:	9f 81       	ldd	r25, Y+7	; 0x07
    2214:	01 96       	adiw	r24, 0x01	; 1
    2216:	9f 83       	std	Y+7, r25	; 0x07
    2218:	8e 83       	std	Y+6, r24	; 0x06
    221a:	02 c0       	rjmp	.+4      	; 0x2220 <__stack+0x21>
    221c:	0f ef       	ldi	r16, 0xFF	; 255
    221e:	1f ef       	ldi	r17, 0xFF	; 255
    2220:	c8 01       	movw	r24, r16
    2222:	df 91       	pop	r29
    2224:	cf 91       	pop	r28
    2226:	1f 91       	pop	r17
    2228:	0f 91       	pop	r16
    222a:	08 95       	ret

0000222c <__ultoa_invert>:
    222c:	fa 01       	movw	r30, r20
    222e:	aa 27       	eor	r26, r26
    2230:	28 30       	cpi	r18, 0x08	; 8
    2232:	51 f1       	breq	.+84     	; 0x2288 <__ultoa_invert+0x5c>
    2234:	20 31       	cpi	r18, 0x10	; 16
    2236:	81 f1       	breq	.+96     	; 0x2298 <__ultoa_invert+0x6c>
    2238:	e8 94       	clt
    223a:	6f 93       	push	r22
    223c:	6e 7f       	andi	r22, 0xFE	; 254
    223e:	6e 5f       	subi	r22, 0xFE	; 254
    2240:	7f 4f       	sbci	r23, 0xFF	; 255
    2242:	8f 4f       	sbci	r24, 0xFF	; 255
    2244:	9f 4f       	sbci	r25, 0xFF	; 255
    2246:	af 4f       	sbci	r26, 0xFF	; 255
    2248:	b1 e0       	ldi	r27, 0x01	; 1
    224a:	3e d0       	rcall	.+124    	; 0x22c8 <__ultoa_invert+0x9c>
    224c:	b4 e0       	ldi	r27, 0x04	; 4
    224e:	3c d0       	rcall	.+120    	; 0x22c8 <__ultoa_invert+0x9c>
    2250:	67 0f       	add	r22, r23
    2252:	78 1f       	adc	r23, r24
    2254:	89 1f       	adc	r24, r25
    2256:	9a 1f       	adc	r25, r26
    2258:	a1 1d       	adc	r26, r1
    225a:	68 0f       	add	r22, r24
    225c:	79 1f       	adc	r23, r25
    225e:	8a 1f       	adc	r24, r26
    2260:	91 1d       	adc	r25, r1
    2262:	a1 1d       	adc	r26, r1
    2264:	6a 0f       	add	r22, r26
    2266:	71 1d       	adc	r23, r1
    2268:	81 1d       	adc	r24, r1
    226a:	91 1d       	adc	r25, r1
    226c:	a1 1d       	adc	r26, r1
    226e:	20 d0       	rcall	.+64     	; 0x22b0 <__ultoa_invert+0x84>
    2270:	09 f4       	brne	.+2      	; 0x2274 <__ultoa_invert+0x48>
    2272:	68 94       	set
    2274:	3f 91       	pop	r19
    2276:	2a e0       	ldi	r18, 0x0A	; 10
    2278:	26 9f       	mul	r18, r22
    227a:	11 24       	eor	r1, r1
    227c:	30 19       	sub	r19, r0
    227e:	30 5d       	subi	r19, 0xD0	; 208
    2280:	31 93       	st	Z+, r19
    2282:	de f6       	brtc	.-74     	; 0x223a <__ultoa_invert+0xe>
    2284:	cf 01       	movw	r24, r30
    2286:	08 95       	ret
    2288:	46 2f       	mov	r20, r22
    228a:	47 70       	andi	r20, 0x07	; 7
    228c:	40 5d       	subi	r20, 0xD0	; 208
    228e:	41 93       	st	Z+, r20
    2290:	b3 e0       	ldi	r27, 0x03	; 3
    2292:	0f d0       	rcall	.+30     	; 0x22b2 <__ultoa_invert+0x86>
    2294:	c9 f7       	brne	.-14     	; 0x2288 <__ultoa_invert+0x5c>
    2296:	f6 cf       	rjmp	.-20     	; 0x2284 <__ultoa_invert+0x58>
    2298:	46 2f       	mov	r20, r22
    229a:	4f 70       	andi	r20, 0x0F	; 15
    229c:	40 5d       	subi	r20, 0xD0	; 208
    229e:	4a 33       	cpi	r20, 0x3A	; 58
    22a0:	18 f0       	brcs	.+6      	; 0x22a8 <__ultoa_invert+0x7c>
    22a2:	49 5d       	subi	r20, 0xD9	; 217
    22a4:	31 fd       	sbrc	r19, 1
    22a6:	40 52       	subi	r20, 0x20	; 32
    22a8:	41 93       	st	Z+, r20
    22aa:	02 d0       	rcall	.+4      	; 0x22b0 <__ultoa_invert+0x84>
    22ac:	a9 f7       	brne	.-22     	; 0x2298 <__ultoa_invert+0x6c>
    22ae:	ea cf       	rjmp	.-44     	; 0x2284 <__ultoa_invert+0x58>
    22b0:	b4 e0       	ldi	r27, 0x04	; 4
    22b2:	a6 95       	lsr	r26
    22b4:	97 95       	ror	r25
    22b6:	87 95       	ror	r24
    22b8:	77 95       	ror	r23
    22ba:	67 95       	ror	r22
    22bc:	ba 95       	dec	r27
    22be:	c9 f7       	brne	.-14     	; 0x22b2 <__ultoa_invert+0x86>
    22c0:	00 97       	sbiw	r24, 0x00	; 0
    22c2:	61 05       	cpc	r22, r1
    22c4:	71 05       	cpc	r23, r1
    22c6:	08 95       	ret
    22c8:	9b 01       	movw	r18, r22
    22ca:	ac 01       	movw	r20, r24
    22cc:	0a 2e       	mov	r0, r26
    22ce:	06 94       	lsr	r0
    22d0:	57 95       	ror	r21
    22d2:	47 95       	ror	r20
    22d4:	37 95       	ror	r19
    22d6:	27 95       	ror	r18
    22d8:	ba 95       	dec	r27
    22da:	c9 f7       	brne	.-14     	; 0x22ce <__ultoa_invert+0xa2>
    22dc:	62 0f       	add	r22, r18
    22de:	73 1f       	adc	r23, r19
    22e0:	84 1f       	adc	r24, r20
    22e2:	95 1f       	adc	r25, r21
    22e4:	a0 1d       	adc	r26, r0
    22e6:	08 95       	ret

000022e8 <_exit>:
    22e8:	f8 94       	cli

000022ea <__stop_program>:
    22ea:	ff cf       	rjmp	.-2      	; 0x22ea <__stop_program>
