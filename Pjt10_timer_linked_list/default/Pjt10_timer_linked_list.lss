
Pjt10_timer_linked_list.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000c4  00800200  000014b4  00001548  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000014b4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000099  008002c4  008002c4  0000160c  2**0
                  ALLOC
  3 .stab         00001110  00000000  00000000  0000160c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000033b  00000000  00000000  0000271c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000002a8  00000000  00000000  00002a58  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000246d  00000000  00000000  00002d00  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000011ab  00000000  00000000  0000516d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000013b7  00000000  00000000  00006318  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000067c  00000000  00000000  000076d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000704  00000000  00000000  00007d4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000199f  00000000  00000000  00008450  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  00009def  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
       4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
       8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
       c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      10:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      14:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      18:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      1c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      20:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      24:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      28:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      2c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      30:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      34:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      38:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      3c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      40:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      44:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      48:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      4c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      50:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      54:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      58:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      5c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      60:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      64:	0c 94 d6 03 	jmp	0x7ac	; 0x7ac <__vector_25>
      68:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      6c:	0c 94 a7 03 	jmp	0x74e	; 0x74e <__vector_27>
      70:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      74:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      78:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      7c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      80:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      84:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      88:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      8c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      90:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      94:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      98:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      9c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      a0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      a4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      a8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      ac:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      b0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      b4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      b8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      bc:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      c0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      c4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      c8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      cc:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      d0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      d4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      d8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      dc:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      e0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	12 e0       	ldi	r17, 0x02	; 2
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	e4 eb       	ldi	r30, 0xB4	; 180
      fc:	f4 e1       	ldi	r31, 0x14	; 20
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	a4 3c       	cpi	r26, 0xC4	; 196
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>
     10e:	1b be       	out	0x3b, r1	; 59

00000110 <__do_clear_bss>:
     110:	13 e0       	ldi	r17, 0x03	; 3
     112:	a4 ec       	ldi	r26, 0xC4	; 196
     114:	b2 e0       	ldi	r27, 0x02	; 2
     116:	01 c0       	rjmp	.+2      	; 0x11a <.do_clear_bss_start>

00000118 <.do_clear_bss_loop>:
     118:	1d 92       	st	X+, r1

0000011a <.do_clear_bss_start>:
     11a:	ad 35       	cpi	r26, 0x5D	; 93
     11c:	b1 07       	cpc	r27, r17
     11e:	e1 f7       	brne	.-8      	; 0x118 <.do_clear_bss_loop>
     120:	0e 94 d6 04 	call	0x9ac	; 0x9ac <main>
     124:	0c 94 58 0a 	jmp	0x14b0	; 0x14b0 <_exit>

00000128 <__bad_interrupt>:
     128:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012c <get_node>:
struct node *Head = NULL;

struct node *get_node() {
	struct node *cp;

	cp = (struct node *)malloc(sizeof(struct node));
     12c:	84 e0       	ldi	r24, 0x04	; 4
     12e:	90 e0       	ldi	r25, 0x00	; 0
     130:	0e 94 6c 05 	call	0xad8	; 0xad8 <malloc>
	return(cp);
}
     134:	08 95       	ret

00000136 <free_node>:


void free_node(struct node *np) {
	free(np);
     136:	0e 94 02 06 	call	0xc04	; 0xc04 <free>
}
     13a:	08 95       	ret

0000013c <insert_node_head>:

void insert_node_head(struct node *np) {
     13c:	fc 01       	movw	r30, r24
	if(!Head) {
     13e:	80 91 c4 02 	lds	r24, 0x02C4
     142:	90 91 c5 02 	lds	r25, 0x02C5
     146:	00 97       	sbiw	r24, 0x00	; 0
     148:	39 f4       	brne	.+14     	; 0x158 <insert_node_head+0x1c>
		Head = np;
     14a:	f0 93 c5 02 	sts	0x02C5, r31
     14e:	e0 93 c4 02 	sts	0x02C4, r30
		np->link = NULL;
     152:	13 82       	std	Z+3, r1	; 0x03
     154:	12 82       	std	Z+2, r1	; 0x02
     156:	08 95       	ret
	} else {
		np->link = Head;
     158:	93 83       	std	Z+3, r25	; 0x03
     15a:	82 83       	std	Z+2, r24	; 0x02
		Head = np;
     15c:	f0 93 c5 02 	sts	0x02C5, r31
     160:	e0 93 c4 02 	sts	0x02C4, r30
     164:	08 95       	ret

00000166 <insert_node_tail>:
}

void insert_node_tail(struct node *np) {
	struct node *cp;

	if(!Head)
     166:	e0 91 c4 02 	lds	r30, 0x02C4
     16a:	f0 91 c5 02 	lds	r31, 0x02C5
     16e:	30 97       	sbiw	r30, 0x00	; 0
     170:	31 f4       	brne	.+12     	; 0x17e <insert_node_tail+0x18>
		Head = np;
     172:	90 93 c5 02 	sts	0x02C5, r25
     176:	80 93 c4 02 	sts	0x02C4, r24
     17a:	08 c0       	rjmp	.+16     	; 0x18c <insert_node_tail+0x26>
	else {
		for(cp = Head;cp->link != NULL;cp = cp->link)
     17c:	f9 01       	movw	r30, r18
     17e:	22 81       	ldd	r18, Z+2	; 0x02
     180:	33 81       	ldd	r19, Z+3	; 0x03
     182:	21 15       	cp	r18, r1
     184:	31 05       	cpc	r19, r1
     186:	d1 f7       	brne	.-12     	; 0x17c <insert_node_tail+0x16>
			;
		cp->link = np;
     188:	93 83       	std	Z+3, r25	; 0x03
     18a:	82 83       	std	Z+2, r24	; 0x02
	}
	np->link = NULL;
     18c:	fc 01       	movw	r30, r24
     18e:	13 82       	std	Z+3, r1	; 0x03
     190:	12 82       	std	Z+2, r1	; 0x02
}
     192:	08 95       	ret

00000194 <insert_node_ascn>:

void insert_node_ascn(struct node *np) {
     194:	cf 93       	push	r28
     196:	df 93       	push	r29
     198:	fc 01       	movw	r30, r24
	struct node *cp, *pp;
	if(!Head) {
     19a:	20 91 c4 02 	lds	r18, 0x02C4
     19e:	30 91 c5 02 	lds	r19, 0x02C5
     1a2:	21 15       	cp	r18, r1
     1a4:	31 05       	cpc	r19, r1
     1a6:	31 f0       	breq	.+12     	; 0x1b4 <insert_node_ascn+0x20>
		Head = np;
		np->link = NULL;
	}
	else {
		for(cp = Head, pp = NULL;cp != NULL && cp->data < np->data;pp = cp, cp = cp->link)
     1a8:	40 81       	ld	r20, Z
     1aa:	51 81       	ldd	r21, Z+1	; 0x01
     1ac:	d9 01       	movw	r26, r18
     1ae:	c0 e0       	ldi	r28, 0x00	; 0
     1b0:	d0 e0       	ldi	r29, 0x00	; 0
     1b2:	0f c0       	rjmp	.+30     	; 0x1d2 <insert_node_ascn+0x3e>
}

void insert_node_ascn(struct node *np) {
	struct node *cp, *pp;
	if(!Head) {
		Head = np;
     1b4:	90 93 c5 02 	sts	0x02C5, r25
     1b8:	80 93 c4 02 	sts	0x02C4, r24
		np->link = NULL;
     1bc:	13 82       	std	Z+3, r1	; 0x03
     1be:	12 82       	std	Z+2, r1	; 0x02
     1c0:	1d c0       	rjmp	.+58     	; 0x1fc <insert_node_ascn+0x68>
	}
	else {
		for(cp = Head, pp = NULL;cp != NULL && cp->data < np->data;pp = cp, cp = cp->link)
     1c2:	12 96       	adiw	r26, 0x02	; 2
     1c4:	8d 91       	ld	r24, X+
     1c6:	9c 91       	ld	r25, X
     1c8:	13 97       	sbiw	r26, 0x03	; 3
     1ca:	ed 01       	movw	r28, r26
     1cc:	00 97       	sbiw	r24, 0x00	; 0
     1ce:	39 f0       	breq	.+14     	; 0x1de <insert_node_ascn+0x4a>
     1d0:	dc 01       	movw	r26, r24
     1d2:	8d 91       	ld	r24, X+
     1d4:	9c 91       	ld	r25, X
     1d6:	11 97       	sbiw	r26, 0x01	; 1
     1d8:	84 17       	cp	r24, r20
     1da:	95 07       	cpc	r25, r21
     1dc:	94 f3       	brlt	.-28     	; 0x1c2 <insert_node_ascn+0x2e>
			;
		if(pp == NULL) {
     1de:	20 97       	sbiw	r28, 0x00	; 0
     1e0:	39 f4       	brne	.+14     	; 0x1f0 <insert_node_ascn+0x5c>
			np->link = Head;
     1e2:	33 83       	std	Z+3, r19	; 0x03
     1e4:	22 83       	std	Z+2, r18	; 0x02
			Head = np;
     1e6:	f0 93 c5 02 	sts	0x02C5, r31
     1ea:	e0 93 c4 02 	sts	0x02C4, r30
     1ee:	06 c0       	rjmp	.+12     	; 0x1fc <insert_node_ascn+0x68>
		} else {
			np->link = pp->link;
     1f0:	8a 81       	ldd	r24, Y+2	; 0x02
     1f2:	9b 81       	ldd	r25, Y+3	; 0x03
     1f4:	93 83       	std	Z+3, r25	; 0x03
     1f6:	82 83       	std	Z+2, r24	; 0x02
			pp->link = np;
     1f8:	fb 83       	std	Y+3, r31	; 0x03
     1fa:	ea 83       	std	Y+2, r30	; 0x02
		}
	}
}
     1fc:	df 91       	pop	r29
     1fe:	cf 91       	pop	r28
     200:	08 95       	ret

00000202 <insert_node_desc>:

void insert_node_desc(struct node *np) {
     202:	cf 93       	push	r28
     204:	df 93       	push	r29
     206:	fc 01       	movw	r30, r24
	struct node *cp, *pp;
	if(!Head) {
     208:	20 91 c4 02 	lds	r18, 0x02C4
     20c:	30 91 c5 02 	lds	r19, 0x02C5
     210:	21 15       	cp	r18, r1
     212:	31 05       	cpc	r19, r1
     214:	31 f0       	breq	.+12     	; 0x222 <insert_node_desc+0x20>
		Head = np;
		np->link = NULL;
	}
	else {
		for(cp = Head, pp = NULL;cp != NULL && cp->data < np->data;pp = cp, cp = cp->link)
     216:	40 81       	ld	r20, Z
     218:	51 81       	ldd	r21, Z+1	; 0x01
     21a:	d9 01       	movw	r26, r18
     21c:	c0 e0       	ldi	r28, 0x00	; 0
     21e:	d0 e0       	ldi	r29, 0x00	; 0
     220:	0f c0       	rjmp	.+30     	; 0x240 <insert_node_desc+0x3e>
}

void insert_node_desc(struct node *np) {
	struct node *cp, *pp;
	if(!Head) {
		Head = np;
     222:	90 93 c5 02 	sts	0x02C5, r25
     226:	80 93 c4 02 	sts	0x02C4, r24
		np->link = NULL;
     22a:	13 82       	std	Z+3, r1	; 0x03
     22c:	12 82       	std	Z+2, r1	; 0x02
     22e:	1d c0       	rjmp	.+58     	; 0x26a <insert_node_desc+0x68>
	}
	else {
		for(cp = Head, pp = NULL;cp != NULL && cp->data < np->data;pp = cp, cp = cp->link)
     230:	12 96       	adiw	r26, 0x02	; 2
     232:	8d 91       	ld	r24, X+
     234:	9c 91       	ld	r25, X
     236:	13 97       	sbiw	r26, 0x03	; 3
     238:	ed 01       	movw	r28, r26
     23a:	00 97       	sbiw	r24, 0x00	; 0
     23c:	39 f0       	breq	.+14     	; 0x24c <insert_node_desc+0x4a>
     23e:	dc 01       	movw	r26, r24
     240:	8d 91       	ld	r24, X+
     242:	9c 91       	ld	r25, X
     244:	11 97       	sbiw	r26, 0x01	; 1
     246:	84 17       	cp	r24, r20
     248:	95 07       	cpc	r25, r21
     24a:	94 f3       	brlt	.-28     	; 0x230 <insert_node_desc+0x2e>
			;
		if(pp == NULL) {
     24c:	20 97       	sbiw	r28, 0x00	; 0
     24e:	39 f4       	brne	.+14     	; 0x25e <insert_node_desc+0x5c>
			np->link = pp->link;
     250:	8a 81       	ldd	r24, Y+2	; 0x02
     252:	9b 81       	ldd	r25, Y+3	; 0x03
     254:	93 83       	std	Z+3, r25	; 0x03
     256:	82 83       	std	Z+2, r24	; 0x02
			pp->link = np;
     258:	fb 83       	std	Y+3, r31	; 0x03
     25a:	ea 83       	std	Y+2, r30	; 0x02
     25c:	06 c0       	rjmp	.+12     	; 0x26a <insert_node_desc+0x68>
		} else {
			np->link = Head;
     25e:	33 83       	std	Z+3, r19	; 0x03
     260:	22 83       	std	Z+2, r18	; 0x02
			Head = np;
     262:	f0 93 c5 02 	sts	0x02C5, r31
     266:	e0 93 c4 02 	sts	0x02C4, r30
		}
	}
}
     26a:	df 91       	pop	r29
     26c:	cf 91       	pop	r28
     26e:	08 95       	ret

00000270 <tour_list>:

void tour_list() {
     270:	0f 93       	push	r16
     272:	1f 93       	push	r17
     274:	cf 93       	push	r28
     276:	df 93       	push	r29
	struct node *cp;

	printf("\n");
     278:	8a e0       	ldi	r24, 0x0A	; 10
     27a:	90 e0       	ldi	r25, 0x00	; 0
     27c:	0e 94 3c 07 	call	0xe78	; 0xe78 <putchar>
	for(cp = Head;cp != NULL;cp = cp->link)
     280:	c0 91 c4 02 	lds	r28, 0x02C4
     284:	d0 91 c5 02 	lds	r29, 0x02C5
		printf("-->%c ", cp->data);
     288:	00 e0       	ldi	r16, 0x00	; 0
     28a:	12 e0       	ldi	r17, 0x02	; 2

void tour_list() {
	struct node *cp;

	printf("\n");
	for(cp = Head;cp != NULL;cp = cp->link)
     28c:	13 c0       	rjmp	.+38     	; 0x2b4 <tour_list+0x44>
		printf("-->%c ", cp->data);
     28e:	00 d0       	rcall	.+0      	; 0x290 <tour_list+0x20>
     290:	0f 92       	push	r0
     292:	ed b7       	in	r30, 0x3d	; 61
     294:	fe b7       	in	r31, 0x3e	; 62
     296:	12 83       	std	Z+2, r17	; 0x02
     298:	01 83       	std	Z+1, r16	; 0x01
     29a:	88 81       	ld	r24, Y
     29c:	99 81       	ldd	r25, Y+1	; 0x01
     29e:	94 83       	std	Z+4, r25	; 0x04
     2a0:	83 83       	std	Z+3, r24	; 0x03
     2a2:	0e 94 2a 07 	call	0xe54	; 0xe54 <printf>

void tour_list() {
	struct node *cp;

	printf("\n");
	for(cp = Head;cp != NULL;cp = cp->link)
     2a6:	0a 80       	ldd	r0, Y+2	; 0x02
     2a8:	db 81       	ldd	r29, Y+3	; 0x03
     2aa:	c0 2d       	mov	r28, r0
     2ac:	0f 90       	pop	r0
     2ae:	0f 90       	pop	r0
     2b0:	0f 90       	pop	r0
     2b2:	0f 90       	pop	r0
     2b4:	20 97       	sbiw	r28, 0x00	; 0
     2b6:	59 f7       	brne	.-42     	; 0x28e <tour_list+0x1e>
		printf("-->%c ", cp->data);

	printf("\n");
     2b8:	8a e0       	ldi	r24, 0x0A	; 10
     2ba:	90 e0       	ldi	r25, 0x00	; 0
     2bc:	0e 94 3c 07 	call	0xe78	; 0xe78 <putchar>
}
     2c0:	df 91       	pop	r29
     2c2:	cf 91       	pop	r28
     2c4:	1f 91       	pop	r17
     2c6:	0f 91       	pop	r16
     2c8:	08 95       	ret

000002ca <free_list>:

void free_list() {
	struct node *cp;

	for( ;Head != NULL; ) {
     2ca:	09 c0       	rjmp	.+18     	; 0x2de <free_list+0x14>
		cp = Head;
		Head = cp->link;
     2cc:	fc 01       	movw	r30, r24
     2ce:	22 81       	ldd	r18, Z+2	; 0x02
     2d0:	33 81       	ldd	r19, Z+3	; 0x03
     2d2:	30 93 c5 02 	sts	0x02C5, r19
     2d6:	20 93 c4 02 	sts	0x02C4, r18
	return(cp);
}


void free_node(struct node *np) {
	free(np);
     2da:	0e 94 02 06 	call	0xc04	; 0xc04 <free>
}

void free_list() {
	struct node *cp;

	for( ;Head != NULL; ) {
     2de:	80 91 c4 02 	lds	r24, 0x02C4
     2e2:	90 91 c5 02 	lds	r25, 0x02C5
     2e6:	00 97       	sbiw	r24, 0x00	; 0
     2e8:	89 f7       	brne	.-30     	; 0x2cc <free_list+0x2>
		cp = Head;
		Head = cp->link;
		free_node(cp);
	}
}
     2ea:	08 95       	ret

000002ec <app_list>:
#include <string.h>
#include "link.h"
#include "app.h"
#include "timer.h"

void app_list(char *ap) {
     2ec:	ef 92       	push	r14
     2ee:	ff 92       	push	r15
     2f0:	1f 93       	push	r17
     2f2:	cf 93       	push	r28
     2f4:	df 93       	push	r29
     2f6:	cd b7       	in	r28, 0x3d	; 61
     2f8:	de b7       	in	r29, 0x3e	; 62
     2fa:	28 97       	sbiw	r28, 0x08	; 8
     2fc:	0f b6       	in	r0, 0x3f	; 63
     2fe:	f8 94       	cli
     300:	de bf       	out	0x3e, r29	; 62
     302:	0f be       	out	0x3f, r0	; 63
     304:	cd bf       	out	0x3d, r28	; 61
	char buf[8], how = 'a';
	struct node *np;

	if(ap)	how = *ap;
     306:	00 97       	sbiw	r24, 0x00	; 0
     308:	19 f0       	breq	.+6      	; 0x310 <app_list+0x24>
     30a:	fc 01       	movw	r30, r24
     30c:	10 81       	ld	r17, Z
     30e:	01 c0       	rjmp	.+2      	; 0x312 <app_list+0x26>
#include "link.h"
#include "app.h"
#include "timer.h"

void app_list(char *ap) {
	char buf[8], how = 'a';
     310:	11 e6       	ldi	r17, 0x61	; 97
	struct node *np;

	if(ap)	how = *ap;
	while(1) {
		printf("> ");
     312:	87 e0       	ldi	r24, 0x07	; 7
     314:	e8 2e       	mov	r14, r24
     316:	82 e0       	ldi	r24, 0x02	; 2
     318:	f8 2e       	mov	r15, r24
     31a:	0f 92       	push	r0
     31c:	0f 92       	push	r0
     31e:	ed b7       	in	r30, 0x3d	; 61
     320:	fe b7       	in	r31, 0x3e	; 62
     322:	f2 82       	std	Z+2, r15	; 0x02
     324:	e1 82       	std	Z+1, r14	; 0x01
     326:	0e 94 2a 07 	call	0xe54	; 0xe54 <printf>
		if(fgets(buf, 8, stdin) == NULL)
     32a:	0f 90       	pop	r0
     32c:	0f 90       	pop	r0
     32e:	40 91 57 03 	lds	r20, 0x0357
     332:	50 91 58 03 	lds	r21, 0x0358
     336:	ce 01       	movw	r24, r28
     338:	01 96       	adiw	r24, 0x01	; 1
     33a:	68 e0       	ldi	r22, 0x08	; 8
     33c:	70 e0       	ldi	r23, 0x00	; 0
     33e:	0e 94 f6 06 	call	0xdec	; 0xdec <fgets>
     342:	00 97       	sbiw	r24, 0x00	; 0
     344:	c9 f0       	breq	.+50     	; 0x378 <app_list+0x8c>
			break;
		np = get_node();
     346:	0e 94 96 00 	call	0x12c	; 0x12c <get_node>
		np->data = buf[0];
     34a:	29 81       	ldd	r18, Y+1	; 0x01
     34c:	fc 01       	movw	r30, r24
     34e:	20 83       	st	Z, r18
     350:	11 82       	std	Z+1, r1	; 0x01
		switch(how) {
     352:	18 36       	cpi	r17, 0x68	; 104
     354:	29 f0       	breq	.+10     	; 0x360 <app_list+0x74>
     356:	14 37       	cpi	r17, 0x74	; 116
     358:	31 f0       	breq	.+12     	; 0x366 <app_list+0x7a>
     35a:	14 36       	cpi	r17, 0x64	; 100
     35c:	51 f4       	brne	.+20     	; 0x372 <app_list+0x86>
     35e:	06 c0       	rjmp	.+12     	; 0x36c <app_list+0x80>
			case 'h' 	: insert_node_head(np);	break;
     360:	0e 94 9e 00 	call	0x13c	; 0x13c <insert_node_head>
     364:	da cf       	rjmp	.-76     	; 0x31a <app_list+0x2e>
			case 't' 	: insert_node_tail(np);	break;
     366:	0e 94 b3 00 	call	0x166	; 0x166 <insert_node_tail>
     36a:	d7 cf       	rjmp	.-82     	; 0x31a <app_list+0x2e>
			case 'd' 	: insert_node_desc(np);	break;
     36c:	0e 94 01 01 	call	0x202	; 0x202 <insert_node_desc>
     370:	d4 cf       	rjmp	.-88     	; 0x31a <app_list+0x2e>
			default  	: insert_node_ascn(np);
     372:	0e 94 ca 00 	call	0x194	; 0x194 <insert_node_ascn>
     376:	d1 cf       	rjmp	.-94     	; 0x31a <app_list+0x2e>
		}
	}
	tour_list();
     378:	0e 94 38 01 	call	0x270	; 0x270 <tour_list>
	free_list();
     37c:	0e 94 65 01 	call	0x2ca	; 0x2ca <free_list>
}
     380:	28 96       	adiw	r28, 0x08	; 8
     382:	0f b6       	in	r0, 0x3f	; 63
     384:	f8 94       	cli
     386:	de bf       	out	0x3e, r29	; 62
     388:	0f be       	out	0x3f, r0	; 63
     38a:	cd bf       	out	0x3d, r28	; 61
     38c:	df 91       	pop	r29
     38e:	cf 91       	pop	r28
     390:	1f 91       	pop	r17
     392:	ff 90       	pop	r15
     394:	ef 90       	pop	r14
     396:	08 95       	ret

00000398 <app_timer>:

void app_timer(char *ap) {
     398:	0f 93       	push	r16
     39a:	1f 93       	push	r17
     39c:	cf 93       	push	r28
     39e:	df 93       	push	r29
     3a0:	cd b7       	in	r28, 0x3d	; 61
     3a2:	de b7       	in	r29, 0x3e	; 62
     3a4:	62 97       	sbiw	r28, 0x12	; 18
     3a6:	0f b6       	in	r0, 0x3f	; 63
     3a8:	f8 94       	cli
     3aa:	de bf       	out	0x3e, r29	; 62
     3ac:	0f be       	out	0x3f, r0	; 63
     3ae:	cd bf       	out	0x3d, r28	; 61
	char		buf[8];
	int			ms;
	struct task tsk;

	while(1) {
		printf(">>");
     3b0:	0a e0       	ldi	r16, 0x0A	; 10
     3b2:	12 e0       	ldi	r17, 0x02	; 2
     3b4:	0f 92       	push	r0
     3b6:	0f 92       	push	r0
     3b8:	ed b7       	in	r30, 0x3d	; 61
     3ba:	fe b7       	in	r31, 0x3e	; 62
     3bc:	12 83       	std	Z+2, r17	; 0x02
     3be:	01 83       	std	Z+1, r16	; 0x01
     3c0:	0e 94 2a 07 	call	0xe54	; 0xe54 <printf>
		if(fgets(buf, 8, stdin) == NULL || (ms = atoi(buf)) == 0)
     3c4:	0f 90       	pop	r0
     3c6:	0f 90       	pop	r0
     3c8:	40 91 57 03 	lds	r20, 0x0357
     3cc:	50 91 58 03 	lds	r21, 0x0358
     3d0:	ce 01       	movw	r24, r28
     3d2:	01 96       	adiw	r24, 0x01	; 1
     3d4:	68 e0       	ldi	r22, 0x08	; 8
     3d6:	70 e0       	ldi	r23, 0x00	; 0
     3d8:	0e 94 f6 06 	call	0xdec	; 0xdec <fgets>
     3dc:	00 97       	sbiw	r24, 0x00	; 0
     3de:	61 f0       	breq	.+24     	; 0x3f8 <app_timer+0x60>
     3e0:	ce 01       	movw	r24, r28
     3e2:	01 96       	adiw	r24, 0x01	; 1
     3e4:	0e 94 9b 06 	call	0xd36	; 0xd36 <atoi>
     3e8:	bc 01       	movw	r22, r24
     3ea:	00 97       	sbiw	r24, 0x00	; 0
     3ec:	29 f0       	breq	.+10     	; 0x3f8 <app_timer+0x60>
			break;

		insert_timer(&tsk, ms);
     3ee:	ce 01       	movw	r24, r28
     3f0:	09 96       	adiw	r24, 0x09	; 9
     3f2:	0e 94 10 04 	call	0x820	; 0x820 <insert_timer>
	}
     3f6:	de cf       	rjmp	.-68     	; 0x3b4 <app_timer+0x1c>
	tour_timer();
     3f8:	0e 94 83 04 	call	0x906	; 0x906 <tour_timer>
	free_timer();
     3fc:	0e 94 c5 04 	call	0x98a	; 0x98a <free_timer>
}
     400:	62 96       	adiw	r28, 0x12	; 18
     402:	0f b6       	in	r0, 0x3f	; 63
     404:	f8 94       	cli
     406:	de bf       	out	0x3e, r29	; 62
     408:	0f be       	out	0x3f, r0	; 63
     40a:	cd bf       	out	0x3d, r28	; 61
     40c:	df 91       	pop	r29
     40e:	cf 91       	pop	r28
     410:	1f 91       	pop	r17
     412:	0f 91       	pop	r16
     414:	08 95       	ret

00000416 <app_add>:

void app_add(char *ap) {
     416:	cf 93       	push	r28
     418:	df 93       	push	r29
	int t1, t2;
    if (ap != NULL) {
     41a:	00 97       	sbiw	r24, 0x00	; 0
     41c:	49 f1       	breq	.+82     	; 0x470 <app_add+0x5a>
        char *bp = strtok(ap, " ");
     41e:	6d e0       	ldi	r22, 0x0D	; 13
     420:	72 e0       	ldi	r23, 0x02	; 2
     422:	0e 94 b9 06 	call	0xd72	; 0xd72 <strtok>
        if (bp != NULL) {
     426:	00 97       	sbiw	r24, 0x00	; 0
     428:	01 f1       	breq	.+64     	; 0x46a <app_add+0x54>
            t1 = atoi(bp); 
     42a:	0e 94 9b 06 	call	0xd36	; 0xd36 <atoi>
     42e:	ec 01       	movw	r28, r24
            bp = strtok(NULL, " "); 
     430:	80 e0       	ldi	r24, 0x00	; 0
     432:	90 e0       	ldi	r25, 0x00	; 0
     434:	6d e0       	ldi	r22, 0x0D	; 13
     436:	72 e0       	ldi	r23, 0x02	; 2
     438:	0e 94 b9 06 	call	0xd72	; 0xd72 <strtok>
            if (bp != NULL) {
     43c:	00 97       	sbiw	r24, 0x00	; 0
     43e:	c1 f0       	breq	.+48     	; 0x470 <app_add+0x5a>
                t2 = atoi(bp); 
     440:	0e 94 9b 06 	call	0xd36	; 0xd36 <atoi>
                printf("add = %d\n", t1 + t2); 
     444:	00 d0       	rcall	.+0      	; 0x446 <app_add+0x30>
     446:	0f 92       	push	r0
     448:	2f e0       	ldi	r18, 0x0F	; 15
     44a:	32 e0       	ldi	r19, 0x02	; 2
     44c:	ed b7       	in	r30, 0x3d	; 61
     44e:	fe b7       	in	r31, 0x3e	; 62
     450:	32 83       	std	Z+2, r19	; 0x02
     452:	21 83       	std	Z+1, r18	; 0x01
     454:	c8 0f       	add	r28, r24
     456:	d9 1f       	adc	r29, r25
     458:	d4 83       	std	Z+4, r29	; 0x04
     45a:	c3 83       	std	Z+3, r28	; 0x03
     45c:	0e 94 2a 07 	call	0xe54	; 0xe54 <printf>
     460:	0f 90       	pop	r0
     462:	0f 90       	pop	r0
     464:	0f 90       	pop	r0
     466:	0f 90       	pop	r0
     468:	07 c0       	rjmp	.+14     	; 0x478 <app_add+0x62>
            } else {
                printf("error...\n"); 
            }
        } else {
            printf("error\n"); 
     46a:	82 e2       	ldi	r24, 0x22	; 34
     46c:	92 e0       	ldi	r25, 0x02	; 2
     46e:	02 c0       	rjmp	.+4      	; 0x474 <app_add+0x5e>
        }
    } else {
        printf("error...\n");
     470:	89 e1       	ldi	r24, 0x19	; 25
     472:	92 e0       	ldi	r25, 0x02	; 2
     474:	0e 94 43 07 	call	0xe86	; 0xe86 <puts>
    }
}
     478:	df 91       	pop	r29
     47a:	cf 91       	pop	r28
     47c:	08 95       	ret

0000047e <is_prime>:
#include <stdio.h>
#include <stdlib.h>
#include <compat/deprecated.h>
#include "prime.h"

int is_prime(int n) {
     47e:	cf 93       	push	r28
     480:	df 93       	push	r29
     482:	fc 01       	movw	r30, r24
	int i;
	for(i = 2;i <= n/2;i++)
     484:	62 e0       	ldi	r22, 0x02	; 2
     486:	70 e0       	ldi	r23, 0x00	; 0
     488:	0e 94 45 05 	call	0xa8a	; 0xa8a <__divmodhi4>
     48c:	eb 01       	movw	r28, r22
     48e:	22 e0       	ldi	r18, 0x02	; 2
     490:	30 e0       	ldi	r19, 0x00	; 0
     492:	08 c0       	rjmp	.+16     	; 0x4a4 <is_prime+0x26>
		if((n % i) == 0)
     494:	cf 01       	movw	r24, r30
     496:	b9 01       	movw	r22, r18
     498:	0e 94 45 05 	call	0xa8a	; 0xa8a <__divmodhi4>
     49c:	00 97       	sbiw	r24, 0x00	; 0
     49e:	41 f0       	breq	.+16     	; 0x4b0 <is_prime+0x32>
#include <compat/deprecated.h>
#include "prime.h"

int is_prime(int n) {
	int i;
	for(i = 2;i <= n/2;i++)
     4a0:	2f 5f       	subi	r18, 0xFF	; 255
     4a2:	3f 4f       	sbci	r19, 0xFF	; 255
     4a4:	c2 17       	cp	r28, r18
     4a6:	d3 07       	cpc	r29, r19
     4a8:	ac f7       	brge	.-22     	; 0x494 <is_prime+0x16>
		if((n % i) == 0)
			return(0);
	return(1);
     4aa:	81 e0       	ldi	r24, 0x01	; 1
     4ac:	90 e0       	ldi	r25, 0x00	; 0
     4ae:	02 c0       	rjmp	.+4      	; 0x4b4 <is_prime+0x36>

int is_prime(int n) {
	int i;
	for(i = 2;i <= n/2;i++)
		if((n % i) == 0)
			return(0);
     4b0:	80 e0       	ldi	r24, 0x00	; 0
     4b2:	90 e0       	ldi	r25, 0x00	; 0
	return(1);
}
     4b4:	df 91       	pop	r29
     4b6:	cf 91       	pop	r28
     4b8:	08 95       	ret

000004ba <app_prime>:

void app_prime(char *ap) {
     4ba:	cf 92       	push	r12
     4bc:	df 92       	push	r13
     4be:	ef 92       	push	r14
     4c0:	ff 92       	push	r15
     4c2:	0f 93       	push	r16
     4c4:	1f 93       	push	r17
     4c6:	cf 93       	push	r28
     4c8:	df 93       	push	r29
	int t = 2000, n, count = 0;
	if(ap) t = atoi(ap);
     4ca:	00 97       	sbiw	r24, 0x00	; 0
     4cc:	21 f0       	breq	.+8      	; 0x4d6 <app_prime+0x1c>
     4ce:	0e 94 9b 06 	call	0xd36	; 0xd36 <atoi>
     4d2:	7c 01       	movw	r14, r24
     4d4:	04 c0       	rjmp	.+8      	; 0x4de <app_prime+0x24>
			return(0);
	return(1);
}

void app_prime(char *ap) {
	int t = 2000, n, count = 0;
     4d6:	90 ed       	ldi	r25, 0xD0	; 208
     4d8:	e9 2e       	mov	r14, r25
     4da:	97 e0       	ldi	r25, 0x07	; 7
     4dc:	f9 2e       	mov	r15, r25
     4de:	00 e0       	ldi	r16, 0x00	; 0
     4e0:	10 e0       	ldi	r17, 0x00	; 0
	if(ap) t = atoi(ap);
	for(n = 2;n <= t;n++) {
     4e2:	c2 e0       	ldi	r28, 0x02	; 2
     4e4:	d0 e0       	ldi	r29, 0x00	; 0
		if(is_prime(n)) {
			count++;
			printf("%d is a prime number !!! \n", n);
     4e6:	8f e6       	ldi	r24, 0x6F	; 111
     4e8:	c8 2e       	mov	r12, r24
     4ea:	82 e0       	ldi	r24, 0x02	; 2
     4ec:	d8 2e       	mov	r13, r24
}

void app_prime(char *ap) {
	int t = 2000, n, count = 0;
	if(ap) t = atoi(ap);
	for(n = 2;n <= t;n++) {
     4ee:	16 c0       	rjmp	.+44     	; 0x51c <app_prime+0x62>
		if(is_prime(n)) {
     4f0:	ce 01       	movw	r24, r28
     4f2:	0e 94 3f 02 	call	0x47e	; 0x47e <is_prime>
     4f6:	00 97       	sbiw	r24, 0x00	; 0
     4f8:	81 f0       	breq	.+32     	; 0x51a <app_prime+0x60>
			count++;
     4fa:	0f 5f       	subi	r16, 0xFF	; 255
     4fc:	1f 4f       	sbci	r17, 0xFF	; 255
			printf("%d is a prime number !!! \n", n);
     4fe:	00 d0       	rcall	.+0      	; 0x500 <app_prime+0x46>
     500:	0f 92       	push	r0
     502:	ed b7       	in	r30, 0x3d	; 61
     504:	fe b7       	in	r31, 0x3e	; 62
     506:	d2 82       	std	Z+2, r13	; 0x02
     508:	c1 82       	std	Z+1, r12	; 0x01
     50a:	d4 83       	std	Z+4, r29	; 0x04
     50c:	c3 83       	std	Z+3, r28	; 0x03
     50e:	0e 94 2a 07 	call	0xe54	; 0xe54 <printf>
     512:	0f 90       	pop	r0
     514:	0f 90       	pop	r0
     516:	0f 90       	pop	r0
     518:	0f 90       	pop	r0
}

void app_prime(char *ap) {
	int t = 2000, n, count = 0;
	if(ap) t = atoi(ap);
	for(n = 2;n <= t;n++) {
     51a:	21 96       	adiw	r28, 0x01	; 1
     51c:	ec 16       	cp	r14, r28
     51e:	fd 06       	cpc	r15, r29
     520:	3c f7       	brge	.-50     	; 0x4f0 <app_prime+0x36>
		if(is_prime(n)) {
			count++;
			printf("%d is a prime number !!! \n", n);
		}
	}
	printf("count = %d\n", count);
     522:	00 d0       	rcall	.+0      	; 0x524 <app_prime+0x6a>
     524:	0f 92       	push	r0
     526:	8a e8       	ldi	r24, 0x8A	; 138
     528:	92 e0       	ldi	r25, 0x02	; 2
     52a:	ed b7       	in	r30, 0x3d	; 61
     52c:	fe b7       	in	r31, 0x3e	; 62
     52e:	92 83       	std	Z+2, r25	; 0x02
     530:	81 83       	std	Z+1, r24	; 0x01
     532:	14 83       	std	Z+4, r17	; 0x04
     534:	03 83       	std	Z+3, r16	; 0x03
     536:	0e 94 2a 07 	call	0xe54	; 0xe54 <printf>
     53a:	0f 90       	pop	r0
     53c:	0f 90       	pop	r0
     53e:	0f 90       	pop	r0
     540:	0f 90       	pop	r0
}
     542:	df 91       	pop	r29
     544:	cf 91       	pop	r28
     546:	1f 91       	pop	r17
     548:	0f 91       	pop	r16
     54a:	ff 90       	pop	r15
     54c:	ef 90       	pop	r14
     54e:	df 90       	pop	r13
     550:	cf 90       	pop	r12
     552:	08 95       	ret

00000554 <q_init>:

char 	qi[QI_SIZE], qo[QO_SIZE];
int 	fi, ri, fo, ro;

void q_init() {
	fi = ri = fo = ro = 0;
     554:	10 92 0f 03 	sts	0x030F, r1
     558:	10 92 0e 03 	sts	0x030E, r1
     55c:	10 92 0d 03 	sts	0x030D, r1
     560:	10 92 0c 03 	sts	0x030C, r1
     564:	10 92 11 03 	sts	0x0311, r1
     568:	10 92 10 03 	sts	0x0310, r1
     56c:	10 92 cb 02 	sts	0x02CB, r1
     570:	10 92 ca 02 	sts	0x02CA, r1
}
     574:	08 95       	ret

00000576 <qi_insert>:


int qi_insert(char ch) {
     576:	48 2f       	mov	r20, r24
	if((ri + 1) % QI_SIZE == fi)
     578:	20 91 10 03 	lds	r18, 0x0310
     57c:	30 91 11 03 	lds	r19, 0x0311
     580:	2f 5f       	subi	r18, 0xFF	; 255
     582:	3f 4f       	sbci	r19, 0xFF	; 255
     584:	c9 01       	movw	r24, r18
     586:	60 e4       	ldi	r22, 0x40	; 64
     588:	70 e0       	ldi	r23, 0x00	; 0
     58a:	0e 94 45 05 	call	0xa8a	; 0xa8a <__divmodhi4>
     58e:	9c 01       	movw	r18, r24
     590:	80 91 ca 02 	lds	r24, 0x02CA
     594:	90 91 cb 02 	lds	r25, 0x02CB
     598:	28 17       	cp	r18, r24
     59a:	39 07       	cpc	r19, r25
     59c:	59 f0       	breq	.+22     	; 0x5b4 <qi_insert+0x3e>
		return(0);
	ri = (ri + 1) % QI_SIZE;
     59e:	30 93 11 03 	sts	0x0311, r19
     5a2:	20 93 10 03 	sts	0x0310, r18
	qi[ri] = ch;
     5a6:	2e 5e       	subi	r18, 0xEE	; 238
     5a8:	3c 4f       	sbci	r19, 0xFC	; 252
     5aa:	f9 01       	movw	r30, r18
     5ac:	40 83       	st	Z, r20
	return(1);
     5ae:	81 e0       	ldi	r24, 0x01	; 1
     5b0:	90 e0       	ldi	r25, 0x00	; 0
     5b2:	08 95       	ret
}


int qi_insert(char ch) {
	if((ri + 1) % QI_SIZE == fi)
		return(0);
     5b4:	80 e0       	ldi	r24, 0x00	; 0
     5b6:	90 e0       	ldi	r25, 0x00	; 0
	ri = (ri + 1) % QI_SIZE;
	qi[ri] = ch;
	return(1);
}
     5b8:	08 95       	ret

000005ba <qi_delete>:

int qi_delete() {
	if(ri == fi)
     5ba:	80 91 ca 02 	lds	r24, 0x02CA
     5be:	90 91 cb 02 	lds	r25, 0x02CB
     5c2:	20 91 10 03 	lds	r18, 0x0310
     5c6:	30 91 11 03 	lds	r19, 0x0311
     5ca:	28 17       	cp	r18, r24
     5cc:	39 07       	cpc	r19, r25
     5ce:	79 f0       	breq	.+30     	; 0x5ee <qi_delete+0x34>
		return(0);
	fi = (fi + 1) % QI_SIZE;
     5d0:	01 96       	adiw	r24, 0x01	; 1
     5d2:	60 e4       	ldi	r22, 0x40	; 64
     5d4:	70 e0       	ldi	r23, 0x00	; 0
     5d6:	0e 94 45 05 	call	0xa8a	; 0xa8a <__divmodhi4>
     5da:	90 93 cb 02 	sts	0x02CB, r25
     5de:	80 93 ca 02 	sts	0x02CA, r24
	return(qi[fi]);
     5e2:	8e 5e       	subi	r24, 0xEE	; 238
     5e4:	9c 4f       	sbci	r25, 0xFC	; 252
     5e6:	fc 01       	movw	r30, r24
     5e8:	80 81       	ld	r24, Z
     5ea:	90 e0       	ldi	r25, 0x00	; 0
     5ec:	08 95       	ret
	return(1);
}

int qi_delete() {
	if(ri == fi)
		return(0);
     5ee:	80 e0       	ldi	r24, 0x00	; 0
     5f0:	90 e0       	ldi	r25, 0x00	; 0
	fi = (fi + 1) % QI_SIZE;
	return(qi[fi]);
}
     5f2:	08 95       	ret

000005f4 <qo_insert>:

int qo_insert(char ch) {
     5f4:	48 2f       	mov	r20, r24
	if((ro + 1) % QO_SIZE == fo)
     5f6:	20 91 0e 03 	lds	r18, 0x030E
     5fa:	30 91 0f 03 	lds	r19, 0x030F
     5fe:	2f 5f       	subi	r18, 0xFF	; 255
     600:	3f 4f       	sbci	r19, 0xFF	; 255
     602:	c9 01       	movw	r24, r18
     604:	60 e4       	ldi	r22, 0x40	; 64
     606:	70 e0       	ldi	r23, 0x00	; 0
     608:	0e 94 45 05 	call	0xa8a	; 0xa8a <__divmodhi4>
     60c:	9c 01       	movw	r18, r24
     60e:	80 91 0c 03 	lds	r24, 0x030C
     612:	90 91 0d 03 	lds	r25, 0x030D
     616:	28 17       	cp	r18, r24
     618:	39 07       	cpc	r19, r25
     61a:	59 f0       	breq	.+22     	; 0x632 <qo_insert+0x3e>
		return(0);
	ro = (ro + 1) % QO_SIZE;
     61c:	30 93 0f 03 	sts	0x030F, r19
     620:	20 93 0e 03 	sts	0x030E, r18
	qo[ro] = ch;
     624:	24 53       	subi	r18, 0x34	; 52
     626:	3d 4f       	sbci	r19, 0xFD	; 253
     628:	f9 01       	movw	r30, r18
     62a:	40 83       	st	Z, r20
	return(1);
     62c:	81 e0       	ldi	r24, 0x01	; 1
     62e:	90 e0       	ldi	r25, 0x00	; 0
     630:	08 95       	ret
	return(qi[fi]);
}

int qo_insert(char ch) {
	if((ro + 1) % QO_SIZE == fo)
		return(0);
     632:	80 e0       	ldi	r24, 0x00	; 0
     634:	90 e0       	ldi	r25, 0x00	; 0
	ro = (ro + 1) % QO_SIZE;
	qo[ro] = ch;
	return(1);
}
     636:	08 95       	ret

00000638 <qo_delete>:

int qo_delete() {
	if(ro == fo)
     638:	80 91 0c 03 	lds	r24, 0x030C
     63c:	90 91 0d 03 	lds	r25, 0x030D
     640:	20 91 0e 03 	lds	r18, 0x030E
     644:	30 91 0f 03 	lds	r19, 0x030F
     648:	28 17       	cp	r18, r24
     64a:	39 07       	cpc	r19, r25
     64c:	79 f0       	breq	.+30     	; 0x66c <qo_delete+0x34>
		return(0);
	fo = (fo + 1) % QO_SIZE;
     64e:	01 96       	adiw	r24, 0x01	; 1
     650:	60 e4       	ldi	r22, 0x40	; 64
     652:	70 e0       	ldi	r23, 0x00	; 0
     654:	0e 94 45 05 	call	0xa8a	; 0xa8a <__divmodhi4>
     658:	90 93 0d 03 	sts	0x030D, r25
     65c:	80 93 0c 03 	sts	0x030C, r24
	return(qo[fo]);
     660:	84 53       	subi	r24, 0x34	; 52
     662:	9d 4f       	sbci	r25, 0xFD	; 253
     664:	fc 01       	movw	r30, r24
     666:	80 81       	ld	r24, Z
     668:	90 e0       	ldi	r25, 0x00	; 0
     66a:	08 95       	ret
	return(1);
}

int qo_delete() {
	if(ro == fo)
		return(0);
     66c:	80 e0       	ldi	r24, 0x00	; 0
     66e:	90 e0       	ldi	r25, 0x00	; 0
	fo = (fo + 1) % QO_SIZE;
	return(qo[fo]);
}
     670:	08 95       	ret

00000672 <uart_getchar>:

int uart_getchar(FILE *stream) {
	char ch;

	do {
		cli();
     672:	f8 94       	cli
		ch = qi_delete();
     674:	0e 94 dd 02 	call	0x5ba	; 0x5ba <qi_delete>
		sei();
     678:	78 94       	sei
	} while (ch == 0);
     67a:	88 23       	and	r24, r24
     67c:	d1 f3       	breq	.-12     	; 0x672 <uart_getchar>

	if(ch == EOT)	return(-1);
     67e:	84 30       	cpi	r24, 0x04	; 4
     680:	11 f0       	breq	.+4      	; 0x686 <uart_getchar+0x14>
	else			return(ch);
     682:	90 e0       	ldi	r25, 0x00	; 0
     684:	08 95       	ret
		cli();
		ch = qi_delete();
		sei();
	} while (ch == 0);

	if(ch == EOT)	return(-1);
     686:	8f ef       	ldi	r24, 0xFF	; 255
     688:	9f ef       	ldi	r25, 0xFF	; 255
	else			return(ch);
}
     68a:	08 95       	ret

0000068c <uart_putchar>:
	sbi(UCSR0B, TXCIE0);
	sbi(UCSR0B, RXEN0);
	sbi(UCSR0B, RXCIE0);
}

int uart_putchar(char ch, FILE *stream) {
     68c:	cf 93       	push	r28
     68e:	c8 2f       	mov	r28, r24
	if(ch == '\n')	uart_putchar('\r', stream);
     690:	8a 30       	cpi	r24, 0x0A	; 10
     692:	19 f4       	brne	.+6      	; 0x69a <uart_putchar+0xe>
     694:	8d e0       	ldi	r24, 0x0D	; 13
     696:	0e 94 46 03 	call	0x68c	; 0x68c <uart_putchar>
	
	cli();
     69a:	f8 94       	cli
	if(!uart_busy) {
     69c:	80 91 52 03 	lds	r24, 0x0352
     6a0:	88 23       	and	r24, r24
     6a2:	61 f4       	brne	.+24     	; 0x6bc <uart_putchar+0x30>
		UDR0 = ch;
     6a4:	c0 93 c6 00 	sts	0x00C6, r28
		uart_busy = 1;
     6a8:	81 e0       	ldi	r24, 0x01	; 1
     6aa:	80 93 52 03 	sts	0x0352, r24
     6ae:	0b c0       	rjmp	.+22     	; 0x6c6 <uart_putchar+0x3a>
	} 
	else {
		while(qo_insert(ch) == 0) {
			sei();
     6b0:	78 94       	sei
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     6b2:	81 e2       	ldi	r24, 0x21	; 33
     6b4:	8a 95       	dec	r24
     6b6:	f1 f7       	brne	.-4      	; 0x6b4 <uart_putchar+0x28>
     6b8:	00 00       	nop
			_delay_us(100);
			cli();
     6ba:	f8 94       	cli
	if(!uart_busy) {
		UDR0 = ch;
		uart_busy = 1;
	} 
	else {
		while(qo_insert(ch) == 0) {
     6bc:	8c 2f       	mov	r24, r28
     6be:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <qo_insert>
     6c2:	00 97       	sbiw	r24, 0x00	; 0
     6c4:	a9 f3       	breq	.-22     	; 0x6b0 <uart_putchar+0x24>
			sei();
			_delay_us(100);
			cli();
		}
	}
	sei();
     6c6:	78 94       	sei

	return(1);
}
     6c8:	81 e0       	ldi	r24, 0x01	; 1
     6ca:	90 e0       	ldi	r25, 0x00	; 0
     6cc:	cf 91       	pop	r28
     6ce:	08 95       	ret

000006d0 <uart_init>:
FILE	Mystdout = FDEV_SETUP_STREAM(uart_putchar, NULL, _FDEV_SETUP_WRITE);
FILE	Mystdin = FDEV_SETUP_STREAM(NULL, uart_getchar, _FDEV_SETUP_READ);
char	uart_busy;

void uart_init() {
	stdin = &Mystdin; stdout = &Mystdout;
     6d0:	86 e9       	ldi	r24, 0x96	; 150
     6d2:	92 e0       	ldi	r25, 0x02	; 2
     6d4:	90 93 58 03 	sts	0x0358, r25
     6d8:	80 93 57 03 	sts	0x0357, r24
     6dc:	84 ea       	ldi	r24, 0xA4	; 164
     6de:	92 e0       	ldi	r25, 0x02	; 2
     6e0:	90 93 5a 03 	sts	0x035A, r25
     6e4:	80 93 59 03 	sts	0x0359, r24
	q_init();
     6e8:	0e 94 aa 02 	call	0x554	; 0x554 <q_init>
	uart_busy = 0;
     6ec:	10 92 52 03 	sts	0x0352, r1
	
	UBRR0H = 0x00; UBRR0L = 0x07;
     6f0:	10 92 c5 00 	sts	0x00C5, r1
     6f4:	87 e0       	ldi	r24, 0x07	; 7
     6f6:	80 93 c4 00 	sts	0x00C4, r24
	sbi(UCSR0A, U2X0);
     6fa:	e0 ec       	ldi	r30, 0xC0	; 192
     6fc:	f0 e0       	ldi	r31, 0x00	; 0
     6fe:	80 81       	ld	r24, Z
     700:	82 60       	ori	r24, 0x02	; 2
     702:	80 83       	st	Z, r24
	sbi(UCSR0B, TXEN0);
     704:	e1 ec       	ldi	r30, 0xC1	; 193
     706:	f0 e0       	ldi	r31, 0x00	; 0
     708:	80 81       	ld	r24, Z
     70a:	88 60       	ori	r24, 0x08	; 8
     70c:	80 83       	st	Z, r24
	sbi(UCSR0B, TXCIE0);
     70e:	80 81       	ld	r24, Z
     710:	80 64       	ori	r24, 0x40	; 64
     712:	80 83       	st	Z, r24
	sbi(UCSR0B, RXEN0);
     714:	80 81       	ld	r24, Z
     716:	80 61       	ori	r24, 0x10	; 16
     718:	80 83       	st	Z, r24
	sbi(UCSR0B, RXCIE0);
     71a:	80 81       	ld	r24, Z
     71c:	80 68       	ori	r24, 0x80	; 128
     71e:	80 83       	st	Z, r24
}
     720:	08 95       	ret

00000722 <uart_echo>:

	if(ch == EOT)	return(-1);
	else			return(ch);
}

void uart_echo (char ch) {
     722:	cf 93       	push	r28
     724:	c8 2f       	mov	r28, r24
	if(ch == '\n')	uart_echo('\r');
     726:	8a 30       	cpi	r24, 0x0A	; 10
     728:	19 f4       	brne	.+6      	; 0x730 <uart_echo+0xe>
     72a:	8d e0       	ldi	r24, 0x0D	; 13
     72c:	0e 94 91 03 	call	0x722	; 0x722 <uart_echo>
	if(!uart_busy) {
     730:	80 91 52 03 	lds	r24, 0x0352
     734:	88 23       	and	r24, r24
     736:	31 f4       	brne	.+12     	; 0x744 <uart_echo+0x22>
		UDR0 = ch;
     738:	c0 93 c6 00 	sts	0x00C6, r28
		uart_busy = 1;
     73c:	81 e0       	ldi	r24, 0x01	; 1
     73e:	80 93 52 03 	sts	0x0352, r24
     742:	03 c0       	rjmp	.+6      	; 0x74a <uart_echo+0x28>
	}
	else	qo_insert(ch);
     744:	8c 2f       	mov	r24, r28
     746:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <qo_insert>
}
     74a:	cf 91       	pop	r28
     74c:	08 95       	ret

0000074e <__vector_27>:

ISR(USART0_TX_vect) {
     74e:	1f 92       	push	r1
     750:	0f 92       	push	r0
     752:	0f b6       	in	r0, 0x3f	; 63
     754:	0f 92       	push	r0
     756:	0b b6       	in	r0, 0x3b	; 59
     758:	0f 92       	push	r0
     75a:	11 24       	eor	r1, r1
     75c:	2f 93       	push	r18
     75e:	3f 93       	push	r19
     760:	4f 93       	push	r20
     762:	5f 93       	push	r21
     764:	6f 93       	push	r22
     766:	7f 93       	push	r23
     768:	8f 93       	push	r24
     76a:	9f 93       	push	r25
     76c:	af 93       	push	r26
     76e:	bf 93       	push	r27
     770:	ef 93       	push	r30
     772:	ff 93       	push	r31
   char ch;

   if((ch = qo_delete()) == 0)
     774:	0e 94 1c 03 	call	0x638	; 0x638 <qo_delete>
     778:	88 23       	and	r24, r24
     77a:	19 f4       	brne	.+6      	; 0x782 <__vector_27+0x34>
      uart_busy = 0;
     77c:	10 92 52 03 	sts	0x0352, r1
     780:	02 c0       	rjmp	.+4      	; 0x786 <__vector_27+0x38>
   else
      UDR0 = ch;
     782:	80 93 c6 00 	sts	0x00C6, r24
}
     786:	ff 91       	pop	r31
     788:	ef 91       	pop	r30
     78a:	bf 91       	pop	r27
     78c:	af 91       	pop	r26
     78e:	9f 91       	pop	r25
     790:	8f 91       	pop	r24
     792:	7f 91       	pop	r23
     794:	6f 91       	pop	r22
     796:	5f 91       	pop	r21
     798:	4f 91       	pop	r20
     79a:	3f 91       	pop	r19
     79c:	2f 91       	pop	r18
     79e:	0f 90       	pop	r0
     7a0:	0b be       	out	0x3b, r0	; 59
     7a2:	0f 90       	pop	r0
     7a4:	0f be       	out	0x3f, r0	; 63
     7a6:	0f 90       	pop	r0
     7a8:	1f 90       	pop	r1
     7aa:	18 95       	reti

000007ac <__vector_25>:

ISR(USART0_RX_vect) {
     7ac:	1f 92       	push	r1
     7ae:	0f 92       	push	r0
     7b0:	0f b6       	in	r0, 0x3f	; 63
     7b2:	0f 92       	push	r0
     7b4:	0b b6       	in	r0, 0x3b	; 59
     7b6:	0f 92       	push	r0
     7b8:	11 24       	eor	r1, r1
     7ba:	2f 93       	push	r18
     7bc:	3f 93       	push	r19
     7be:	4f 93       	push	r20
     7c0:	5f 93       	push	r21
     7c2:	6f 93       	push	r22
     7c4:	7f 93       	push	r23
     7c6:	8f 93       	push	r24
     7c8:	9f 93       	push	r25
     7ca:	af 93       	push	r26
     7cc:	bf 93       	push	r27
     7ce:	cf 93       	push	r28
     7d0:	ef 93       	push	r30
     7d2:	ff 93       	push	r31
	char ch;

	ch = UDR0;
     7d4:	c0 91 c6 00 	lds	r28, 0x00C6
	
	if(ch != EOT) {
     7d8:	c4 30       	cpi	r28, 0x04	; 4
     7da:	31 f0       	breq	.+12     	; 0x7e8 <__vector_25+0x3c>
		if(ch == '\r')	ch = '\n';
     7dc:	cd 30       	cpi	r28, 0x0D	; 13
     7de:	09 f4       	brne	.+2      	; 0x7e2 <__vector_25+0x36>
     7e0:	ca e0       	ldi	r28, 0x0A	; 10
		uart_echo(ch);
     7e2:	8c 2f       	mov	r24, r28
     7e4:	0e 94 91 03 	call	0x722	; 0x722 <uart_echo>
	}
	qi_insert(ch);
     7e8:	8c 2f       	mov	r24, r28
     7ea:	0e 94 bb 02 	call	0x576	; 0x576 <qi_insert>
}
     7ee:	ff 91       	pop	r31
     7f0:	ef 91       	pop	r30
     7f2:	cf 91       	pop	r28
     7f4:	bf 91       	pop	r27
     7f6:	af 91       	pop	r26
     7f8:	9f 91       	pop	r25
     7fa:	8f 91       	pop	r24
     7fc:	7f 91       	pop	r23
     7fe:	6f 91       	pop	r22
     800:	5f 91       	pop	r21
     802:	4f 91       	pop	r20
     804:	3f 91       	pop	r19
     806:	2f 91       	pop	r18
     808:	0f 90       	pop	r0
     80a:	0b be       	out	0x3b, r0	; 59
     80c:	0f 90       	pop	r0
     80e:	0f be       	out	0x3f, r0	; 63
     810:	0f 90       	pop	r0
     812:	1f 90       	pop	r1
     814:	18 95       	reti

00000816 <get_timer>:
#include "timer.h"

struct timer *get_timer() {
	struct timer *tp;

	tp = (struct timer *)malloc(sizeof(*tp));
     816:	8e e0       	ldi	r24, 0x0E	; 14
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	0e 94 6c 05 	call	0xad8	; 0xad8 <malloc>
	return(tp);
}
     81e:	08 95       	ret

00000820 <insert_timer>:

struct timer *Thead = NULL;
void insert_timer(struct task *tskp, int ms) {
     820:	ef 92       	push	r14
     822:	ff 92       	push	r15
     824:	0f 93       	push	r16
     826:	1f 93       	push	r17
     828:	cf 93       	push	r28
     82a:	df 93       	push	r29
     82c:	f8 2e       	mov	r15, r24
     82e:	e9 2e       	mov	r14, r25
     830:	8b 01       	movw	r16, r22
	int 			total;
	struct timer 	*tp, *cp, *pp;

	tp = get_timer();
     832:	0e 94 0b 04 	call	0x816	; 0x816 <get_timer>
     836:	ec 01       	movw	r28, r24
	tp->task = *tskp;
     838:	dc 01       	movw	r26, r24
     83a:	12 96       	adiw	r26, 0x02	; 2
     83c:	ef 2d       	mov	r30, r15
     83e:	fe 2d       	mov	r31, r14
     840:	8a e0       	ldi	r24, 0x0A	; 10
     842:	01 90       	ld	r0, Z+
     844:	0d 92       	st	X+, r0
     846:	81 50       	subi	r24, 0x01	; 1
     848:	e1 f7       	brne	.-8      	; 0x842 <insert_timer+0x22>
	tp->time = ms;
     84a:	19 83       	std	Y+1, r17	; 0x01
     84c:	08 83       	st	Y, r16

	if(Thead == NULL) {
     84e:	e0 91 c6 02 	lds	r30, 0x02C6
     852:	f0 91 c7 02 	lds	r31, 0x02C7
     856:	30 97       	sbiw	r30, 0x00	; 0
     858:	29 f4       	brne	.+10     	; 0x864 <insert_timer+0x44>
		Thead = tp, tp->link = NULL;
     85a:	d0 93 c7 02 	sts	0x02C7, r29
     85e:	c0 93 c6 02 	sts	0x02C6, r28
     862:	2f c0       	rjmp	.+94     	; 0x8c2 <insert_timer+0xa2>

	tp = get_timer();
	tp->task = *tskp;
	tp->time = ms;

	if(Thead == NULL) {
     864:	40 e0       	ldi	r20, 0x00	; 0
     866:	50 e0       	ldi	r21, 0x00	; 0
     868:	20 e0       	ldi	r18, 0x00	; 0
     86a:	30 e0       	ldi	r19, 0x00	; 0
     86c:	01 c0       	rjmp	.+2      	; 0x870 <insert_timer+0x50>
		return;
	}

	pp = NULL, total = 0;

	for(cp = Thead;cp;cp = cp->link) {
     86e:	fd 01       	movw	r30, r26
		total += cp->time;
     870:	80 81       	ld	r24, Z
     872:	91 81       	ldd	r25, Z+1	; 0x01
     874:	28 0f       	add	r18, r24
     876:	39 1f       	adc	r19, r25
		if(total >= ms)
     878:	20 17       	cp	r18, r16
     87a:	31 07       	cpc	r19, r17
     87c:	34 f4       	brge	.+12     	; 0x88a <insert_timer+0x6a>
		return;
	}

	pp = NULL, total = 0;

	for(cp = Thead;cp;cp = cp->link) {
     87e:	a4 85       	ldd	r26, Z+12	; 0x0c
     880:	b5 85       	ldd	r27, Z+13	; 0x0d
     882:	af 01       	movw	r20, r30
     884:	10 97       	sbiw	r26, 0x00	; 0
     886:	99 f7       	brne	.-26     	; 0x86e <insert_timer+0x4e>
     888:	01 c0       	rjmp	.+2      	; 0x88c <insert_timer+0x6c>
		total += cp->time;
		if(total >= ms)
     88a:	df 01       	movw	r26, r30
			break;
		pp = cp;
	}

	if(pp == NULL) {
     88c:	41 15       	cp	r20, r1
     88e:	51 05       	cpc	r21, r1
     890:	79 f4       	brne	.+30     	; 0x8b0 <insert_timer+0x90>
		cp->time -= tp->time;
     892:	8d 91       	ld	r24, X+
     894:	9c 91       	ld	r25, X
     896:	11 97       	sbiw	r26, 0x01	; 1
     898:	80 1b       	sub	r24, r16
     89a:	91 0b       	sbc	r25, r17
     89c:	11 96       	adiw	r26, 0x01	; 1
     89e:	9c 93       	st	X, r25
     8a0:	8e 93       	st	-X, r24
		tp->link = cp, Thead = tp;
     8a2:	bd 87       	std	Y+13, r27	; 0x0d
     8a4:	ac 87       	std	Y+12, r26	; 0x0c
     8a6:	d0 93 c7 02 	sts	0x02C7, r29
     8aa:	c0 93 c6 02 	sts	0x02C6, r28
     8ae:	24 c0       	rjmp	.+72     	; 0x8f8 <insert_timer+0xd8>
	}
	else if(cp == NULL) {
     8b0:	10 97       	sbiw	r26, 0x00	; 0
     8b2:	51 f4       	brne	.+20     	; 0x8c8 <insert_timer+0xa8>
		tp->time -= total;
     8b4:	02 1b       	sub	r16, r18
     8b6:	13 0b       	sbc	r17, r19
     8b8:	19 83       	std	Y+1, r17	; 0x01
     8ba:	08 83       	st	Y, r16
		pp->link = tp;
     8bc:	fa 01       	movw	r30, r20
     8be:	d5 87       	std	Z+13, r29	; 0x0d
     8c0:	c4 87       	std	Z+12, r28	; 0x0c
		tp->link = NULL;
     8c2:	1d 86       	std	Y+13, r1	; 0x0d
     8c4:	1c 86       	std	Y+12, r1	; 0x0c
     8c6:	18 c0       	rjmp	.+48     	; 0x8f8 <insert_timer+0xd8>
	}
	else {
		total -= cp->time;
     8c8:	8d 91       	ld	r24, X+
     8ca:	9c 91       	ld	r25, X
     8cc:	11 97       	sbiw	r26, 0x01	; 1
     8ce:	b9 01       	movw	r22, r18
     8d0:	68 1b       	sub	r22, r24
     8d2:	79 0b       	sbc	r23, r25
		tp->time -= total;
     8d4:	98 01       	movw	r18, r16
     8d6:	26 1b       	sub	r18, r22
     8d8:	37 0b       	sbc	r19, r23
     8da:	39 83       	std	Y+1, r19	; 0x01
     8dc:	28 83       	st	Y, r18
		cp->time -= tp->time;
     8de:	8d 91       	ld	r24, X+
     8e0:	9c 91       	ld	r25, X
     8e2:	11 97       	sbiw	r26, 0x01	; 1
     8e4:	82 1b       	sub	r24, r18
     8e6:	93 0b       	sbc	r25, r19
     8e8:	11 96       	adiw	r26, 0x01	; 1
     8ea:	9c 93       	st	X, r25
     8ec:	8e 93       	st	-X, r24
		pp->link = tp;
     8ee:	fa 01       	movw	r30, r20
     8f0:	d5 87       	std	Z+13, r29	; 0x0d
     8f2:	c4 87       	std	Z+12, r28	; 0x0c
		tp->link = cp;
     8f4:	bd 87       	std	Y+13, r27	; 0x0d
     8f6:	ac 87       	std	Y+12, r26	; 0x0c
	}
}
     8f8:	df 91       	pop	r29
     8fa:	cf 91       	pop	r28
     8fc:	1f 91       	pop	r17
     8fe:	0f 91       	pop	r16
     900:	ff 90       	pop	r15
     902:	ef 90       	pop	r14
     904:	08 95       	ret

00000906 <tour_timer>:

void tour_timer() {
     906:	ef 92       	push	r14
     908:	ff 92       	push	r15
     90a:	0f 93       	push	r16
     90c:	1f 93       	push	r17
     90e:	cf 93       	push	r28
     910:	df 93       	push	r29
	struct timer *cp;
	int total = 0;

	printf("\n");
     912:	8a e0       	ldi	r24, 0x0A	; 10
     914:	90 e0       	ldi	r25, 0x00	; 0
     916:	0e 94 3c 07 	call	0xe78	; 0xe78 <putchar>
	for(cp = Thead;cp != NULL;cp = cp->link) {
     91a:	c0 91 c6 02 	lds	r28, 0x02C6
     91e:	d0 91 c7 02 	lds	r29, 0x02C7
	}
}

void tour_timer() {
	struct timer *cp;
	int total = 0;
     922:	00 e0       	ldi	r16, 0x00	; 0
     924:	10 e0       	ldi	r17, 0x00	; 0

	printf("\n");
	for(cp = Thead;cp != NULL;cp = cp->link) {
		total += cp->time;
		printf("-->%d(%d) ", cp->time, total);
     926:	82 eb       	ldi	r24, 0xB2	; 178
     928:	e8 2e       	mov	r14, r24
     92a:	82 e0       	ldi	r24, 0x02	; 2
     92c:	f8 2e       	mov	r15, r24
void tour_timer() {
	struct timer *cp;
	int total = 0;

	printf("\n");
	for(cp = Thead;cp != NULL;cp = cp->link) {
     92e:	20 c0       	rjmp	.+64     	; 0x970 <tour_timer+0x6a>
		total += cp->time;
     930:	88 81       	ld	r24, Y
     932:	99 81       	ldd	r25, Y+1	; 0x01
     934:	08 0f       	add	r16, r24
     936:	19 1f       	adc	r17, r25
		printf("-->%d(%d) ", cp->time, total);
     938:	00 d0       	rcall	.+0      	; 0x93a <tour_timer+0x34>
     93a:	00 d0       	rcall	.+0      	; 0x93c <tour_timer+0x36>
     93c:	ed b7       	in	r30, 0x3d	; 61
     93e:	fe b7       	in	r31, 0x3e	; 62
     940:	31 96       	adiw	r30, 0x01	; 1
     942:	ad b7       	in	r26, 0x3d	; 61
     944:	be b7       	in	r27, 0x3e	; 62
     946:	12 96       	adiw	r26, 0x02	; 2
     948:	fc 92       	st	X, r15
     94a:	ee 92       	st	-X, r14
     94c:	11 97       	sbiw	r26, 0x01	; 1
     94e:	93 83       	std	Z+3, r25	; 0x03
     950:	82 83       	std	Z+2, r24	; 0x02
     952:	15 83       	std	Z+5, r17	; 0x05
     954:	04 83       	std	Z+4, r16	; 0x04
     956:	0e 94 2a 07 	call	0xe54	; 0xe54 <printf>
void tour_timer() {
	struct timer *cp;
	int total = 0;

	printf("\n");
	for(cp = Thead;cp != NULL;cp = cp->link) {
     95a:	0c 84       	ldd	r0, Y+12	; 0x0c
     95c:	dd 85       	ldd	r29, Y+13	; 0x0d
     95e:	c0 2d       	mov	r28, r0
     960:	8d b7       	in	r24, 0x3d	; 61
     962:	9e b7       	in	r25, 0x3e	; 62
     964:	06 96       	adiw	r24, 0x06	; 6
     966:	0f b6       	in	r0, 0x3f	; 63
     968:	f8 94       	cli
     96a:	9e bf       	out	0x3e, r25	; 62
     96c:	0f be       	out	0x3f, r0	; 63
     96e:	8d bf       	out	0x3d, r24	; 61
     970:	20 97       	sbiw	r28, 0x00	; 0
     972:	f1 f6       	brne	.-68     	; 0x930 <tour_timer+0x2a>
		total += cp->time;
		printf("-->%d(%d) ", cp->time, total);
	}
	printf("\n");
     974:	8a e0       	ldi	r24, 0x0A	; 10
     976:	90 e0       	ldi	r25, 0x00	; 0
     978:	0e 94 3c 07 	call	0xe78	; 0xe78 <putchar>
}
     97c:	df 91       	pop	r29
     97e:	cf 91       	pop	r28
     980:	1f 91       	pop	r17
     982:	0f 91       	pop	r16
     984:	ff 90       	pop	r15
     986:	ef 90       	pop	r14
     988:	08 95       	ret

0000098a <free_timer>:

void free_timer() {
	struct timer *cp;

	for( ;Thead != NULL; ) {
     98a:	09 c0       	rjmp	.+18     	; 0x99e <free_timer+0x14>
		cp = Thead;
		Thead = cp->link;
     98c:	fc 01       	movw	r30, r24
     98e:	24 85       	ldd	r18, Z+12	; 0x0c
     990:	35 85       	ldd	r19, Z+13	; 0x0d
     992:	30 93 c7 02 	sts	0x02C7, r19
     996:	20 93 c6 02 	sts	0x02C6, r18
		free(cp);
     99a:	0e 94 02 06 	call	0xc04	; 0xc04 <free>
}

void free_timer() {
	struct timer *cp;

	for( ;Thead != NULL; ) {
     99e:	80 91 c6 02 	lds	r24, 0x02C6
     9a2:	90 91 c7 02 	lds	r25, 0x02C7
     9a6:	00 97       	sbiw	r24, 0x00	; 0
     9a8:	89 f7       	brne	.-30     	; 0x98c <free_timer+0x2>
		cp = Thead;
		Thead = cp->link;
		free(cp);
	}
}
     9aa:	08 95       	ret

000009ac <main>:
#include "prime.h"
#include "queue.h"
#include "link.h"
#include "app.h"

int main() {
     9ac:	cf 93       	push	r28
     9ae:	df 93       	push	r29
     9b0:	cd b7       	in	r28, 0x3d	; 61
     9b2:	de b7       	in	r29, 0x3e	; 62
     9b4:	c0 58       	subi	r28, 0x80	; 128
     9b6:	d0 40       	sbci	r29, 0x00	; 0
     9b8:	0f b6       	in	r0, 0x3f	; 63
     9ba:	f8 94       	cli
     9bc:	de bf       	out	0x3e, r29	; 62
     9be:	0f be       	out	0x3f, r0	; 63
     9c0:	cd bf       	out	0x3d, r28	; 61
	char cmd[128], *cp, *ap;
	int n = 0;	

	uart_init();
     9c2:	0e 94 68 03 	call	0x6d0	; 0x6d0 <uart_init>
	sei();
     9c6:	78 94       	sei
	while(1) {
		printf("$ ");
     9c8:	88 e2       	ldi	r24, 0x28	; 40
     9ca:	c8 2e       	mov	r12, r24
     9cc:	82 e0       	ldi	r24, 0x02	; 2
     9ce:	d8 2e       	mov	r13, r24
     9d0:	0f 92       	push	r0
     9d2:	0f 92       	push	r0
     9d4:	ed b7       	in	r30, 0x3d	; 61
     9d6:	fe b7       	in	r31, 0x3e	; 62
     9d8:	d2 82       	std	Z+2, r13	; 0x02
     9da:	c1 82       	std	Z+1, r12	; 0x01
     9dc:	0e 94 2a 07 	call	0xe54	; 0xe54 <printf>
		if(fgets(cmd, sizeof(cmd), stdin) == NULL)	break;
     9e0:	0f 90       	pop	r0
     9e2:	0f 90       	pop	r0
     9e4:	40 91 57 03 	lds	r20, 0x0357
     9e8:	50 91 58 03 	lds	r21, 0x0358
     9ec:	ce 01       	movw	r24, r28
     9ee:	01 96       	adiw	r24, 0x01	; 1
     9f0:	60 e8       	ldi	r22, 0x80	; 128
     9f2:	70 e0       	ldi	r23, 0x00	; 0
     9f4:	0e 94 f6 06 	call	0xdec	; 0xdec <fgets>
     9f8:	00 97       	sbiw	r24, 0x00	; 0
     9fa:	09 f4       	brne	.+2      	; 0x9fe <main+0x52>
     9fc:	41 c0       	rjmp	.+130    	; 0xa80 <main+0xd4>

		if((cp = strtok(cmd, "\n\r\t  ")) == NULL)	continue;
     9fe:	ce 01       	movw	r24, r28
     a00:	01 96       	adiw	r24, 0x01	; 1
     a02:	6b e2       	ldi	r22, 0x2B	; 43
     a04:	72 e0       	ldi	r23, 0x02	; 2
     a06:	0e 94 b9 06 	call	0xd72	; 0xd72 <strtok>
     a0a:	8c 01       	movw	r16, r24
     a0c:	00 97       	sbiw	r24, 0x00	; 0
     a0e:	01 f3       	breq	.-64     	; 0x9d0 <main+0x24>
		ap = strtok(NULL, "");
     a10:	80 e0       	ldi	r24, 0x00	; 0
     a12:	90 e0       	ldi	r25, 0x00	; 0
     a14:	61 e3       	ldi	r22, 0x31	; 49
     a16:	72 e0       	ldi	r23, 0x02	; 2
     a18:	0e 94 b9 06 	call	0xd72	; 0xd72 <strtok>
     a1c:	7c 01       	movw	r14, r24
		if		(!strcmp(cp, "prime"))				app_prime(ap);
     a1e:	c8 01       	movw	r24, r16
     a20:	62 e3       	ldi	r22, 0x32	; 50
     a22:	72 e0       	ldi	r23, 0x02	; 2
     a24:	0e 94 be 06 	call	0xd7c	; 0xd7c <strcmp>
     a28:	00 97       	sbiw	r24, 0x00	; 0
     a2a:	21 f4       	brne	.+8      	; 0xa34 <main+0x88>
     a2c:	c7 01       	movw	r24, r14
     a2e:	0e 94 5d 02 	call	0x4ba	; 0x4ba <app_prime>
     a32:	ce cf       	rjmp	.-100    	; 0x9d0 <main+0x24>
		else if	(!strcmp(cp, "list"))				app_list(ap);
     a34:	c8 01       	movw	r24, r16
     a36:	68 e3       	ldi	r22, 0x38	; 56
     a38:	72 e0       	ldi	r23, 0x02	; 2
     a3a:	0e 94 be 06 	call	0xd7c	; 0xd7c <strcmp>
     a3e:	00 97       	sbiw	r24, 0x00	; 0
     a40:	21 f4       	brne	.+8      	; 0xa4a <main+0x9e>
     a42:	c7 01       	movw	r24, r14
     a44:	0e 94 76 01 	call	0x2ec	; 0x2ec <app_list>
     a48:	c3 cf       	rjmp	.-122    	; 0x9d0 <main+0x24>
		else if (!strcmp(cp, "timer"))				app_timer(ap);
     a4a:	c8 01       	movw	r24, r16
     a4c:	6d e3       	ldi	r22, 0x3D	; 61
     a4e:	72 e0       	ldi	r23, 0x02	; 2
     a50:	0e 94 be 06 	call	0xd7c	; 0xd7c <strcmp>
     a54:	00 97       	sbiw	r24, 0x00	; 0
     a56:	21 f4       	brne	.+8      	; 0xa60 <main+0xb4>
     a58:	c7 01       	movw	r24, r14
     a5a:	0e 94 cc 01 	call	0x398	; 0x398 <app_timer>
     a5e:	b8 cf       	rjmp	.-144    	; 0x9d0 <main+0x24>
		else if	(!strcmp(cp, "add"))				app_add(ap);
     a60:	c8 01       	movw	r24, r16
     a62:	63 e4       	ldi	r22, 0x43	; 67
     a64:	72 e0       	ldi	r23, 0x02	; 2
     a66:	0e 94 be 06 	call	0xd7c	; 0xd7c <strcmp>
     a6a:	00 97       	sbiw	r24, 0x00	; 0
     a6c:	21 f4       	brne	.+8      	; 0xa76 <main+0xca>
     a6e:	c7 01       	movw	r24, r14
     a70:	0e 94 0b 02 	call	0x416	; 0x416 <app_add>
     a74:	ad cf       	rjmp	.-166    	; 0x9d0 <main+0x24>
		else										printf("Unknown command...\n");
     a76:	87 e4       	ldi	r24, 0x47	; 71
     a78:	92 e0       	ldi	r25, 0x02	; 2
     a7a:	0e 94 43 07 	call	0xe86	; 0xe86 <puts>
     a7e:	a8 cf       	rjmp	.-176    	; 0x9d0 <main+0x24>
	}
	printf("logout, good bye !!!\n");
     a80:	8a e5       	ldi	r24, 0x5A	; 90
     a82:	92 e0       	ldi	r25, 0x02	; 2
     a84:	0e 94 43 07 	call	0xe86	; 0xe86 <puts>
     a88:	ff cf       	rjmp	.-2      	; 0xa88 <main+0xdc>

00000a8a <__divmodhi4>:
     a8a:	97 fb       	bst	r25, 7
     a8c:	09 2e       	mov	r0, r25
     a8e:	07 26       	eor	r0, r23
     a90:	0a d0       	rcall	.+20     	; 0xaa6 <__divmodhi4_neg1>
     a92:	77 fd       	sbrc	r23, 7
     a94:	04 d0       	rcall	.+8      	; 0xa9e <__divmodhi4_neg2>
     a96:	0c d0       	rcall	.+24     	; 0xab0 <__udivmodhi4>
     a98:	06 d0       	rcall	.+12     	; 0xaa6 <__divmodhi4_neg1>
     a9a:	00 20       	and	r0, r0
     a9c:	1a f4       	brpl	.+6      	; 0xaa4 <__divmodhi4_exit>

00000a9e <__divmodhi4_neg2>:
     a9e:	70 95       	com	r23
     aa0:	61 95       	neg	r22
     aa2:	7f 4f       	sbci	r23, 0xFF	; 255

00000aa4 <__divmodhi4_exit>:
     aa4:	08 95       	ret

00000aa6 <__divmodhi4_neg1>:
     aa6:	f6 f7       	brtc	.-4      	; 0xaa4 <__divmodhi4_exit>
     aa8:	90 95       	com	r25
     aaa:	81 95       	neg	r24
     aac:	9f 4f       	sbci	r25, 0xFF	; 255
     aae:	08 95       	ret

00000ab0 <__udivmodhi4>:
     ab0:	aa 1b       	sub	r26, r26
     ab2:	bb 1b       	sub	r27, r27
     ab4:	51 e1       	ldi	r21, 0x11	; 17
     ab6:	07 c0       	rjmp	.+14     	; 0xac6 <__udivmodhi4_ep>

00000ab8 <__udivmodhi4_loop>:
     ab8:	aa 1f       	adc	r26, r26
     aba:	bb 1f       	adc	r27, r27
     abc:	a6 17       	cp	r26, r22
     abe:	b7 07       	cpc	r27, r23
     ac0:	10 f0       	brcs	.+4      	; 0xac6 <__udivmodhi4_ep>
     ac2:	a6 1b       	sub	r26, r22
     ac4:	b7 0b       	sbc	r27, r23

00000ac6 <__udivmodhi4_ep>:
     ac6:	88 1f       	adc	r24, r24
     ac8:	99 1f       	adc	r25, r25
     aca:	5a 95       	dec	r21
     acc:	a9 f7       	brne	.-22     	; 0xab8 <__udivmodhi4_loop>
     ace:	80 95       	com	r24
     ad0:	90 95       	com	r25
     ad2:	bc 01       	movw	r22, r24
     ad4:	cd 01       	movw	r24, r26
     ad6:	08 95       	ret

00000ad8 <malloc>:
     ad8:	cf 93       	push	r28
     ada:	df 93       	push	r29
     adc:	ac 01       	movw	r20, r24
     ade:	82 30       	cpi	r24, 0x02	; 2
     ae0:	91 05       	cpc	r25, r1
     ae2:	10 f4       	brcc	.+4      	; 0xae8 <malloc+0x10>
     ae4:	42 e0       	ldi	r20, 0x02	; 2
     ae6:	50 e0       	ldi	r21, 0x00	; 0
     ae8:	e0 91 55 03 	lds	r30, 0x0355
     aec:	f0 91 56 03 	lds	r31, 0x0356
     af0:	20 e0       	ldi	r18, 0x00	; 0
     af2:	30 e0       	ldi	r19, 0x00	; 0
     af4:	a0 e0       	ldi	r26, 0x00	; 0
     af6:	b0 e0       	ldi	r27, 0x00	; 0
     af8:	24 c0       	rjmp	.+72     	; 0xb42 <malloc+0x6a>
     afa:	80 81       	ld	r24, Z
     afc:	91 81       	ldd	r25, Z+1	; 0x01
     afe:	84 17       	cp	r24, r20
     b00:	95 07       	cpc	r25, r21
     b02:	d0 f0       	brcs	.+52     	; 0xb38 <malloc+0x60>
     b04:	84 17       	cp	r24, r20
     b06:	95 07       	cpc	r25, r21
     b08:	71 f4       	brne	.+28     	; 0xb26 <malloc+0x4e>
     b0a:	82 81       	ldd	r24, Z+2	; 0x02
     b0c:	93 81       	ldd	r25, Z+3	; 0x03
     b0e:	10 97       	sbiw	r26, 0x00	; 0
     b10:	29 f0       	breq	.+10     	; 0xb1c <malloc+0x44>
     b12:	13 96       	adiw	r26, 0x03	; 3
     b14:	9c 93       	st	X, r25
     b16:	8e 93       	st	-X, r24
     b18:	12 97       	sbiw	r26, 0x02	; 2
     b1a:	2c c0       	rjmp	.+88     	; 0xb74 <malloc+0x9c>
     b1c:	90 93 56 03 	sts	0x0356, r25
     b20:	80 93 55 03 	sts	0x0355, r24
     b24:	27 c0       	rjmp	.+78     	; 0xb74 <malloc+0x9c>
     b26:	21 15       	cp	r18, r1
     b28:	31 05       	cpc	r19, r1
     b2a:	19 f0       	breq	.+6      	; 0xb32 <malloc+0x5a>
     b2c:	82 17       	cp	r24, r18
     b2e:	93 07       	cpc	r25, r19
     b30:	18 f4       	brcc	.+6      	; 0xb38 <malloc+0x60>
     b32:	9c 01       	movw	r18, r24
     b34:	bd 01       	movw	r22, r26
     b36:	ef 01       	movw	r28, r30
     b38:	92 81       	ldd	r25, Z+2	; 0x02
     b3a:	83 81       	ldd	r24, Z+3	; 0x03
     b3c:	df 01       	movw	r26, r30
     b3e:	e9 2f       	mov	r30, r25
     b40:	f8 2f       	mov	r31, r24
     b42:	30 97       	sbiw	r30, 0x00	; 0
     b44:	d1 f6       	brne	.-76     	; 0xafa <malloc+0x22>
     b46:	21 15       	cp	r18, r1
     b48:	31 05       	cpc	r19, r1
     b4a:	f9 f0       	breq	.+62     	; 0xb8a <malloc+0xb2>
     b4c:	c9 01       	movw	r24, r18
     b4e:	84 1b       	sub	r24, r20
     b50:	95 0b       	sbc	r25, r21
     b52:	84 30       	cpi	r24, 0x04	; 4
     b54:	91 05       	cpc	r25, r1
     b56:	80 f4       	brcc	.+32     	; 0xb78 <malloc+0xa0>
     b58:	8a 81       	ldd	r24, Y+2	; 0x02
     b5a:	9b 81       	ldd	r25, Y+3	; 0x03
     b5c:	61 15       	cp	r22, r1
     b5e:	71 05       	cpc	r23, r1
     b60:	21 f0       	breq	.+8      	; 0xb6a <malloc+0x92>
     b62:	fb 01       	movw	r30, r22
     b64:	93 83       	std	Z+3, r25	; 0x03
     b66:	82 83       	std	Z+2, r24	; 0x02
     b68:	04 c0       	rjmp	.+8      	; 0xb72 <malloc+0x9a>
     b6a:	90 93 56 03 	sts	0x0356, r25
     b6e:	80 93 55 03 	sts	0x0355, r24
     b72:	fe 01       	movw	r30, r28
     b74:	32 96       	adiw	r30, 0x02	; 2
     b76:	42 c0       	rjmp	.+132    	; 0xbfc <malloc+0x124>
     b78:	fe 01       	movw	r30, r28
     b7a:	e8 0f       	add	r30, r24
     b7c:	f9 1f       	adc	r31, r25
     b7e:	41 93       	st	Z+, r20
     b80:	51 93       	st	Z+, r21
     b82:	02 97       	sbiw	r24, 0x02	; 2
     b84:	99 83       	std	Y+1, r25	; 0x01
     b86:	88 83       	st	Y, r24
     b88:	39 c0       	rjmp	.+114    	; 0xbfc <malloc+0x124>
     b8a:	80 91 53 03 	lds	r24, 0x0353
     b8e:	90 91 54 03 	lds	r25, 0x0354
     b92:	00 97       	sbiw	r24, 0x00	; 0
     b94:	41 f4       	brne	.+16     	; 0xba6 <malloc+0xce>
     b96:	80 91 bf 02 	lds	r24, 0x02BF
     b9a:	90 91 c0 02 	lds	r25, 0x02C0
     b9e:	90 93 54 03 	sts	0x0354, r25
     ba2:	80 93 53 03 	sts	0x0353, r24
     ba6:	20 91 bd 02 	lds	r18, 0x02BD
     baa:	30 91 be 02 	lds	r19, 0x02BE
     bae:	21 15       	cp	r18, r1
     bb0:	31 05       	cpc	r19, r1
     bb2:	41 f4       	brne	.+16     	; 0xbc4 <malloc+0xec>
     bb4:	2d b7       	in	r18, 0x3d	; 61
     bb6:	3e b7       	in	r19, 0x3e	; 62
     bb8:	80 91 c1 02 	lds	r24, 0x02C1
     bbc:	90 91 c2 02 	lds	r25, 0x02C2
     bc0:	28 1b       	sub	r18, r24
     bc2:	39 0b       	sbc	r19, r25
     bc4:	e0 91 53 03 	lds	r30, 0x0353
     bc8:	f0 91 54 03 	lds	r31, 0x0354
     bcc:	e2 17       	cp	r30, r18
     bce:	f3 07       	cpc	r31, r19
     bd0:	98 f4       	brcc	.+38     	; 0xbf8 <malloc+0x120>
     bd2:	2e 1b       	sub	r18, r30
     bd4:	3f 0b       	sbc	r19, r31
     bd6:	24 17       	cp	r18, r20
     bd8:	35 07       	cpc	r19, r21
     bda:	70 f0       	brcs	.+28     	; 0xbf8 <malloc+0x120>
     bdc:	ca 01       	movw	r24, r20
     bde:	02 96       	adiw	r24, 0x02	; 2
     be0:	28 17       	cp	r18, r24
     be2:	39 07       	cpc	r19, r25
     be4:	48 f0       	brcs	.+18     	; 0xbf8 <malloc+0x120>
     be6:	8e 0f       	add	r24, r30
     be8:	9f 1f       	adc	r25, r31
     bea:	90 93 54 03 	sts	0x0354, r25
     bee:	80 93 53 03 	sts	0x0353, r24
     bf2:	41 93       	st	Z+, r20
     bf4:	51 93       	st	Z+, r21
     bf6:	02 c0       	rjmp	.+4      	; 0xbfc <malloc+0x124>
     bf8:	e0 e0       	ldi	r30, 0x00	; 0
     bfa:	f0 e0       	ldi	r31, 0x00	; 0
     bfc:	cf 01       	movw	r24, r30
     bfe:	df 91       	pop	r29
     c00:	cf 91       	pop	r28
     c02:	08 95       	ret

00000c04 <free>:
     c04:	0f 93       	push	r16
     c06:	1f 93       	push	r17
     c08:	cf 93       	push	r28
     c0a:	df 93       	push	r29
     c0c:	9c 01       	movw	r18, r24
     c0e:	00 97       	sbiw	r24, 0x00	; 0
     c10:	09 f4       	brne	.+2      	; 0xc14 <free+0x10>
     c12:	8c c0       	rjmp	.+280    	; 0xd2c <free+0x128>
     c14:	dc 01       	movw	r26, r24
     c16:	12 97       	sbiw	r26, 0x02	; 2
     c18:	13 96       	adiw	r26, 0x03	; 3
     c1a:	1c 92       	st	X, r1
     c1c:	1e 92       	st	-X, r1
     c1e:	12 97       	sbiw	r26, 0x02	; 2
     c20:	60 91 55 03 	lds	r22, 0x0355
     c24:	70 91 56 03 	lds	r23, 0x0356
     c28:	61 15       	cp	r22, r1
     c2a:	71 05       	cpc	r23, r1
     c2c:	89 f4       	brne	.+34     	; 0xc50 <free+0x4c>
     c2e:	8d 91       	ld	r24, X+
     c30:	9c 91       	ld	r25, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 0f       	add	r24, r18
     c36:	93 1f       	adc	r25, r19
     c38:	20 91 53 03 	lds	r18, 0x0353
     c3c:	30 91 54 03 	lds	r19, 0x0354
     c40:	28 17       	cp	r18, r24
     c42:	39 07       	cpc	r19, r25
     c44:	69 f5       	brne	.+90     	; 0xca0 <free+0x9c>
     c46:	b0 93 54 03 	sts	0x0354, r27
     c4a:	a0 93 53 03 	sts	0x0353, r26
     c4e:	6e c0       	rjmp	.+220    	; 0xd2c <free+0x128>
     c50:	fb 01       	movw	r30, r22
     c52:	40 e0       	ldi	r20, 0x00	; 0
     c54:	50 e0       	ldi	r21, 0x00	; 0
     c56:	01 c0       	rjmp	.+2      	; 0xc5a <free+0x56>
     c58:	fc 01       	movw	r30, r24
     c5a:	ea 17       	cp	r30, r26
     c5c:	fb 07       	cpc	r31, r27
     c5e:	30 f4       	brcc	.+12     	; 0xc6c <free+0x68>
     c60:	82 81       	ldd	r24, Z+2	; 0x02
     c62:	93 81       	ldd	r25, Z+3	; 0x03
     c64:	af 01       	movw	r20, r30
     c66:	00 97       	sbiw	r24, 0x00	; 0
     c68:	b9 f7       	brne	.-18     	; 0xc58 <free+0x54>
     c6a:	1f c0       	rjmp	.+62     	; 0xcaa <free+0xa6>
     c6c:	e9 01       	movw	r28, r18
     c6e:	22 97       	sbiw	r28, 0x02	; 2
     c70:	fb 83       	std	Y+3, r31	; 0x03
     c72:	ea 83       	std	Y+2, r30	; 0x02
     c74:	08 81       	ld	r16, Y
     c76:	19 81       	ldd	r17, Y+1	; 0x01
     c78:	c9 01       	movw	r24, r18
     c7a:	80 0f       	add	r24, r16
     c7c:	91 1f       	adc	r25, r17
     c7e:	8e 17       	cp	r24, r30
     c80:	9f 07       	cpc	r25, r31
     c82:	59 f4       	brne	.+22     	; 0xc9a <free+0x96>
     c84:	80 81       	ld	r24, Z
     c86:	91 81       	ldd	r25, Z+1	; 0x01
     c88:	80 0f       	add	r24, r16
     c8a:	91 1f       	adc	r25, r17
     c8c:	02 96       	adiw	r24, 0x02	; 2
     c8e:	99 83       	std	Y+1, r25	; 0x01
     c90:	88 83       	st	Y, r24
     c92:	82 81       	ldd	r24, Z+2	; 0x02
     c94:	93 81       	ldd	r25, Z+3	; 0x03
     c96:	9b 83       	std	Y+3, r25	; 0x03
     c98:	8a 83       	std	Y+2, r24	; 0x02
     c9a:	41 15       	cp	r20, r1
     c9c:	51 05       	cpc	r21, r1
     c9e:	29 f4       	brne	.+10     	; 0xcaa <free+0xa6>
     ca0:	b0 93 56 03 	sts	0x0356, r27
     ca4:	a0 93 55 03 	sts	0x0355, r26
     ca8:	41 c0       	rjmp	.+130    	; 0xd2c <free+0x128>
     caa:	fa 01       	movw	r30, r20
     cac:	b3 83       	std	Z+3, r27	; 0x03
     cae:	a2 83       	std	Z+2, r26	; 0x02
     cb0:	c1 91       	ld	r28, Z+
     cb2:	d1 91       	ld	r29, Z+
     cb4:	ec 0f       	add	r30, r28
     cb6:	fd 1f       	adc	r31, r29
     cb8:	ae 17       	cp	r26, r30
     cba:	bf 07       	cpc	r27, r31
     cbc:	81 f4       	brne	.+32     	; 0xcde <free+0xda>
     cbe:	f9 01       	movw	r30, r18
     cc0:	92 91       	ld	r25, -Z
     cc2:	82 91       	ld	r24, -Z
     cc4:	8c 0f       	add	r24, r28
     cc6:	9d 1f       	adc	r25, r29
     cc8:	02 96       	adiw	r24, 0x02	; 2
     cca:	da 01       	movw	r26, r20
     ccc:	11 96       	adiw	r26, 0x01	; 1
     cce:	9c 93       	st	X, r25
     cd0:	8e 93       	st	-X, r24
     cd2:	82 81       	ldd	r24, Z+2	; 0x02
     cd4:	93 81       	ldd	r25, Z+3	; 0x03
     cd6:	13 96       	adiw	r26, 0x03	; 3
     cd8:	9c 93       	st	X, r25
     cda:	8e 93       	st	-X, r24
     cdc:	12 97       	sbiw	r26, 0x02	; 2
     cde:	e0 e0       	ldi	r30, 0x00	; 0
     ce0:	f0 e0       	ldi	r31, 0x00	; 0
     ce2:	02 c0       	rjmp	.+4      	; 0xce8 <free+0xe4>
     ce4:	fb 01       	movw	r30, r22
     ce6:	bc 01       	movw	r22, r24
     ce8:	db 01       	movw	r26, r22
     cea:	12 96       	adiw	r26, 0x02	; 2
     cec:	8d 91       	ld	r24, X+
     cee:	9c 91       	ld	r25, X
     cf0:	13 97       	sbiw	r26, 0x03	; 3
     cf2:	00 97       	sbiw	r24, 0x00	; 0
     cf4:	b9 f7       	brne	.-18     	; 0xce4 <free+0xe0>
     cf6:	cb 01       	movw	r24, r22
     cf8:	02 96       	adiw	r24, 0x02	; 2
     cfa:	2d 91       	ld	r18, X+
     cfc:	3c 91       	ld	r19, X
     cfe:	11 97       	sbiw	r26, 0x01	; 1
     d00:	82 0f       	add	r24, r18
     d02:	93 1f       	adc	r25, r19
     d04:	20 91 53 03 	lds	r18, 0x0353
     d08:	30 91 54 03 	lds	r19, 0x0354
     d0c:	28 17       	cp	r18, r24
     d0e:	39 07       	cpc	r19, r25
     d10:	69 f4       	brne	.+26     	; 0xd2c <free+0x128>
     d12:	30 97       	sbiw	r30, 0x00	; 0
     d14:	29 f4       	brne	.+10     	; 0xd20 <free+0x11c>
     d16:	10 92 56 03 	sts	0x0356, r1
     d1a:	10 92 55 03 	sts	0x0355, r1
     d1e:	02 c0       	rjmp	.+4      	; 0xd24 <free+0x120>
     d20:	13 82       	std	Z+3, r1	; 0x03
     d22:	12 82       	std	Z+2, r1	; 0x02
     d24:	70 93 54 03 	sts	0x0354, r23
     d28:	60 93 53 03 	sts	0x0353, r22
     d2c:	df 91       	pop	r29
     d2e:	cf 91       	pop	r28
     d30:	1f 91       	pop	r17
     d32:	0f 91       	pop	r16
     d34:	08 95       	ret

00000d36 <atoi>:
     d36:	fc 01       	movw	r30, r24
     d38:	88 27       	eor	r24, r24
     d3a:	99 27       	eor	r25, r25
     d3c:	e8 94       	clt
     d3e:	21 91       	ld	r18, Z+
     d40:	20 32       	cpi	r18, 0x20	; 32
     d42:	e9 f3       	breq	.-6      	; 0xd3e <atoi+0x8>
     d44:	29 30       	cpi	r18, 0x09	; 9
     d46:	10 f0       	brcs	.+4      	; 0xd4c <atoi+0x16>
     d48:	2e 30       	cpi	r18, 0x0E	; 14
     d4a:	c8 f3       	brcs	.-14     	; 0xd3e <atoi+0x8>
     d4c:	2b 32       	cpi	r18, 0x2B	; 43
     d4e:	41 f0       	breq	.+16     	; 0xd60 <atoi+0x2a>
     d50:	2d 32       	cpi	r18, 0x2D	; 45
     d52:	39 f4       	brne	.+14     	; 0xd62 <atoi+0x2c>
     d54:	68 94       	set
     d56:	04 c0       	rjmp	.+8      	; 0xd60 <atoi+0x2a>
     d58:	0e 94 ee 06 	call	0xddc	; 0xddc <__mulhi_const_10>
     d5c:	82 0f       	add	r24, r18
     d5e:	91 1d       	adc	r25, r1
     d60:	21 91       	ld	r18, Z+
     d62:	20 53       	subi	r18, 0x30	; 48
     d64:	2a 30       	cpi	r18, 0x0A	; 10
     d66:	c0 f3       	brcs	.-16     	; 0xd58 <atoi+0x22>
     d68:	1e f4       	brtc	.+6      	; 0xd70 <atoi+0x3a>
     d6a:	90 95       	com	r25
     d6c:	81 95       	neg	r24
     d6e:	9f 4f       	sbci	r25, 0xFF	; 255
     d70:	08 95       	ret

00000d72 <strtok>:
     d72:	48 ec       	ldi	r20, 0xC8	; 200
     d74:	52 e0       	ldi	r21, 0x02	; 2
     d76:	0e 94 c7 06 	call	0xd8e	; 0xd8e <strtok_r>
     d7a:	08 95       	ret

00000d7c <strcmp>:
     d7c:	fb 01       	movw	r30, r22
     d7e:	dc 01       	movw	r26, r24
     d80:	8d 91       	ld	r24, X+
     d82:	01 90       	ld	r0, Z+
     d84:	80 19       	sub	r24, r0
     d86:	01 10       	cpse	r0, r1
     d88:	d9 f3       	breq	.-10     	; 0xd80 <strcmp+0x4>
     d8a:	99 0b       	sbc	r25, r25
     d8c:	08 95       	ret

00000d8e <strtok_r>:
     d8e:	fa 01       	movw	r30, r20
     d90:	a1 91       	ld	r26, Z+
     d92:	b0 81       	ld	r27, Z
     d94:	00 97       	sbiw	r24, 0x00	; 0
     d96:	19 f4       	brne	.+6      	; 0xd9e <strtok_r+0x10>
     d98:	10 97       	sbiw	r26, 0x00	; 0
     d9a:	e1 f0       	breq	.+56     	; 0xdd4 <strtok_r+0x46>
     d9c:	cd 01       	movw	r24, r26
     d9e:	dc 01       	movw	r26, r24
     da0:	cd 01       	movw	r24, r26
     da2:	0d 90       	ld	r0, X+
     da4:	00 20       	and	r0, r0
     da6:	11 f4       	brne	.+4      	; 0xdac <strtok_r+0x1e>
     da8:	c0 01       	movw	r24, r0
     daa:	13 c0       	rjmp	.+38     	; 0xdd2 <strtok_r+0x44>
     dac:	fb 01       	movw	r30, r22
     dae:	21 91       	ld	r18, Z+
     db0:	22 23       	and	r18, r18
     db2:	19 f0       	breq	.+6      	; 0xdba <strtok_r+0x2c>
     db4:	20 15       	cp	r18, r0
     db6:	d9 f7       	brne	.-10     	; 0xdae <strtok_r+0x20>
     db8:	f3 cf       	rjmp	.-26     	; 0xda0 <strtok_r+0x12>
     dba:	fb 01       	movw	r30, r22
     dbc:	21 91       	ld	r18, Z+
     dbe:	20 15       	cp	r18, r0
     dc0:	19 f4       	brne	.+6      	; 0xdc8 <strtok_r+0x3a>
     dc2:	1e 92       	st	-X, r1
     dc4:	11 96       	adiw	r26, 0x01	; 1
     dc6:	06 c0       	rjmp	.+12     	; 0xdd4 <strtok_r+0x46>
     dc8:	22 23       	and	r18, r18
     dca:	c1 f7       	brne	.-16     	; 0xdbc <strtok_r+0x2e>
     dcc:	0d 90       	ld	r0, X+
     dce:	00 20       	and	r0, r0
     dd0:	a1 f7       	brne	.-24     	; 0xdba <strtok_r+0x2c>
     dd2:	d0 01       	movw	r26, r0
     dd4:	fa 01       	movw	r30, r20
     dd6:	a1 93       	st	Z+, r26
     dd8:	b0 83       	st	Z, r27
     dda:	08 95       	ret

00000ddc <__mulhi_const_10>:
     ddc:	7a e0       	ldi	r23, 0x0A	; 10
     dde:	97 9f       	mul	r25, r23
     de0:	90 2d       	mov	r25, r0
     de2:	87 9f       	mul	r24, r23
     de4:	80 2d       	mov	r24, r0
     de6:	91 0d       	add	r25, r1
     de8:	11 24       	eor	r1, r1
     dea:	08 95       	ret

00000dec <fgets>:
     dec:	cf 92       	push	r12
     dee:	df 92       	push	r13
     df0:	ef 92       	push	r14
     df2:	ff 92       	push	r15
     df4:	0f 93       	push	r16
     df6:	1f 93       	push	r17
     df8:	cf 93       	push	r28
     dfa:	df 93       	push	r29
     dfc:	8c 01       	movw	r16, r24
     dfe:	6a 01       	movw	r12, r20
     e00:	fa 01       	movw	r30, r20
     e02:	83 81       	ldd	r24, Z+3	; 0x03
     e04:	80 ff       	sbrs	r24, 0
     e06:	1a c0       	rjmp	.+52     	; 0xe3c <fgets+0x50>
     e08:	16 16       	cp	r1, r22
     e0a:	17 06       	cpc	r1, r23
     e0c:	bc f4       	brge	.+46     	; 0xe3c <fgets+0x50>
     e0e:	7b 01       	movw	r14, r22
     e10:	e8 01       	movw	r28, r16
     e12:	0e c0       	rjmp	.+28     	; 0xe30 <fgets+0x44>
     e14:	c6 01       	movw	r24, r12
     e16:	0e 94 8e 09 	call	0x131c	; 0x131c <fgetc>
     e1a:	ff ef       	ldi	r31, 0xFF	; 255
     e1c:	8f 3f       	cpi	r24, 0xFF	; 255
     e1e:	9f 07       	cpc	r25, r31
     e20:	69 f0       	breq	.+26     	; 0xe3c <fgets+0x50>
     e22:	89 93       	st	Y+, r24
     e24:	08 94       	sec
     e26:	e1 08       	sbc	r14, r1
     e28:	f1 08       	sbc	r15, r1
     e2a:	8a 30       	cpi	r24, 0x0A	; 10
     e2c:	91 05       	cpc	r25, r1
     e2e:	21 f0       	breq	.+8      	; 0xe38 <fgets+0x4c>
     e30:	21 e0       	ldi	r18, 0x01	; 1
     e32:	e2 16       	cp	r14, r18
     e34:	f1 04       	cpc	r15, r1
     e36:	71 f7       	brne	.-36     	; 0xe14 <fgets+0x28>
     e38:	18 82       	st	Y, r1
     e3a:	02 c0       	rjmp	.+4      	; 0xe40 <fgets+0x54>
     e3c:	00 e0       	ldi	r16, 0x00	; 0
     e3e:	10 e0       	ldi	r17, 0x00	; 0
     e40:	c8 01       	movw	r24, r16
     e42:	df 91       	pop	r29
     e44:	cf 91       	pop	r28
     e46:	1f 91       	pop	r17
     e48:	0f 91       	pop	r16
     e4a:	ff 90       	pop	r15
     e4c:	ef 90       	pop	r14
     e4e:	df 90       	pop	r13
     e50:	cf 90       	pop	r12
     e52:	08 95       	ret

00000e54 <printf>:
     e54:	cf 93       	push	r28
     e56:	df 93       	push	r29
     e58:	cd b7       	in	r28, 0x3d	; 61
     e5a:	de b7       	in	r29, 0x3e	; 62
     e5c:	fe 01       	movw	r30, r28
     e5e:	36 96       	adiw	r30, 0x06	; 6
     e60:	61 91       	ld	r22, Z+
     e62:	71 91       	ld	r23, Z+
     e64:	80 91 59 03 	lds	r24, 0x0359
     e68:	90 91 5a 03 	lds	r25, 0x035A
     e6c:	af 01       	movw	r20, r30
     e6e:	0e 94 71 07 	call	0xee2	; 0xee2 <vfprintf>
     e72:	df 91       	pop	r29
     e74:	cf 91       	pop	r28
     e76:	08 95       	ret

00000e78 <putchar>:
     e78:	60 91 59 03 	lds	r22, 0x0359
     e7c:	70 91 5a 03 	lds	r23, 0x035A
     e80:	0e 94 ce 09 	call	0x139c	; 0x139c <fputc>
     e84:	08 95       	ret

00000e86 <puts>:
     e86:	0f 93       	push	r16
     e88:	1f 93       	push	r17
     e8a:	cf 93       	push	r28
     e8c:	df 93       	push	r29
     e8e:	8c 01       	movw	r16, r24
     e90:	e0 91 59 03 	lds	r30, 0x0359
     e94:	f0 91 5a 03 	lds	r31, 0x035A
     e98:	83 81       	ldd	r24, Z+3	; 0x03
     e9a:	81 ff       	sbrs	r24, 1
     e9c:	1a c0       	rjmp	.+52     	; 0xed2 <puts+0x4c>
     e9e:	c0 e0       	ldi	r28, 0x00	; 0
     ea0:	d0 e0       	ldi	r29, 0x00	; 0
     ea2:	05 c0       	rjmp	.+10     	; 0xeae <puts+0x28>
     ea4:	19 95       	eicall
     ea6:	00 97       	sbiw	r24, 0x00	; 0
     ea8:	11 f0       	breq	.+4      	; 0xeae <puts+0x28>
     eaa:	cf ef       	ldi	r28, 0xFF	; 255
     eac:	df ef       	ldi	r29, 0xFF	; 255
     eae:	f8 01       	movw	r30, r16
     eb0:	81 91       	ld	r24, Z+
     eb2:	8f 01       	movw	r16, r30
     eb4:	60 91 59 03 	lds	r22, 0x0359
     eb8:	70 91 5a 03 	lds	r23, 0x035A
     ebc:	db 01       	movw	r26, r22
     ebe:	18 96       	adiw	r26, 0x08	; 8
     ec0:	ed 91       	ld	r30, X+
     ec2:	fc 91       	ld	r31, X
     ec4:	19 97       	sbiw	r26, 0x09	; 9
     ec6:	88 23       	and	r24, r24
     ec8:	69 f7       	brne	.-38     	; 0xea4 <puts+0x1e>
     eca:	8a e0       	ldi	r24, 0x0A	; 10
     ecc:	19 95       	eicall
     ece:	00 97       	sbiw	r24, 0x00	; 0
     ed0:	11 f0       	breq	.+4      	; 0xed6 <puts+0x50>
     ed2:	cf ef       	ldi	r28, 0xFF	; 255
     ed4:	df ef       	ldi	r29, 0xFF	; 255
     ed6:	ce 01       	movw	r24, r28
     ed8:	df 91       	pop	r29
     eda:	cf 91       	pop	r28
     edc:	1f 91       	pop	r17
     ede:	0f 91       	pop	r16
     ee0:	08 95       	ret

00000ee2 <vfprintf>:
     ee2:	2f 92       	push	r2
     ee4:	3f 92       	push	r3
     ee6:	4f 92       	push	r4
     ee8:	5f 92       	push	r5
     eea:	6f 92       	push	r6
     eec:	7f 92       	push	r7
     eee:	8f 92       	push	r8
     ef0:	9f 92       	push	r9
     ef2:	af 92       	push	r10
     ef4:	bf 92       	push	r11
     ef6:	cf 92       	push	r12
     ef8:	df 92       	push	r13
     efa:	ef 92       	push	r14
     efc:	ff 92       	push	r15
     efe:	0f 93       	push	r16
     f00:	1f 93       	push	r17
     f02:	cf 93       	push	r28
     f04:	df 93       	push	r29
     f06:	cd b7       	in	r28, 0x3d	; 61
     f08:	de b7       	in	r29, 0x3e	; 62
     f0a:	2d 97       	sbiw	r28, 0x0d	; 13
     f0c:	0f b6       	in	r0, 0x3f	; 63
     f0e:	f8 94       	cli
     f10:	de bf       	out	0x3e, r29	; 62
     f12:	0f be       	out	0x3f, r0	; 63
     f14:	cd bf       	out	0x3d, r28	; 61
     f16:	3c 01       	movw	r6, r24
     f18:	7d 87       	std	Y+13, r23	; 0x0d
     f1a:	6c 87       	std	Y+12, r22	; 0x0c
     f1c:	5a 01       	movw	r10, r20
     f1e:	fc 01       	movw	r30, r24
     f20:	17 82       	std	Z+7, r1	; 0x07
     f22:	16 82       	std	Z+6, r1	; 0x06
     f24:	83 81       	ldd	r24, Z+3	; 0x03
     f26:	81 ff       	sbrs	r24, 1
     f28:	c8 c1       	rjmp	.+912    	; 0x12ba <vfprintf+0x3d8>
     f2a:	2e 01       	movw	r4, r28
     f2c:	08 94       	sec
     f2e:	41 1c       	adc	r4, r1
     f30:	51 1c       	adc	r5, r1
     f32:	f3 01       	movw	r30, r6
     f34:	93 81       	ldd	r25, Z+3	; 0x03
     f36:	ec 85       	ldd	r30, Y+12	; 0x0c
     f38:	fd 85       	ldd	r31, Y+13	; 0x0d
     f3a:	93 fd       	sbrc	r25, 3
     f3c:	85 91       	lpm	r24, Z+
     f3e:	93 ff       	sbrs	r25, 3
     f40:	81 91       	ld	r24, Z+
     f42:	fd 87       	std	Y+13, r31	; 0x0d
     f44:	ec 87       	std	Y+12, r30	; 0x0c
     f46:	88 23       	and	r24, r24
     f48:	09 f4       	brne	.+2      	; 0xf4c <vfprintf+0x6a>
     f4a:	b3 c1       	rjmp	.+870    	; 0x12b2 <vfprintf+0x3d0>
     f4c:	85 32       	cpi	r24, 0x25	; 37
     f4e:	41 f4       	brne	.+16     	; 0xf60 <vfprintf+0x7e>
     f50:	93 fd       	sbrc	r25, 3
     f52:	85 91       	lpm	r24, Z+
     f54:	93 ff       	sbrs	r25, 3
     f56:	81 91       	ld	r24, Z+
     f58:	fd 87       	std	Y+13, r31	; 0x0d
     f5a:	ec 87       	std	Y+12, r30	; 0x0c
     f5c:	85 32       	cpi	r24, 0x25	; 37
     f5e:	29 f4       	brne	.+10     	; 0xf6a <vfprintf+0x88>
     f60:	90 e0       	ldi	r25, 0x00	; 0
     f62:	b3 01       	movw	r22, r6
     f64:	0e 94 ce 09 	call	0x139c	; 0x139c <fputc>
     f68:	e4 cf       	rjmp	.-56     	; 0xf32 <vfprintf+0x50>
     f6a:	ff 24       	eor	r15, r15
     f6c:	ee 24       	eor	r14, r14
     f6e:	10 e0       	ldi	r17, 0x00	; 0
     f70:	10 32       	cpi	r17, 0x20	; 32
     f72:	b0 f4       	brcc	.+44     	; 0xfa0 <vfprintf+0xbe>
     f74:	8b 32       	cpi	r24, 0x2B	; 43
     f76:	69 f0       	breq	.+26     	; 0xf92 <vfprintf+0xb0>
     f78:	8c 32       	cpi	r24, 0x2C	; 44
     f7a:	28 f4       	brcc	.+10     	; 0xf86 <vfprintf+0xa4>
     f7c:	80 32       	cpi	r24, 0x20	; 32
     f7e:	51 f0       	breq	.+20     	; 0xf94 <vfprintf+0xb2>
     f80:	83 32       	cpi	r24, 0x23	; 35
     f82:	71 f4       	brne	.+28     	; 0xfa0 <vfprintf+0xbe>
     f84:	0b c0       	rjmp	.+22     	; 0xf9c <vfprintf+0xba>
     f86:	8d 32       	cpi	r24, 0x2D	; 45
     f88:	39 f0       	breq	.+14     	; 0xf98 <vfprintf+0xb6>
     f8a:	80 33       	cpi	r24, 0x30	; 48
     f8c:	49 f4       	brne	.+18     	; 0xfa0 <vfprintf+0xbe>
     f8e:	11 60       	ori	r17, 0x01	; 1
     f90:	2c c0       	rjmp	.+88     	; 0xfea <vfprintf+0x108>
     f92:	12 60       	ori	r17, 0x02	; 2
     f94:	14 60       	ori	r17, 0x04	; 4
     f96:	29 c0       	rjmp	.+82     	; 0xfea <vfprintf+0x108>
     f98:	18 60       	ori	r17, 0x08	; 8
     f9a:	27 c0       	rjmp	.+78     	; 0xfea <vfprintf+0x108>
     f9c:	10 61       	ori	r17, 0x10	; 16
     f9e:	25 c0       	rjmp	.+74     	; 0xfea <vfprintf+0x108>
     fa0:	17 fd       	sbrc	r17, 7
     fa2:	2e c0       	rjmp	.+92     	; 0x1000 <vfprintf+0x11e>
     fa4:	28 2f       	mov	r18, r24
     fa6:	20 53       	subi	r18, 0x30	; 48
     fa8:	2a 30       	cpi	r18, 0x0A	; 10
     faa:	98 f4       	brcc	.+38     	; 0xfd2 <vfprintf+0xf0>
     fac:	16 ff       	sbrs	r17, 6
     fae:	08 c0       	rjmp	.+16     	; 0xfc0 <vfprintf+0xde>
     fb0:	8f 2d       	mov	r24, r15
     fb2:	88 0f       	add	r24, r24
     fb4:	f8 2e       	mov	r15, r24
     fb6:	ff 0c       	add	r15, r15
     fb8:	ff 0c       	add	r15, r15
     fba:	f8 0e       	add	r15, r24
     fbc:	f2 0e       	add	r15, r18
     fbe:	15 c0       	rjmp	.+42     	; 0xfea <vfprintf+0x108>
     fc0:	8e 2d       	mov	r24, r14
     fc2:	88 0f       	add	r24, r24
     fc4:	e8 2e       	mov	r14, r24
     fc6:	ee 0c       	add	r14, r14
     fc8:	ee 0c       	add	r14, r14
     fca:	e8 0e       	add	r14, r24
     fcc:	e2 0e       	add	r14, r18
     fce:	10 62       	ori	r17, 0x20	; 32
     fd0:	0c c0       	rjmp	.+24     	; 0xfea <vfprintf+0x108>
     fd2:	8e 32       	cpi	r24, 0x2E	; 46
     fd4:	21 f4       	brne	.+8      	; 0xfde <vfprintf+0xfc>
     fd6:	16 fd       	sbrc	r17, 6
     fd8:	6c c1       	rjmp	.+728    	; 0x12b2 <vfprintf+0x3d0>
     fda:	10 64       	ori	r17, 0x40	; 64
     fdc:	06 c0       	rjmp	.+12     	; 0xfea <vfprintf+0x108>
     fde:	8c 36       	cpi	r24, 0x6C	; 108
     fe0:	11 f4       	brne	.+4      	; 0xfe6 <vfprintf+0x104>
     fe2:	10 68       	ori	r17, 0x80	; 128
     fe4:	02 c0       	rjmp	.+4      	; 0xfea <vfprintf+0x108>
     fe6:	88 36       	cpi	r24, 0x68	; 104
     fe8:	59 f4       	brne	.+22     	; 0x1000 <vfprintf+0x11e>
     fea:	ec 85       	ldd	r30, Y+12	; 0x0c
     fec:	fd 85       	ldd	r31, Y+13	; 0x0d
     fee:	93 fd       	sbrc	r25, 3
     ff0:	85 91       	lpm	r24, Z+
     ff2:	93 ff       	sbrs	r25, 3
     ff4:	81 91       	ld	r24, Z+
     ff6:	fd 87       	std	Y+13, r31	; 0x0d
     ff8:	ec 87       	std	Y+12, r30	; 0x0c
     ffa:	88 23       	and	r24, r24
     ffc:	09 f0       	breq	.+2      	; 0x1000 <vfprintf+0x11e>
     ffe:	b8 cf       	rjmp	.-144    	; 0xf70 <vfprintf+0x8e>
    1000:	98 2f       	mov	r25, r24
    1002:	95 54       	subi	r25, 0x45	; 69
    1004:	93 30       	cpi	r25, 0x03	; 3
    1006:	18 f0       	brcs	.+6      	; 0x100e <vfprintf+0x12c>
    1008:	90 52       	subi	r25, 0x20	; 32
    100a:	93 30       	cpi	r25, 0x03	; 3
    100c:	38 f4       	brcc	.+14     	; 0x101c <vfprintf+0x13a>
    100e:	24 e0       	ldi	r18, 0x04	; 4
    1010:	30 e0       	ldi	r19, 0x00	; 0
    1012:	a2 0e       	add	r10, r18
    1014:	b3 1e       	adc	r11, r19
    1016:	3f e3       	ldi	r19, 0x3F	; 63
    1018:	39 83       	std	Y+1, r19	; 0x01
    101a:	0f c0       	rjmp	.+30     	; 0x103a <vfprintf+0x158>
    101c:	83 36       	cpi	r24, 0x63	; 99
    101e:	31 f0       	breq	.+12     	; 0x102c <vfprintf+0x14a>
    1020:	83 37       	cpi	r24, 0x73	; 115
    1022:	81 f0       	breq	.+32     	; 0x1044 <vfprintf+0x162>
    1024:	83 35       	cpi	r24, 0x53	; 83
    1026:	09 f0       	breq	.+2      	; 0x102a <vfprintf+0x148>
    1028:	5a c0       	rjmp	.+180    	; 0x10de <vfprintf+0x1fc>
    102a:	22 c0       	rjmp	.+68     	; 0x1070 <vfprintf+0x18e>
    102c:	f5 01       	movw	r30, r10
    102e:	80 81       	ld	r24, Z
    1030:	89 83       	std	Y+1, r24	; 0x01
    1032:	22 e0       	ldi	r18, 0x02	; 2
    1034:	30 e0       	ldi	r19, 0x00	; 0
    1036:	a2 0e       	add	r10, r18
    1038:	b3 1e       	adc	r11, r19
    103a:	21 e0       	ldi	r18, 0x01	; 1
    103c:	c2 2e       	mov	r12, r18
    103e:	d1 2c       	mov	r13, r1
    1040:	42 01       	movw	r8, r4
    1042:	14 c0       	rjmp	.+40     	; 0x106c <vfprintf+0x18a>
    1044:	92 e0       	ldi	r25, 0x02	; 2
    1046:	29 2e       	mov	r2, r25
    1048:	31 2c       	mov	r3, r1
    104a:	2a 0c       	add	r2, r10
    104c:	3b 1c       	adc	r3, r11
    104e:	f5 01       	movw	r30, r10
    1050:	80 80       	ld	r8, Z
    1052:	91 80       	ldd	r9, Z+1	; 0x01
    1054:	16 ff       	sbrs	r17, 6
    1056:	03 c0       	rjmp	.+6      	; 0x105e <vfprintf+0x17c>
    1058:	6f 2d       	mov	r22, r15
    105a:	70 e0       	ldi	r23, 0x00	; 0
    105c:	02 c0       	rjmp	.+4      	; 0x1062 <vfprintf+0x180>
    105e:	6f ef       	ldi	r22, 0xFF	; 255
    1060:	7f ef       	ldi	r23, 0xFF	; 255
    1062:	c4 01       	movw	r24, r8
    1064:	0e 94 83 09 	call	0x1306	; 0x1306 <strnlen>
    1068:	6c 01       	movw	r12, r24
    106a:	51 01       	movw	r10, r2
    106c:	1f 77       	andi	r17, 0x7F	; 127
    106e:	15 c0       	rjmp	.+42     	; 0x109a <vfprintf+0x1b8>
    1070:	82 e0       	ldi	r24, 0x02	; 2
    1072:	28 2e       	mov	r2, r24
    1074:	31 2c       	mov	r3, r1
    1076:	2a 0c       	add	r2, r10
    1078:	3b 1c       	adc	r3, r11
    107a:	f5 01       	movw	r30, r10
    107c:	80 80       	ld	r8, Z
    107e:	91 80       	ldd	r9, Z+1	; 0x01
    1080:	16 ff       	sbrs	r17, 6
    1082:	03 c0       	rjmp	.+6      	; 0x108a <vfprintf+0x1a8>
    1084:	6f 2d       	mov	r22, r15
    1086:	70 e0       	ldi	r23, 0x00	; 0
    1088:	02 c0       	rjmp	.+4      	; 0x108e <vfprintf+0x1ac>
    108a:	6f ef       	ldi	r22, 0xFF	; 255
    108c:	7f ef       	ldi	r23, 0xFF	; 255
    108e:	c4 01       	movw	r24, r8
    1090:	0e 94 78 09 	call	0x12f0	; 0x12f0 <strnlen_P>
    1094:	6c 01       	movw	r12, r24
    1096:	10 68       	ori	r17, 0x80	; 128
    1098:	51 01       	movw	r10, r2
    109a:	13 fd       	sbrc	r17, 3
    109c:	1c c0       	rjmp	.+56     	; 0x10d6 <vfprintf+0x1f4>
    109e:	06 c0       	rjmp	.+12     	; 0x10ac <vfprintf+0x1ca>
    10a0:	80 e2       	ldi	r24, 0x20	; 32
    10a2:	90 e0       	ldi	r25, 0x00	; 0
    10a4:	b3 01       	movw	r22, r6
    10a6:	0e 94 ce 09 	call	0x139c	; 0x139c <fputc>
    10aa:	ea 94       	dec	r14
    10ac:	8e 2d       	mov	r24, r14
    10ae:	90 e0       	ldi	r25, 0x00	; 0
    10b0:	c8 16       	cp	r12, r24
    10b2:	d9 06       	cpc	r13, r25
    10b4:	a8 f3       	brcs	.-22     	; 0x10a0 <vfprintf+0x1be>
    10b6:	0f c0       	rjmp	.+30     	; 0x10d6 <vfprintf+0x1f4>
    10b8:	f4 01       	movw	r30, r8
    10ba:	17 fd       	sbrc	r17, 7
    10bc:	85 91       	lpm	r24, Z+
    10be:	17 ff       	sbrs	r17, 7
    10c0:	81 91       	ld	r24, Z+
    10c2:	4f 01       	movw	r8, r30
    10c4:	90 e0       	ldi	r25, 0x00	; 0
    10c6:	b3 01       	movw	r22, r6
    10c8:	0e 94 ce 09 	call	0x139c	; 0x139c <fputc>
    10cc:	e1 10       	cpse	r14, r1
    10ce:	ea 94       	dec	r14
    10d0:	08 94       	sec
    10d2:	c1 08       	sbc	r12, r1
    10d4:	d1 08       	sbc	r13, r1
    10d6:	c1 14       	cp	r12, r1
    10d8:	d1 04       	cpc	r13, r1
    10da:	71 f7       	brne	.-36     	; 0x10b8 <vfprintf+0x1d6>
    10dc:	e7 c0       	rjmp	.+462    	; 0x12ac <vfprintf+0x3ca>
    10de:	84 36       	cpi	r24, 0x64	; 100
    10e0:	11 f0       	breq	.+4      	; 0x10e6 <vfprintf+0x204>
    10e2:	89 36       	cpi	r24, 0x69	; 105
    10e4:	51 f5       	brne	.+84     	; 0x113a <vfprintf+0x258>
    10e6:	f5 01       	movw	r30, r10
    10e8:	17 ff       	sbrs	r17, 7
    10ea:	07 c0       	rjmp	.+14     	; 0x10fa <vfprintf+0x218>
    10ec:	80 81       	ld	r24, Z
    10ee:	91 81       	ldd	r25, Z+1	; 0x01
    10f0:	a2 81       	ldd	r26, Z+2	; 0x02
    10f2:	b3 81       	ldd	r27, Z+3	; 0x03
    10f4:	24 e0       	ldi	r18, 0x04	; 4
    10f6:	30 e0       	ldi	r19, 0x00	; 0
    10f8:	08 c0       	rjmp	.+16     	; 0x110a <vfprintf+0x228>
    10fa:	80 81       	ld	r24, Z
    10fc:	91 81       	ldd	r25, Z+1	; 0x01
    10fe:	aa 27       	eor	r26, r26
    1100:	97 fd       	sbrc	r25, 7
    1102:	a0 95       	com	r26
    1104:	ba 2f       	mov	r27, r26
    1106:	22 e0       	ldi	r18, 0x02	; 2
    1108:	30 e0       	ldi	r19, 0x00	; 0
    110a:	a2 0e       	add	r10, r18
    110c:	b3 1e       	adc	r11, r19
    110e:	01 2f       	mov	r16, r17
    1110:	0f 76       	andi	r16, 0x6F	; 111
    1112:	b7 ff       	sbrs	r27, 7
    1114:	08 c0       	rjmp	.+16     	; 0x1126 <vfprintf+0x244>
    1116:	b0 95       	com	r27
    1118:	a0 95       	com	r26
    111a:	90 95       	com	r25
    111c:	81 95       	neg	r24
    111e:	9f 4f       	sbci	r25, 0xFF	; 255
    1120:	af 4f       	sbci	r26, 0xFF	; 255
    1122:	bf 4f       	sbci	r27, 0xFF	; 255
    1124:	00 68       	ori	r16, 0x80	; 128
    1126:	bc 01       	movw	r22, r24
    1128:	cd 01       	movw	r24, r26
    112a:	a2 01       	movw	r20, r4
    112c:	2a e0       	ldi	r18, 0x0A	; 10
    112e:	30 e0       	ldi	r19, 0x00	; 0
    1130:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <__ultoa_invert>
    1134:	d8 2e       	mov	r13, r24
    1136:	d4 18       	sub	r13, r4
    1138:	3f c0       	rjmp	.+126    	; 0x11b8 <vfprintf+0x2d6>
    113a:	85 37       	cpi	r24, 0x75	; 117
    113c:	21 f4       	brne	.+8      	; 0x1146 <vfprintf+0x264>
    113e:	1f 7e       	andi	r17, 0xEF	; 239
    1140:	2a e0       	ldi	r18, 0x0A	; 10
    1142:	30 e0       	ldi	r19, 0x00	; 0
    1144:	20 c0       	rjmp	.+64     	; 0x1186 <vfprintf+0x2a4>
    1146:	19 7f       	andi	r17, 0xF9	; 249
    1148:	8f 36       	cpi	r24, 0x6F	; 111
    114a:	a9 f0       	breq	.+42     	; 0x1176 <vfprintf+0x294>
    114c:	80 37       	cpi	r24, 0x70	; 112
    114e:	20 f4       	brcc	.+8      	; 0x1158 <vfprintf+0x276>
    1150:	88 35       	cpi	r24, 0x58	; 88
    1152:	09 f0       	breq	.+2      	; 0x1156 <vfprintf+0x274>
    1154:	ae c0       	rjmp	.+348    	; 0x12b2 <vfprintf+0x3d0>
    1156:	0b c0       	rjmp	.+22     	; 0x116e <vfprintf+0x28c>
    1158:	80 37       	cpi	r24, 0x70	; 112
    115a:	21 f0       	breq	.+8      	; 0x1164 <vfprintf+0x282>
    115c:	88 37       	cpi	r24, 0x78	; 120
    115e:	09 f0       	breq	.+2      	; 0x1162 <vfprintf+0x280>
    1160:	a8 c0       	rjmp	.+336    	; 0x12b2 <vfprintf+0x3d0>
    1162:	01 c0       	rjmp	.+2      	; 0x1166 <vfprintf+0x284>
    1164:	10 61       	ori	r17, 0x10	; 16
    1166:	14 ff       	sbrs	r17, 4
    1168:	09 c0       	rjmp	.+18     	; 0x117c <vfprintf+0x29a>
    116a:	14 60       	ori	r17, 0x04	; 4
    116c:	07 c0       	rjmp	.+14     	; 0x117c <vfprintf+0x29a>
    116e:	14 ff       	sbrs	r17, 4
    1170:	08 c0       	rjmp	.+16     	; 0x1182 <vfprintf+0x2a0>
    1172:	16 60       	ori	r17, 0x06	; 6
    1174:	06 c0       	rjmp	.+12     	; 0x1182 <vfprintf+0x2a0>
    1176:	28 e0       	ldi	r18, 0x08	; 8
    1178:	30 e0       	ldi	r19, 0x00	; 0
    117a:	05 c0       	rjmp	.+10     	; 0x1186 <vfprintf+0x2a4>
    117c:	20 e1       	ldi	r18, 0x10	; 16
    117e:	30 e0       	ldi	r19, 0x00	; 0
    1180:	02 c0       	rjmp	.+4      	; 0x1186 <vfprintf+0x2a4>
    1182:	20 e1       	ldi	r18, 0x10	; 16
    1184:	32 e0       	ldi	r19, 0x02	; 2
    1186:	f5 01       	movw	r30, r10
    1188:	17 ff       	sbrs	r17, 7
    118a:	07 c0       	rjmp	.+14     	; 0x119a <vfprintf+0x2b8>
    118c:	60 81       	ld	r22, Z
    118e:	71 81       	ldd	r23, Z+1	; 0x01
    1190:	82 81       	ldd	r24, Z+2	; 0x02
    1192:	93 81       	ldd	r25, Z+3	; 0x03
    1194:	44 e0       	ldi	r20, 0x04	; 4
    1196:	50 e0       	ldi	r21, 0x00	; 0
    1198:	06 c0       	rjmp	.+12     	; 0x11a6 <vfprintf+0x2c4>
    119a:	60 81       	ld	r22, Z
    119c:	71 81       	ldd	r23, Z+1	; 0x01
    119e:	80 e0       	ldi	r24, 0x00	; 0
    11a0:	90 e0       	ldi	r25, 0x00	; 0
    11a2:	42 e0       	ldi	r20, 0x02	; 2
    11a4:	50 e0       	ldi	r21, 0x00	; 0
    11a6:	a4 0e       	add	r10, r20
    11a8:	b5 1e       	adc	r11, r21
    11aa:	a2 01       	movw	r20, r4
    11ac:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <__ultoa_invert>
    11b0:	d8 2e       	mov	r13, r24
    11b2:	d4 18       	sub	r13, r4
    11b4:	01 2f       	mov	r16, r17
    11b6:	0f 77       	andi	r16, 0x7F	; 127
    11b8:	06 ff       	sbrs	r16, 6
    11ba:	09 c0       	rjmp	.+18     	; 0x11ce <vfprintf+0x2ec>
    11bc:	0e 7f       	andi	r16, 0xFE	; 254
    11be:	df 14       	cp	r13, r15
    11c0:	30 f4       	brcc	.+12     	; 0x11ce <vfprintf+0x2ec>
    11c2:	04 ff       	sbrs	r16, 4
    11c4:	06 c0       	rjmp	.+12     	; 0x11d2 <vfprintf+0x2f0>
    11c6:	02 fd       	sbrc	r16, 2
    11c8:	04 c0       	rjmp	.+8      	; 0x11d2 <vfprintf+0x2f0>
    11ca:	0f 7e       	andi	r16, 0xEF	; 239
    11cc:	02 c0       	rjmp	.+4      	; 0x11d2 <vfprintf+0x2f0>
    11ce:	1d 2d       	mov	r17, r13
    11d0:	01 c0       	rjmp	.+2      	; 0x11d4 <vfprintf+0x2f2>
    11d2:	1f 2d       	mov	r17, r15
    11d4:	80 2f       	mov	r24, r16
    11d6:	90 e0       	ldi	r25, 0x00	; 0
    11d8:	04 ff       	sbrs	r16, 4
    11da:	0c c0       	rjmp	.+24     	; 0x11f4 <vfprintf+0x312>
    11dc:	fe 01       	movw	r30, r28
    11de:	ed 0d       	add	r30, r13
    11e0:	f1 1d       	adc	r31, r1
    11e2:	20 81       	ld	r18, Z
    11e4:	20 33       	cpi	r18, 0x30	; 48
    11e6:	11 f4       	brne	.+4      	; 0x11ec <vfprintf+0x30a>
    11e8:	09 7e       	andi	r16, 0xE9	; 233
    11ea:	09 c0       	rjmp	.+18     	; 0x11fe <vfprintf+0x31c>
    11ec:	02 ff       	sbrs	r16, 2
    11ee:	06 c0       	rjmp	.+12     	; 0x11fc <vfprintf+0x31a>
    11f0:	1e 5f       	subi	r17, 0xFE	; 254
    11f2:	05 c0       	rjmp	.+10     	; 0x11fe <vfprintf+0x31c>
    11f4:	86 78       	andi	r24, 0x86	; 134
    11f6:	90 70       	andi	r25, 0x00	; 0
    11f8:	00 97       	sbiw	r24, 0x00	; 0
    11fa:	09 f0       	breq	.+2      	; 0x11fe <vfprintf+0x31c>
    11fc:	1f 5f       	subi	r17, 0xFF	; 255
    11fe:	80 2e       	mov	r8, r16
    1200:	99 24       	eor	r9, r9
    1202:	03 fd       	sbrc	r16, 3
    1204:	12 c0       	rjmp	.+36     	; 0x122a <vfprintf+0x348>
    1206:	00 ff       	sbrs	r16, 0
    1208:	0d c0       	rjmp	.+26     	; 0x1224 <vfprintf+0x342>
    120a:	fd 2c       	mov	r15, r13
    120c:	1e 15       	cp	r17, r14
    120e:	50 f4       	brcc	.+20     	; 0x1224 <vfprintf+0x342>
    1210:	fe 0c       	add	r15, r14
    1212:	f1 1a       	sub	r15, r17
    1214:	1e 2d       	mov	r17, r14
    1216:	06 c0       	rjmp	.+12     	; 0x1224 <vfprintf+0x342>
    1218:	80 e2       	ldi	r24, 0x20	; 32
    121a:	90 e0       	ldi	r25, 0x00	; 0
    121c:	b3 01       	movw	r22, r6
    121e:	0e 94 ce 09 	call	0x139c	; 0x139c <fputc>
    1222:	1f 5f       	subi	r17, 0xFF	; 255
    1224:	1e 15       	cp	r17, r14
    1226:	c0 f3       	brcs	.-16     	; 0x1218 <vfprintf+0x336>
    1228:	04 c0       	rjmp	.+8      	; 0x1232 <vfprintf+0x350>
    122a:	1e 15       	cp	r17, r14
    122c:	10 f4       	brcc	.+4      	; 0x1232 <vfprintf+0x350>
    122e:	e1 1a       	sub	r14, r17
    1230:	01 c0       	rjmp	.+2      	; 0x1234 <vfprintf+0x352>
    1232:	ee 24       	eor	r14, r14
    1234:	84 fe       	sbrs	r8, 4
    1236:	0f c0       	rjmp	.+30     	; 0x1256 <vfprintf+0x374>
    1238:	80 e3       	ldi	r24, 0x30	; 48
    123a:	90 e0       	ldi	r25, 0x00	; 0
    123c:	b3 01       	movw	r22, r6
    123e:	0e 94 ce 09 	call	0x139c	; 0x139c <fputc>
    1242:	82 fe       	sbrs	r8, 2
    1244:	1f c0       	rjmp	.+62     	; 0x1284 <vfprintf+0x3a2>
    1246:	81 fe       	sbrs	r8, 1
    1248:	03 c0       	rjmp	.+6      	; 0x1250 <vfprintf+0x36e>
    124a:	88 e5       	ldi	r24, 0x58	; 88
    124c:	90 e0       	ldi	r25, 0x00	; 0
    124e:	10 c0       	rjmp	.+32     	; 0x1270 <vfprintf+0x38e>
    1250:	88 e7       	ldi	r24, 0x78	; 120
    1252:	90 e0       	ldi	r25, 0x00	; 0
    1254:	0d c0       	rjmp	.+26     	; 0x1270 <vfprintf+0x38e>
    1256:	c4 01       	movw	r24, r8
    1258:	86 78       	andi	r24, 0x86	; 134
    125a:	90 70       	andi	r25, 0x00	; 0
    125c:	00 97       	sbiw	r24, 0x00	; 0
    125e:	91 f0       	breq	.+36     	; 0x1284 <vfprintf+0x3a2>
    1260:	81 fc       	sbrc	r8, 1
    1262:	02 c0       	rjmp	.+4      	; 0x1268 <vfprintf+0x386>
    1264:	80 e2       	ldi	r24, 0x20	; 32
    1266:	01 c0       	rjmp	.+2      	; 0x126a <vfprintf+0x388>
    1268:	8b e2       	ldi	r24, 0x2B	; 43
    126a:	07 fd       	sbrc	r16, 7
    126c:	8d e2       	ldi	r24, 0x2D	; 45
    126e:	90 e0       	ldi	r25, 0x00	; 0
    1270:	b3 01       	movw	r22, r6
    1272:	0e 94 ce 09 	call	0x139c	; 0x139c <fputc>
    1276:	06 c0       	rjmp	.+12     	; 0x1284 <vfprintf+0x3a2>
    1278:	80 e3       	ldi	r24, 0x30	; 48
    127a:	90 e0       	ldi	r25, 0x00	; 0
    127c:	b3 01       	movw	r22, r6
    127e:	0e 94 ce 09 	call	0x139c	; 0x139c <fputc>
    1282:	fa 94       	dec	r15
    1284:	df 14       	cp	r13, r15
    1286:	c0 f3       	brcs	.-16     	; 0x1278 <vfprintf+0x396>
    1288:	da 94       	dec	r13
    128a:	f2 01       	movw	r30, r4
    128c:	ed 0d       	add	r30, r13
    128e:	f1 1d       	adc	r31, r1
    1290:	80 81       	ld	r24, Z
    1292:	90 e0       	ldi	r25, 0x00	; 0
    1294:	b3 01       	movw	r22, r6
    1296:	0e 94 ce 09 	call	0x139c	; 0x139c <fputc>
    129a:	dd 20       	and	r13, r13
    129c:	a9 f7       	brne	.-22     	; 0x1288 <vfprintf+0x3a6>
    129e:	06 c0       	rjmp	.+12     	; 0x12ac <vfprintf+0x3ca>
    12a0:	80 e2       	ldi	r24, 0x20	; 32
    12a2:	90 e0       	ldi	r25, 0x00	; 0
    12a4:	b3 01       	movw	r22, r6
    12a6:	0e 94 ce 09 	call	0x139c	; 0x139c <fputc>
    12aa:	ea 94       	dec	r14
    12ac:	ee 20       	and	r14, r14
    12ae:	c1 f7       	brne	.-16     	; 0x12a0 <vfprintf+0x3be>
    12b0:	40 ce       	rjmp	.-896    	; 0xf32 <vfprintf+0x50>
    12b2:	f3 01       	movw	r30, r6
    12b4:	86 81       	ldd	r24, Z+6	; 0x06
    12b6:	97 81       	ldd	r25, Z+7	; 0x07
    12b8:	02 c0       	rjmp	.+4      	; 0x12be <vfprintf+0x3dc>
    12ba:	8f ef       	ldi	r24, 0xFF	; 255
    12bc:	9f ef       	ldi	r25, 0xFF	; 255
    12be:	2d 96       	adiw	r28, 0x0d	; 13
    12c0:	0f b6       	in	r0, 0x3f	; 63
    12c2:	f8 94       	cli
    12c4:	de bf       	out	0x3e, r29	; 62
    12c6:	0f be       	out	0x3f, r0	; 63
    12c8:	cd bf       	out	0x3d, r28	; 61
    12ca:	df 91       	pop	r29
    12cc:	cf 91       	pop	r28
    12ce:	1f 91       	pop	r17
    12d0:	0f 91       	pop	r16
    12d2:	ff 90       	pop	r15
    12d4:	ef 90       	pop	r14
    12d6:	df 90       	pop	r13
    12d8:	cf 90       	pop	r12
    12da:	bf 90       	pop	r11
    12dc:	af 90       	pop	r10
    12de:	9f 90       	pop	r9
    12e0:	8f 90       	pop	r8
    12e2:	7f 90       	pop	r7
    12e4:	6f 90       	pop	r6
    12e6:	5f 90       	pop	r5
    12e8:	4f 90       	pop	r4
    12ea:	3f 90       	pop	r3
    12ec:	2f 90       	pop	r2
    12ee:	08 95       	ret

000012f0 <strnlen_P>:
    12f0:	fc 01       	movw	r30, r24
    12f2:	05 90       	lpm	r0, Z+
    12f4:	61 50       	subi	r22, 0x01	; 1
    12f6:	70 40       	sbci	r23, 0x00	; 0
    12f8:	01 10       	cpse	r0, r1
    12fa:	d8 f7       	brcc	.-10     	; 0x12f2 <strnlen_P+0x2>
    12fc:	80 95       	com	r24
    12fe:	90 95       	com	r25
    1300:	8e 0f       	add	r24, r30
    1302:	9f 1f       	adc	r25, r31
    1304:	08 95       	ret

00001306 <strnlen>:
    1306:	fc 01       	movw	r30, r24
    1308:	61 50       	subi	r22, 0x01	; 1
    130a:	70 40       	sbci	r23, 0x00	; 0
    130c:	01 90       	ld	r0, Z+
    130e:	01 10       	cpse	r0, r1
    1310:	d8 f7       	brcc	.-10     	; 0x1308 <strnlen+0x2>
    1312:	80 95       	com	r24
    1314:	90 95       	com	r25
    1316:	8e 0f       	add	r24, r30
    1318:	9f 1f       	adc	r25, r31
    131a:	08 95       	ret

0000131c <fgetc>:
    131c:	cf 93       	push	r28
    131e:	df 93       	push	r29
    1320:	ec 01       	movw	r28, r24
    1322:	2b 81       	ldd	r18, Y+3	; 0x03
    1324:	20 ff       	sbrs	r18, 0
    1326:	35 c0       	rjmp	.+106    	; 0x1392 <fgetc+0x76>
    1328:	26 ff       	sbrs	r18, 6
    132a:	09 c0       	rjmp	.+18     	; 0x133e <fgetc+0x22>
    132c:	2f 7b       	andi	r18, 0xBF	; 191
    132e:	2b 83       	std	Y+3, r18	; 0x03
    1330:	8e 81       	ldd	r24, Y+6	; 0x06
    1332:	9f 81       	ldd	r25, Y+7	; 0x07
    1334:	01 96       	adiw	r24, 0x01	; 1
    1336:	9f 83       	std	Y+7, r25	; 0x07
    1338:	8e 83       	std	Y+6, r24	; 0x06
    133a:	8a 81       	ldd	r24, Y+2	; 0x02
    133c:	28 c0       	rjmp	.+80     	; 0x138e <fgetc+0x72>
    133e:	22 ff       	sbrs	r18, 2
    1340:	0f c0       	rjmp	.+30     	; 0x1360 <fgetc+0x44>
    1342:	e8 81       	ld	r30, Y
    1344:	f9 81       	ldd	r31, Y+1	; 0x01
    1346:	80 81       	ld	r24, Z
    1348:	99 27       	eor	r25, r25
    134a:	87 fd       	sbrc	r24, 7
    134c:	90 95       	com	r25
    134e:	00 97       	sbiw	r24, 0x00	; 0
    1350:	19 f4       	brne	.+6      	; 0x1358 <fgetc+0x3c>
    1352:	20 62       	ori	r18, 0x20	; 32
    1354:	2b 83       	std	Y+3, r18	; 0x03
    1356:	1d c0       	rjmp	.+58     	; 0x1392 <fgetc+0x76>
    1358:	31 96       	adiw	r30, 0x01	; 1
    135a:	f9 83       	std	Y+1, r31	; 0x01
    135c:	e8 83       	st	Y, r30
    135e:	11 c0       	rjmp	.+34     	; 0x1382 <fgetc+0x66>
    1360:	ea 85       	ldd	r30, Y+10	; 0x0a
    1362:	fb 85       	ldd	r31, Y+11	; 0x0b
    1364:	ce 01       	movw	r24, r28
    1366:	19 95       	eicall
    1368:	97 ff       	sbrs	r25, 7
    136a:	0b c0       	rjmp	.+22     	; 0x1382 <fgetc+0x66>
    136c:	2b 81       	ldd	r18, Y+3	; 0x03
    136e:	3f ef       	ldi	r19, 0xFF	; 255
    1370:	8f 3f       	cpi	r24, 0xFF	; 255
    1372:	93 07       	cpc	r25, r19
    1374:	11 f4       	brne	.+4      	; 0x137a <fgetc+0x5e>
    1376:	80 e1       	ldi	r24, 0x10	; 16
    1378:	01 c0       	rjmp	.+2      	; 0x137c <fgetc+0x60>
    137a:	80 e2       	ldi	r24, 0x20	; 32
    137c:	82 2b       	or	r24, r18
    137e:	8b 83       	std	Y+3, r24	; 0x03
    1380:	08 c0       	rjmp	.+16     	; 0x1392 <fgetc+0x76>
    1382:	2e 81       	ldd	r18, Y+6	; 0x06
    1384:	3f 81       	ldd	r19, Y+7	; 0x07
    1386:	2f 5f       	subi	r18, 0xFF	; 255
    1388:	3f 4f       	sbci	r19, 0xFF	; 255
    138a:	3f 83       	std	Y+7, r19	; 0x07
    138c:	2e 83       	std	Y+6, r18	; 0x06
    138e:	90 e0       	ldi	r25, 0x00	; 0
    1390:	02 c0       	rjmp	.+4      	; 0x1396 <fgetc+0x7a>
    1392:	8f ef       	ldi	r24, 0xFF	; 255
    1394:	9f ef       	ldi	r25, 0xFF	; 255
    1396:	df 91       	pop	r29
    1398:	cf 91       	pop	r28
    139a:	08 95       	ret

0000139c <fputc>:
    139c:	0f 93       	push	r16
    139e:	1f 93       	push	r17
    13a0:	cf 93       	push	r28
    13a2:	df 93       	push	r29
    13a4:	8c 01       	movw	r16, r24
    13a6:	eb 01       	movw	r28, r22
    13a8:	8b 81       	ldd	r24, Y+3	; 0x03
    13aa:	81 ff       	sbrs	r24, 1
    13ac:	1b c0       	rjmp	.+54     	; 0x13e4 <fputc+0x48>
    13ae:	82 ff       	sbrs	r24, 2
    13b0:	0d c0       	rjmp	.+26     	; 0x13cc <fputc+0x30>
    13b2:	2e 81       	ldd	r18, Y+6	; 0x06
    13b4:	3f 81       	ldd	r19, Y+7	; 0x07
    13b6:	8c 81       	ldd	r24, Y+4	; 0x04
    13b8:	9d 81       	ldd	r25, Y+5	; 0x05
    13ba:	28 17       	cp	r18, r24
    13bc:	39 07       	cpc	r19, r25
    13be:	64 f4       	brge	.+24     	; 0x13d8 <fputc+0x3c>
    13c0:	e8 81       	ld	r30, Y
    13c2:	f9 81       	ldd	r31, Y+1	; 0x01
    13c4:	01 93       	st	Z+, r16
    13c6:	f9 83       	std	Y+1, r31	; 0x01
    13c8:	e8 83       	st	Y, r30
    13ca:	06 c0       	rjmp	.+12     	; 0x13d8 <fputc+0x3c>
    13cc:	e8 85       	ldd	r30, Y+8	; 0x08
    13ce:	f9 85       	ldd	r31, Y+9	; 0x09
    13d0:	80 2f       	mov	r24, r16
    13d2:	19 95       	eicall
    13d4:	00 97       	sbiw	r24, 0x00	; 0
    13d6:	31 f4       	brne	.+12     	; 0x13e4 <fputc+0x48>
    13d8:	8e 81       	ldd	r24, Y+6	; 0x06
    13da:	9f 81       	ldd	r25, Y+7	; 0x07
    13dc:	01 96       	adiw	r24, 0x01	; 1
    13de:	9f 83       	std	Y+7, r25	; 0x07
    13e0:	8e 83       	std	Y+6, r24	; 0x06
    13e2:	02 c0       	rjmp	.+4      	; 0x13e8 <fputc+0x4c>
    13e4:	0f ef       	ldi	r16, 0xFF	; 255
    13e6:	1f ef       	ldi	r17, 0xFF	; 255
    13e8:	c8 01       	movw	r24, r16
    13ea:	df 91       	pop	r29
    13ec:	cf 91       	pop	r28
    13ee:	1f 91       	pop	r17
    13f0:	0f 91       	pop	r16
    13f2:	08 95       	ret

000013f4 <__ultoa_invert>:
    13f4:	fa 01       	movw	r30, r20
    13f6:	aa 27       	eor	r26, r26
    13f8:	28 30       	cpi	r18, 0x08	; 8
    13fa:	51 f1       	breq	.+84     	; 0x1450 <__ultoa_invert+0x5c>
    13fc:	20 31       	cpi	r18, 0x10	; 16
    13fe:	81 f1       	breq	.+96     	; 0x1460 <__ultoa_invert+0x6c>
    1400:	e8 94       	clt
    1402:	6f 93       	push	r22
    1404:	6e 7f       	andi	r22, 0xFE	; 254
    1406:	6e 5f       	subi	r22, 0xFE	; 254
    1408:	7f 4f       	sbci	r23, 0xFF	; 255
    140a:	8f 4f       	sbci	r24, 0xFF	; 255
    140c:	9f 4f       	sbci	r25, 0xFF	; 255
    140e:	af 4f       	sbci	r26, 0xFF	; 255
    1410:	b1 e0       	ldi	r27, 0x01	; 1
    1412:	3e d0       	rcall	.+124    	; 0x1490 <__ultoa_invert+0x9c>
    1414:	b4 e0       	ldi	r27, 0x04	; 4
    1416:	3c d0       	rcall	.+120    	; 0x1490 <__ultoa_invert+0x9c>
    1418:	67 0f       	add	r22, r23
    141a:	78 1f       	adc	r23, r24
    141c:	89 1f       	adc	r24, r25
    141e:	9a 1f       	adc	r25, r26
    1420:	a1 1d       	adc	r26, r1
    1422:	68 0f       	add	r22, r24
    1424:	79 1f       	adc	r23, r25
    1426:	8a 1f       	adc	r24, r26
    1428:	91 1d       	adc	r25, r1
    142a:	a1 1d       	adc	r26, r1
    142c:	6a 0f       	add	r22, r26
    142e:	71 1d       	adc	r23, r1
    1430:	81 1d       	adc	r24, r1
    1432:	91 1d       	adc	r25, r1
    1434:	a1 1d       	adc	r26, r1
    1436:	20 d0       	rcall	.+64     	; 0x1478 <__ultoa_invert+0x84>
    1438:	09 f4       	brne	.+2      	; 0x143c <__ultoa_invert+0x48>
    143a:	68 94       	set
    143c:	3f 91       	pop	r19
    143e:	2a e0       	ldi	r18, 0x0A	; 10
    1440:	26 9f       	mul	r18, r22
    1442:	11 24       	eor	r1, r1
    1444:	30 19       	sub	r19, r0
    1446:	30 5d       	subi	r19, 0xD0	; 208
    1448:	31 93       	st	Z+, r19
    144a:	de f6       	brtc	.-74     	; 0x1402 <__ultoa_invert+0xe>
    144c:	cf 01       	movw	r24, r30
    144e:	08 95       	ret
    1450:	46 2f       	mov	r20, r22
    1452:	47 70       	andi	r20, 0x07	; 7
    1454:	40 5d       	subi	r20, 0xD0	; 208
    1456:	41 93       	st	Z+, r20
    1458:	b3 e0       	ldi	r27, 0x03	; 3
    145a:	0f d0       	rcall	.+30     	; 0x147a <__ultoa_invert+0x86>
    145c:	c9 f7       	brne	.-14     	; 0x1450 <__ultoa_invert+0x5c>
    145e:	f6 cf       	rjmp	.-20     	; 0x144c <__ultoa_invert+0x58>
    1460:	46 2f       	mov	r20, r22
    1462:	4f 70       	andi	r20, 0x0F	; 15
    1464:	40 5d       	subi	r20, 0xD0	; 208
    1466:	4a 33       	cpi	r20, 0x3A	; 58
    1468:	18 f0       	brcs	.+6      	; 0x1470 <__ultoa_invert+0x7c>
    146a:	49 5d       	subi	r20, 0xD9	; 217
    146c:	31 fd       	sbrc	r19, 1
    146e:	40 52       	subi	r20, 0x20	; 32
    1470:	41 93       	st	Z+, r20
    1472:	02 d0       	rcall	.+4      	; 0x1478 <__ultoa_invert+0x84>
    1474:	a9 f7       	brne	.-22     	; 0x1460 <__ultoa_invert+0x6c>
    1476:	ea cf       	rjmp	.-44     	; 0x144c <__ultoa_invert+0x58>
    1478:	b4 e0       	ldi	r27, 0x04	; 4
    147a:	a6 95       	lsr	r26
    147c:	97 95       	ror	r25
    147e:	87 95       	ror	r24
    1480:	77 95       	ror	r23
    1482:	67 95       	ror	r22
    1484:	ba 95       	dec	r27
    1486:	c9 f7       	brne	.-14     	; 0x147a <__ultoa_invert+0x86>
    1488:	00 97       	sbiw	r24, 0x00	; 0
    148a:	61 05       	cpc	r22, r1
    148c:	71 05       	cpc	r23, r1
    148e:	08 95       	ret
    1490:	9b 01       	movw	r18, r22
    1492:	ac 01       	movw	r20, r24
    1494:	0a 2e       	mov	r0, r26
    1496:	06 94       	lsr	r0
    1498:	57 95       	ror	r21
    149a:	47 95       	ror	r20
    149c:	37 95       	ror	r19
    149e:	27 95       	ror	r18
    14a0:	ba 95       	dec	r27
    14a2:	c9 f7       	brne	.-14     	; 0x1496 <__ultoa_invert+0xa2>
    14a4:	62 0f       	add	r22, r18
    14a6:	73 1f       	adc	r23, r19
    14a8:	84 1f       	adc	r24, r20
    14aa:	95 1f       	adc	r25, r21
    14ac:	a0 1d       	adc	r26, r0
    14ae:	08 95       	ret

000014b0 <_exit>:
    14b0:	f8 94       	cli

000014b2 <__stop_program>:
    14b2:	ff cf       	rjmp	.-2      	; 0x14b2 <__stop_program>
