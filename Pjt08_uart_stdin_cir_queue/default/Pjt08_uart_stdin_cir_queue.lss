
Pjt08_uart_stdin_cir_queue.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000a4  00800200  00000d7e  00000e12  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d7e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000092  008002a4  008002a4  00000eb6  2**0
                  ALLOC
  3 .stab         00000f24  00000000  00000000  00000eb8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000027c  00000000  00000000  00001ddc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000208  00000000  00000000  00002058  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000193a  00000000  00000000  00002260  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c3c  00000000  00000000  00003b9a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ee9  00000000  00000000  000047d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000408  00000000  00000000  000056c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004de  00000000  00000000  00005ac8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000ea8  00000000  00000000  00005fa6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  00006e4e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
   4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
   8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
   c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  10:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  14:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  18:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  1c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  20:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  24:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  28:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  2c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  30:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  34:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  38:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  3c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  40:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  44:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  48:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  4c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  50:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  54:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  58:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  5c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  60:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  64:	0c 94 4e 02 	jmp	0x49c	; 0x49c <__vector_25>
  68:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  6c:	0c 94 1f 02 	jmp	0x43e	; 0x43e <__vector_27>
  70:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  74:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  78:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  7c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  80:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  84:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  88:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  8c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  90:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  94:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  98:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  9c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  a0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  a4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  a8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  ac:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  b0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  b4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  b8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  bc:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  c0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  c4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  c8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  cc:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  d0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  d4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  d8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  dc:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  e0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ee e7       	ldi	r30, 0x7E	; 126
  fc:	fd e0       	ldi	r31, 0x0D	; 13
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a4 3a       	cpi	r26, 0xA4	; 164
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>
 10e:	1b be       	out	0x3b, r1	; 59

00000110 <__do_clear_bss>:
 110:	13 e0       	ldi	r17, 0x03	; 3
 112:	a4 ea       	ldi	r26, 0xA4	; 164
 114:	b2 e0       	ldi	r27, 0x02	; 2
 116:	01 c0       	rjmp	.+2      	; 0x11a <.do_clear_bss_start>

00000118 <.do_clear_bss_loop>:
 118:	1d 92       	st	X+, r1

0000011a <.do_clear_bss_start>:
 11a:	a6 33       	cpi	r26, 0x36	; 54
 11c:	b1 07       	cpc	r27, r17
 11e:	e1 f7       	brne	.-8      	; 0x118 <.do_clear_bss_loop>
 120:	0e 94 83 02 	call	0x506	; 0x506 <main>
 124:	0c 94 bd 06 	jmp	0xd7a	; 0xd7a <_exit>

00000128 <__bad_interrupt>:
 128:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012c <led>:
#include "queue.h"

static uint8_t Leds;

void led(int n) {
	DDRL = PORTL = 0xff;
 12c:	2f ef       	ldi	r18, 0xFF	; 255
 12e:	20 93 0b 01 	sts	0x010B, r18
 132:	20 93 0a 01 	sts	0x010A, r18

	if(n == 1)
 136:	81 30       	cpi	r24, 0x01	; 1
 138:	91 05       	cpc	r25, r1
 13a:	29 f4       	brne	.+10     	; 0x146 <led+0x1a>
		Leds = PORTL = 0x00;
 13c:	10 92 0b 01 	sts	0x010B, r1
 140:	10 92 a4 02 	sts	0x02A4, r1
 144:	08 95       	ret

	if(n == 2)
 146:	82 30       	cpi	r24, 0x02	; 2
 148:	91 05       	cpc	r25, r1
 14a:	29 f4       	brne	.+10     	; 0x156 <led+0x2a>
		Leds = PORTL = 0xff;
 14c:	20 93 0b 01 	sts	0x010B, r18
 150:	20 93 a4 02 	sts	0x02A4, r18
 154:	08 95       	ret

	if(n == 3) {
 156:	83 30       	cpi	r24, 0x03	; 3
 158:	91 05       	cpc	r25, r1
 15a:	41 f4       	brne	.+16     	; 0x16c <led+0x40>
		Leds &= ~(1 << 1);
 15c:	80 91 a4 02 	lds	r24, 0x02A4
 160:	8d 7f       	andi	r24, 0xFD	; 253
 162:	80 93 a4 02 	sts	0x02A4, r24
		PORTL = Leds;
 166:	80 93 0b 01 	sts	0x010B, r24
 16a:	08 95       	ret
	}

	if(n == 4) {
 16c:	84 30       	cpi	r24, 0x04	; 4
 16e:	91 05       	cpc	r25, r1
 170:	39 f4       	brne	.+14     	; 0x180 <led+0x54>
		Leds |= ~(1 << 1);
 172:	80 91 a4 02 	lds	r24, 0x02A4
 176:	8d 6f       	ori	r24, 0xFD	; 253
 178:	80 93 a4 02 	sts	0x02A4, r24
		PORTL = Leds;
 17c:	80 93 0b 01 	sts	0x010B, r24
 180:	08 95       	ret

00000182 <is_prime>:
#include <avr/io.h>
#include <stdio.h>
#include <compat/deprecated.h>
#include "prime.h"

int is_prime(int n) {
 182:	cf 93       	push	r28
 184:	df 93       	push	r29
 186:	fc 01       	movw	r30, r24
	int i;
	for(i = 2;i <= n/2;i++)
 188:	62 e0       	ldi	r22, 0x02	; 2
 18a:	70 e0       	ldi	r23, 0x00	; 0
 18c:	0e 94 06 03 	call	0x60c	; 0x60c <__divmodhi4>
 190:	eb 01       	movw	r28, r22
 192:	22 e0       	ldi	r18, 0x02	; 2
 194:	30 e0       	ldi	r19, 0x00	; 0
 196:	08 c0       	rjmp	.+16     	; 0x1a8 <is_prime+0x26>
		if((n % i) == 0)
 198:	cf 01       	movw	r24, r30
 19a:	b9 01       	movw	r22, r18
 19c:	0e 94 06 03 	call	0x60c	; 0x60c <__divmodhi4>
 1a0:	00 97       	sbiw	r24, 0x00	; 0
 1a2:	41 f0       	breq	.+16     	; 0x1b4 <is_prime+0x32>
#include <compat/deprecated.h>
#include "prime.h"

int is_prime(int n) {
	int i;
	for(i = 2;i <= n/2;i++)
 1a4:	2f 5f       	subi	r18, 0xFF	; 255
 1a6:	3f 4f       	sbci	r19, 0xFF	; 255
 1a8:	c2 17       	cp	r28, r18
 1aa:	d3 07       	cpc	r29, r19
 1ac:	ac f7       	brge	.-22     	; 0x198 <is_prime+0x16>
		if((n % i) == 0)
			return(0);
	return(1);
 1ae:	81 e0       	ldi	r24, 0x01	; 1
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	02 c0       	rjmp	.+4      	; 0x1b8 <is_prime+0x36>

int is_prime(int n) {
	int i;
	for(i = 2;i <= n/2;i++)
		if((n % i) == 0)
			return(0);
 1b4:	80 e0       	ldi	r24, 0x00	; 0
 1b6:	90 e0       	ldi	r25, 0x00	; 0
	return(1);
}
 1b8:	df 91       	pop	r29
 1ba:	cf 91       	pop	r28
 1bc:	08 95       	ret

000001be <app_prime>:

void app_prime(int t) {
 1be:	cf 92       	push	r12
 1c0:	df 92       	push	r13
 1c2:	ef 92       	push	r14
 1c4:	ff 92       	push	r15
 1c6:	0f 93       	push	r16
 1c8:	1f 93       	push	r17
 1ca:	cf 93       	push	r28
 1cc:	df 93       	push	r29
 1ce:	7c 01       	movw	r14, r24
	int n, count = 0;
 1d0:	00 e0       	ldi	r16, 0x00	; 0
 1d2:	10 e0       	ldi	r17, 0x00	; 0
	for(n = 2;n <= t;n++) {
 1d4:	c2 e0       	ldi	r28, 0x02	; 2
 1d6:	d0 e0       	ldi	r29, 0x00	; 0
		if(is_prime(n)) {
			count++;
			printf("%d is a prime number !!! \n", n);
 1d8:	20 e6       	ldi	r18, 0x60	; 96
 1da:	c2 2e       	mov	r12, r18
 1dc:	22 e0       	ldi	r18, 0x02	; 2
 1de:	d2 2e       	mov	r13, r18
	return(1);
}

void app_prime(int t) {
	int n, count = 0;
	for(n = 2;n <= t;n++) {
 1e0:	16 c0       	rjmp	.+44     	; 0x20e <app_prime+0x50>
		if(is_prime(n)) {
 1e2:	ce 01       	movw	r24, r28
 1e4:	0e 94 c1 00 	call	0x182	; 0x182 <is_prime>
 1e8:	00 97       	sbiw	r24, 0x00	; 0
 1ea:	81 f0       	breq	.+32     	; 0x20c <app_prime+0x4e>
			count++;
 1ec:	0f 5f       	subi	r16, 0xFF	; 255
 1ee:	1f 4f       	sbci	r17, 0xFF	; 255
			printf("%d is a prime number !!! \n", n);
 1f0:	00 d0       	rcall	.+0      	; 0x1f2 <app_prime+0x34>
 1f2:	0f 92       	push	r0
 1f4:	ed b7       	in	r30, 0x3d	; 61
 1f6:	fe b7       	in	r31, 0x3e	; 62
 1f8:	d2 82       	std	Z+2, r13	; 0x02
 1fa:	c1 82       	std	Z+1, r12	; 0x01
 1fc:	d4 83       	std	Z+4, r29	; 0x04
 1fe:	c3 83       	std	Z+3, r28	; 0x03
 200:	0e 94 96 03 	call	0x72c	; 0x72c <printf>
 204:	0f 90       	pop	r0
 206:	0f 90       	pop	r0
 208:	0f 90       	pop	r0
 20a:	0f 90       	pop	r0
	return(1);
}

void app_prime(int t) {
	int n, count = 0;
	for(n = 2;n <= t;n++) {
 20c:	21 96       	adiw	r28, 0x01	; 1
 20e:	ec 16       	cp	r14, r28
 210:	fd 06       	cpc	r15, r29
 212:	3c f7       	brge	.-50     	; 0x1e2 <app_prime+0x24>
		if(is_prime(n)) {
			count++;
			printf("%d is a prime number !!! \n", n);
		}
	}
	printf("count = %d\n", count);
 214:	00 d0       	rcall	.+0      	; 0x216 <app_prime+0x58>
 216:	0f 92       	push	r0
 218:	8b e7       	ldi	r24, 0x7B	; 123
 21a:	92 e0       	ldi	r25, 0x02	; 2
 21c:	ed b7       	in	r30, 0x3d	; 61
 21e:	fe b7       	in	r31, 0x3e	; 62
 220:	92 83       	std	Z+2, r25	; 0x02
 222:	81 83       	std	Z+1, r24	; 0x01
 224:	14 83       	std	Z+4, r17	; 0x04
 226:	03 83       	std	Z+3, r16	; 0x03
 228:	0e 94 96 03 	call	0x72c	; 0x72c <printf>
 22c:	0f 90       	pop	r0
 22e:	0f 90       	pop	r0
 230:	0f 90       	pop	r0
 232:	0f 90       	pop	r0
}
 234:	df 91       	pop	r29
 236:	cf 91       	pop	r28
 238:	1f 91       	pop	r17
 23a:	0f 91       	pop	r16
 23c:	ff 90       	pop	r15
 23e:	ef 90       	pop	r14
 240:	df 90       	pop	r13
 242:	cf 90       	pop	r12
 244:	08 95       	ret

00000246 <q_init>:

char 	qi[QI_SIZE], qo[QO_SIZE];
int 	fi, ri, fo, ro;

void q_init() {
	fi = ri = fo = ro = 0;
 246:	10 92 ec 02 	sts	0x02EC, r1
 24a:	10 92 eb 02 	sts	0x02EB, r1
 24e:	10 92 ea 02 	sts	0x02EA, r1
 252:	10 92 e9 02 	sts	0x02E9, r1
 256:	10 92 ee 02 	sts	0x02EE, r1
 25a:	10 92 ed 02 	sts	0x02ED, r1
 25e:	10 92 a8 02 	sts	0x02A8, r1
 262:	10 92 a7 02 	sts	0x02A7, r1
}
 266:	08 95       	ret

00000268 <qi_insert>:


int qi_insert(char ch) {
 268:	48 2f       	mov	r20, r24
	if((ri + 1) % QI_SIZE == fi)
 26a:	20 91 ed 02 	lds	r18, 0x02ED
 26e:	30 91 ee 02 	lds	r19, 0x02EE
 272:	2f 5f       	subi	r18, 0xFF	; 255
 274:	3f 4f       	sbci	r19, 0xFF	; 255
 276:	c9 01       	movw	r24, r18
 278:	60 e4       	ldi	r22, 0x40	; 64
 27a:	70 e0       	ldi	r23, 0x00	; 0
 27c:	0e 94 06 03 	call	0x60c	; 0x60c <__divmodhi4>
 280:	9c 01       	movw	r18, r24
 282:	80 91 a7 02 	lds	r24, 0x02A7
 286:	90 91 a8 02 	lds	r25, 0x02A8
 28a:	28 17       	cp	r18, r24
 28c:	39 07       	cpc	r19, r25
 28e:	59 f0       	breq	.+22     	; 0x2a6 <qi_insert+0x3e>
		return(0);
	ri = (ri + 1) % QI_SIZE;
 290:	30 93 ee 02 	sts	0x02EE, r19
 294:	20 93 ed 02 	sts	0x02ED, r18
	qi[ri] = ch;
 298:	21 51       	subi	r18, 0x11	; 17
 29a:	3d 4f       	sbci	r19, 0xFD	; 253
 29c:	f9 01       	movw	r30, r18
 29e:	40 83       	st	Z, r20
	return(1);
 2a0:	81 e0       	ldi	r24, 0x01	; 1
 2a2:	90 e0       	ldi	r25, 0x00	; 0
 2a4:	08 95       	ret
}


int qi_insert(char ch) {
	if((ri + 1) % QI_SIZE == fi)
		return(0);
 2a6:	80 e0       	ldi	r24, 0x00	; 0
 2a8:	90 e0       	ldi	r25, 0x00	; 0
	ri = (ri + 1) % QI_SIZE;
	qi[ri] = ch;
	return(1);
}
 2aa:	08 95       	ret

000002ac <qi_delete>:

int qi_delete() {
	if(ri == fi)
 2ac:	80 91 a7 02 	lds	r24, 0x02A7
 2b0:	90 91 a8 02 	lds	r25, 0x02A8
 2b4:	20 91 ed 02 	lds	r18, 0x02ED
 2b8:	30 91 ee 02 	lds	r19, 0x02EE
 2bc:	28 17       	cp	r18, r24
 2be:	39 07       	cpc	r19, r25
 2c0:	79 f0       	breq	.+30     	; 0x2e0 <qi_delete+0x34>
		return(0);
	fi = (fi + 1) % QI_SIZE;
 2c2:	01 96       	adiw	r24, 0x01	; 1
 2c4:	60 e4       	ldi	r22, 0x40	; 64
 2c6:	70 e0       	ldi	r23, 0x00	; 0
 2c8:	0e 94 06 03 	call	0x60c	; 0x60c <__divmodhi4>
 2cc:	90 93 a8 02 	sts	0x02A8, r25
 2d0:	80 93 a7 02 	sts	0x02A7, r24
	return(qi[fi]);
 2d4:	81 51       	subi	r24, 0x11	; 17
 2d6:	9d 4f       	sbci	r25, 0xFD	; 253
 2d8:	fc 01       	movw	r30, r24
 2da:	80 81       	ld	r24, Z
 2dc:	90 e0       	ldi	r25, 0x00	; 0
 2de:	08 95       	ret
	return(1);
}

int qi_delete() {
	if(ri == fi)
		return(0);
 2e0:	80 e0       	ldi	r24, 0x00	; 0
 2e2:	90 e0       	ldi	r25, 0x00	; 0
	fi = (fi + 1) % QI_SIZE;
	return(qi[fi]);
}
 2e4:	08 95       	ret

000002e6 <qo_insert>:

int qo_insert(char ch) {
 2e6:	48 2f       	mov	r20, r24
	if((ro + 1) % QO_SIZE == fo)
 2e8:	20 91 eb 02 	lds	r18, 0x02EB
 2ec:	30 91 ec 02 	lds	r19, 0x02EC
 2f0:	2f 5f       	subi	r18, 0xFF	; 255
 2f2:	3f 4f       	sbci	r19, 0xFF	; 255
 2f4:	c9 01       	movw	r24, r18
 2f6:	60 e4       	ldi	r22, 0x40	; 64
 2f8:	70 e0       	ldi	r23, 0x00	; 0
 2fa:	0e 94 06 03 	call	0x60c	; 0x60c <__divmodhi4>
 2fe:	9c 01       	movw	r18, r24
 300:	80 91 e9 02 	lds	r24, 0x02E9
 304:	90 91 ea 02 	lds	r25, 0x02EA
 308:	28 17       	cp	r18, r24
 30a:	39 07       	cpc	r19, r25
 30c:	59 f0       	breq	.+22     	; 0x324 <qo_insert+0x3e>
		return(0);
	ro = (ro + 1) % QO_SIZE;
 30e:	30 93 ec 02 	sts	0x02EC, r19
 312:	20 93 eb 02 	sts	0x02EB, r18
	qo[ro] = ch;
 316:	27 55       	subi	r18, 0x57	; 87
 318:	3d 4f       	sbci	r19, 0xFD	; 253
 31a:	f9 01       	movw	r30, r18
 31c:	40 83       	st	Z, r20
	return(1);
 31e:	81 e0       	ldi	r24, 0x01	; 1
 320:	90 e0       	ldi	r25, 0x00	; 0
 322:	08 95       	ret
	return(qi[fi]);
}

int qo_insert(char ch) {
	if((ro + 1) % QO_SIZE == fo)
		return(0);
 324:	80 e0       	ldi	r24, 0x00	; 0
 326:	90 e0       	ldi	r25, 0x00	; 0
	ro = (ro + 1) % QO_SIZE;
	qo[ro] = ch;
	return(1);
}
 328:	08 95       	ret

0000032a <qo_delete>:

int qo_delete() {
	if(ro == fo)
 32a:	80 91 e9 02 	lds	r24, 0x02E9
 32e:	90 91 ea 02 	lds	r25, 0x02EA
 332:	20 91 eb 02 	lds	r18, 0x02EB
 336:	30 91 ec 02 	lds	r19, 0x02EC
 33a:	28 17       	cp	r18, r24
 33c:	39 07       	cpc	r19, r25
 33e:	79 f0       	breq	.+30     	; 0x35e <qo_delete+0x34>
		return(0);
	fo = (fo + 1) % QO_SIZE;
 340:	01 96       	adiw	r24, 0x01	; 1
 342:	60 e4       	ldi	r22, 0x40	; 64
 344:	70 e0       	ldi	r23, 0x00	; 0
 346:	0e 94 06 03 	call	0x60c	; 0x60c <__divmodhi4>
 34a:	90 93 ea 02 	sts	0x02EA, r25
 34e:	80 93 e9 02 	sts	0x02E9, r24
	return(qo[fo]);
 352:	87 55       	subi	r24, 0x57	; 87
 354:	9d 4f       	sbci	r25, 0xFD	; 253
 356:	fc 01       	movw	r30, r24
 358:	80 81       	ld	r24, Z
 35a:	90 e0       	ldi	r25, 0x00	; 0
 35c:	08 95       	ret
	return(1);
}

int qo_delete() {
	if(ro == fo)
		return(0);
 35e:	80 e0       	ldi	r24, 0x00	; 0
 360:	90 e0       	ldi	r25, 0x00	; 0
	fo = (fo + 1) % QO_SIZE;
	return(qo[fo]);
}
 362:	08 95       	ret

00000364 <uart_getchar>:

int uart_getchar(FILE *stream) {
	char ch;

	do {
		cli();
 364:	f8 94       	cli
		ch = qi_delete();
 366:	0e 94 56 01 	call	0x2ac	; 0x2ac <qi_delete>
		sei();
 36a:	78 94       	sei
	} while (ch == 0);
 36c:	88 23       	and	r24, r24
 36e:	d1 f3       	breq	.-12     	; 0x364 <uart_getchar>

	if(ch == EOT)	return(-1);
 370:	84 30       	cpi	r24, 0x04	; 4
 372:	11 f0       	breq	.+4      	; 0x378 <uart_getchar+0x14>
	else			return(ch);
 374:	90 e0       	ldi	r25, 0x00	; 0
 376:	08 95       	ret
		cli();
		ch = qi_delete();
		sei();
	} while (ch == 0);

	if(ch == EOT)	return(-1);
 378:	8f ef       	ldi	r24, 0xFF	; 255
 37a:	9f ef       	ldi	r25, 0xFF	; 255
	else			return(ch);
}
 37c:	08 95       	ret

0000037e <uart_putchar>:
	sbi(UCSR0B, TXCIE0);
	sbi(UCSR0B, RXEN0);
	sbi(UCSR0B, RXCIE0);
}

int uart_putchar(char ch, FILE *stream) {
 37e:	cf 93       	push	r28
 380:	c8 2f       	mov	r28, r24
	if(ch == '\n')	uart_putchar('\r', stream);
 382:	8a 30       	cpi	r24, 0x0A	; 10
 384:	19 f4       	brne	.+6      	; 0x38c <uart_putchar+0xe>
 386:	8d e0       	ldi	r24, 0x0D	; 13
 388:	0e 94 bf 01 	call	0x37e	; 0x37e <uart_putchar>
	
	cli();
 38c:	f8 94       	cli
	if(!uart_busy) {
 38e:	80 91 2f 03 	lds	r24, 0x032F
 392:	88 23       	and	r24, r24
 394:	59 f4       	brne	.+22     	; 0x3ac <uart_putchar+0x2e>
		UDR0 = ch;
 396:	c0 93 c6 00 	sts	0x00C6, r28
		uart_busy = 1;
 39a:	81 e0       	ldi	r24, 0x01	; 1
 39c:	80 93 2f 03 	sts	0x032F, r24
 3a0:	0a c0       	rjmp	.+20     	; 0x3b6 <uart_putchar+0x38>
	} 
	else {
		while(qo_insert(ch) == 0) {
			sei();
 3a2:	78 94       	sei
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3a4:	86 ef       	ldi	r24, 0xF6	; 246
 3a6:	8a 95       	dec	r24
 3a8:	f1 f7       	brne	.-4      	; 0x3a6 <uart_putchar+0x28>
			_delay_us(100);
			cli();
 3aa:	f8 94       	cli
	if(!uart_busy) {
		UDR0 = ch;
		uart_busy = 1;
	} 
	else {
		while(qo_insert(ch) == 0) {
 3ac:	8c 2f       	mov	r24, r28
 3ae:	0e 94 73 01 	call	0x2e6	; 0x2e6 <qo_insert>
 3b2:	00 97       	sbiw	r24, 0x00	; 0
 3b4:	b1 f3       	breq	.-20     	; 0x3a2 <uart_putchar+0x24>
			sei();
			_delay_us(100);
			cli();
		}
	}
	sei();
 3b6:	78 94       	sei

	return(1);
}
 3b8:	81 e0       	ldi	r24, 0x01	; 1
 3ba:	90 e0       	ldi	r25, 0x00	; 0
 3bc:	cf 91       	pop	r28
 3be:	08 95       	ret

000003c0 <uart_init>:
FILE	Mystdout = FDEV_SETUP_STREAM(uart_putchar, NULL, _FDEV_SETUP_WRITE);
FILE	Mystdin = FDEV_SETUP_STREAM(NULL, uart_getchar, _FDEV_SETUP_READ);
char	uart_busy;

void uart_init() {
	stdin = &Mystdin; stdout = &Mystdout;
 3c0:	87 e8       	ldi	r24, 0x87	; 135
 3c2:	92 e0       	ldi	r25, 0x02	; 2
 3c4:	90 93 31 03 	sts	0x0331, r25
 3c8:	80 93 30 03 	sts	0x0330, r24
 3cc:	85 e9       	ldi	r24, 0x95	; 149
 3ce:	92 e0       	ldi	r25, 0x02	; 2
 3d0:	90 93 33 03 	sts	0x0333, r25
 3d4:	80 93 32 03 	sts	0x0332, r24
	q_init();
 3d8:	0e 94 23 01 	call	0x246	; 0x246 <q_init>
	uart_busy = 0;
 3dc:	10 92 2f 03 	sts	0x032F, r1
	
	UBRR0H = 0x00; UBRR0L = 0x07;
 3e0:	10 92 c5 00 	sts	0x00C5, r1
 3e4:	87 e0       	ldi	r24, 0x07	; 7
 3e6:	80 93 c4 00 	sts	0x00C4, r24
	sbi(UCSR0A, U2X0);
 3ea:	e0 ec       	ldi	r30, 0xC0	; 192
 3ec:	f0 e0       	ldi	r31, 0x00	; 0
 3ee:	80 81       	ld	r24, Z
 3f0:	82 60       	ori	r24, 0x02	; 2
 3f2:	80 83       	st	Z, r24
	sbi(UCSR0B, TXEN0);
 3f4:	e1 ec       	ldi	r30, 0xC1	; 193
 3f6:	f0 e0       	ldi	r31, 0x00	; 0
 3f8:	80 81       	ld	r24, Z
 3fa:	88 60       	ori	r24, 0x08	; 8
 3fc:	80 83       	st	Z, r24
	sbi(UCSR0B, TXCIE0);
 3fe:	80 81       	ld	r24, Z
 400:	80 64       	ori	r24, 0x40	; 64
 402:	80 83       	st	Z, r24
	sbi(UCSR0B, RXEN0);
 404:	80 81       	ld	r24, Z
 406:	80 61       	ori	r24, 0x10	; 16
 408:	80 83       	st	Z, r24
	sbi(UCSR0B, RXCIE0);
 40a:	80 81       	ld	r24, Z
 40c:	80 68       	ori	r24, 0x80	; 128
 40e:	80 83       	st	Z, r24
}
 410:	08 95       	ret

00000412 <uart_echo>:

	if(ch == EOT)	return(-1);
	else			return(ch);
}

void uart_echo (char ch) {
 412:	cf 93       	push	r28
 414:	c8 2f       	mov	r28, r24
	if(ch == '\n')	uart_echo('\r');
 416:	8a 30       	cpi	r24, 0x0A	; 10
 418:	19 f4       	brne	.+6      	; 0x420 <uart_echo+0xe>
 41a:	8d e0       	ldi	r24, 0x0D	; 13
 41c:	0e 94 09 02 	call	0x412	; 0x412 <uart_echo>
	if(!uart_busy) {
 420:	80 91 2f 03 	lds	r24, 0x032F
 424:	88 23       	and	r24, r24
 426:	31 f4       	brne	.+12     	; 0x434 <uart_echo+0x22>
		UDR0 = ch;
 428:	c0 93 c6 00 	sts	0x00C6, r28
		uart_busy = 1;
 42c:	81 e0       	ldi	r24, 0x01	; 1
 42e:	80 93 2f 03 	sts	0x032F, r24
 432:	03 c0       	rjmp	.+6      	; 0x43a <uart_echo+0x28>
	}
	else	qo_insert(ch);
 434:	8c 2f       	mov	r24, r28
 436:	0e 94 73 01 	call	0x2e6	; 0x2e6 <qo_insert>
}
 43a:	cf 91       	pop	r28
 43c:	08 95       	ret

0000043e <__vector_27>:

ISR(USART0_TX_vect) {
 43e:	1f 92       	push	r1
 440:	0f 92       	push	r0
 442:	0f b6       	in	r0, 0x3f	; 63
 444:	0f 92       	push	r0
 446:	0b b6       	in	r0, 0x3b	; 59
 448:	0f 92       	push	r0
 44a:	11 24       	eor	r1, r1
 44c:	2f 93       	push	r18
 44e:	3f 93       	push	r19
 450:	4f 93       	push	r20
 452:	5f 93       	push	r21
 454:	6f 93       	push	r22
 456:	7f 93       	push	r23
 458:	8f 93       	push	r24
 45a:	9f 93       	push	r25
 45c:	af 93       	push	r26
 45e:	bf 93       	push	r27
 460:	ef 93       	push	r30
 462:	ff 93       	push	r31
   char ch;

   if((ch = qo_delete()) == 0)
 464:	0e 94 95 01 	call	0x32a	; 0x32a <qo_delete>
 468:	88 23       	and	r24, r24
 46a:	19 f4       	brne	.+6      	; 0x472 <__vector_27+0x34>
      uart_busy = 0;
 46c:	10 92 2f 03 	sts	0x032F, r1
 470:	02 c0       	rjmp	.+4      	; 0x476 <__vector_27+0x38>
   else
      UDR0 = ch;
 472:	80 93 c6 00 	sts	0x00C6, r24
}
 476:	ff 91       	pop	r31
 478:	ef 91       	pop	r30
 47a:	bf 91       	pop	r27
 47c:	af 91       	pop	r26
 47e:	9f 91       	pop	r25
 480:	8f 91       	pop	r24
 482:	7f 91       	pop	r23
 484:	6f 91       	pop	r22
 486:	5f 91       	pop	r21
 488:	4f 91       	pop	r20
 48a:	3f 91       	pop	r19
 48c:	2f 91       	pop	r18
 48e:	0f 90       	pop	r0
 490:	0b be       	out	0x3b, r0	; 59
 492:	0f 90       	pop	r0
 494:	0f be       	out	0x3f, r0	; 63
 496:	0f 90       	pop	r0
 498:	1f 90       	pop	r1
 49a:	18 95       	reti

0000049c <__vector_25>:

ISR(USART0_RX_vect) {
 49c:	1f 92       	push	r1
 49e:	0f 92       	push	r0
 4a0:	0f b6       	in	r0, 0x3f	; 63
 4a2:	0f 92       	push	r0
 4a4:	0b b6       	in	r0, 0x3b	; 59
 4a6:	0f 92       	push	r0
 4a8:	11 24       	eor	r1, r1
 4aa:	2f 93       	push	r18
 4ac:	3f 93       	push	r19
 4ae:	4f 93       	push	r20
 4b0:	5f 93       	push	r21
 4b2:	6f 93       	push	r22
 4b4:	7f 93       	push	r23
 4b6:	8f 93       	push	r24
 4b8:	9f 93       	push	r25
 4ba:	af 93       	push	r26
 4bc:	bf 93       	push	r27
 4be:	cf 93       	push	r28
 4c0:	ef 93       	push	r30
 4c2:	ff 93       	push	r31
	char ch;

	ch = UDR0;
 4c4:	c0 91 c6 00 	lds	r28, 0x00C6
	
	if(ch != EOT) {
 4c8:	c4 30       	cpi	r28, 0x04	; 4
 4ca:	31 f0       	breq	.+12     	; 0x4d8 <__vector_25+0x3c>
		if(ch == '\r')	ch = '\n';
 4cc:	cd 30       	cpi	r28, 0x0D	; 13
 4ce:	09 f4       	brne	.+2      	; 0x4d2 <__vector_25+0x36>
 4d0:	ca e0       	ldi	r28, 0x0A	; 10
		uart_echo(ch);
 4d2:	8c 2f       	mov	r24, r28
 4d4:	0e 94 09 02 	call	0x412	; 0x412 <uart_echo>
	}
	qi_insert(ch);
 4d8:	8c 2f       	mov	r24, r28
 4da:	0e 94 34 01 	call	0x268	; 0x268 <qi_insert>
}
 4de:	ff 91       	pop	r31
 4e0:	ef 91       	pop	r30
 4e2:	cf 91       	pop	r28
 4e4:	bf 91       	pop	r27
 4e6:	af 91       	pop	r26
 4e8:	9f 91       	pop	r25
 4ea:	8f 91       	pop	r24
 4ec:	7f 91       	pop	r23
 4ee:	6f 91       	pop	r22
 4f0:	5f 91       	pop	r21
 4f2:	4f 91       	pop	r20
 4f4:	3f 91       	pop	r19
 4f6:	2f 91       	pop	r18
 4f8:	0f 90       	pop	r0
 4fa:	0b be       	out	0x3b, r0	; 59
 4fc:	0f 90       	pop	r0
 4fe:	0f be       	out	0x3f, r0	; 63
 500:	0f 90       	pop	r0
 502:	1f 90       	pop	r1
 504:	18 95       	reti

00000506 <main>:
	}
}


int main() {
 506:	cf 93       	push	r28
 508:	df 93       	push	r29
 50a:	cd b7       	in	r28, 0x3d	; 61
 50c:	de b7       	in	r29, 0x3e	; 62
 50e:	c0 58       	subi	r28, 0x80	; 128
 510:	d0 40       	sbci	r29, 0x00	; 0
 512:	0f b6       	in	r0, 0x3f	; 63
 514:	f8 94       	cli
 516:	de bf       	out	0x3e, r29	; 62
 518:	0f be       	out	0x3f, r0	; 63
 51a:	cd bf       	out	0x3d, r28	; 61
	char cmd[128], *cp;
	
	uart_init();
 51c:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <uart_init>
	sei();
 520:	78 94       	sei
	while(1) {
		printf("$ ");
 522:	00 e0       	ldi	r16, 0x00	; 0
 524:	12 e0       	ldi	r17, 0x02	; 2
 526:	0f 92       	push	r0
 528:	0f 92       	push	r0
 52a:	ed b7       	in	r30, 0x3d	; 61
 52c:	fe b7       	in	r31, 0x3e	; 62
 52e:	12 83       	std	Z+2, r17	; 0x02
 530:	01 83       	std	Z+1, r16	; 0x01
 532:	0e 94 96 03 	call	0x72c	; 0x72c <printf>
		if(fgets(cmd, sizeof(cmd), stdin) == NULL)	break;
 536:	0f 90       	pop	r0
 538:	0f 90       	pop	r0
 53a:	40 91 30 03 	lds	r20, 0x0330
 53e:	50 91 31 03 	lds	r21, 0x0331
 542:	ce 01       	movw	r24, r28
 544:	01 96       	adiw	r24, 0x01	; 1
 546:	60 e8       	ldi	r22, 0x80	; 128
 548:	70 e0       	ldi	r23, 0x00	; 0
 54a:	0e 94 62 03 	call	0x6c4	; 0x6c4 <fgets>
 54e:	00 97       	sbiw	r24, 0x00	; 0
 550:	09 f4       	brne	.+2      	; 0x554 <main+0x4e>
 552:	57 c0       	rjmp	.+174    	; 0x602 <main+0xfc>
		if((cp = strtok(cmd, "\n\r\t ")) == NULL)	continue;
 554:	ce 01       	movw	r24, r28
 556:	01 96       	adiw	r24, 0x01	; 1
 558:	63 e0       	ldi	r22, 0x03	; 3
 55a:	72 e0       	ldi	r23, 0x02	; 2
 55c:	0e 94 2d 03 	call	0x65a	; 0x65a <strtok>
 560:	00 97       	sbiw	r24, 0x00	; 0
 562:	09 f3       	breq	.-62     	; 0x526 <main+0x20>
		if(!strcmp(cmd, "prime"))					app_prime(2000);
 564:	ce 01       	movw	r24, r28
 566:	01 96       	adiw	r24, 0x01	; 1
 568:	68 e0       	ldi	r22, 0x08	; 8
 56a:	72 e0       	ldi	r23, 0x02	; 2
 56c:	0e 94 32 03 	call	0x664	; 0x664 <strcmp>
 570:	00 97       	sbiw	r24, 0x00	; 0
 572:	21 f4       	brne	.+8      	; 0x57c <main+0x76>
 574:	80 ed       	ldi	r24, 0xD0	; 208
 576:	97 e0       	ldi	r25, 0x07	; 7
 578:	0e 94 df 00 	call	0x1be	; 0x1be <app_prime>
		
		if(!strcmp(cmd, "led"))			
 57c:	ce 01       	movw	r24, r28
 57e:	01 96       	adiw	r24, 0x01	; 1
 580:	6e e0       	ldi	r22, 0x0E	; 14
 582:	72 e0       	ldi	r23, 0x02	; 2
 584:	0e 94 32 03 	call	0x664	; 0x664 <strcmp>
 588:	00 97       	sbiw	r24, 0x00	; 0
 58a:	69 f6       	brne	.-102    	; 0x526 <main+0x20>
			if(!strcmp(cmd, "on"))
 58c:	ce 01       	movw	r24, r28
 58e:	01 96       	adiw	r24, 0x01	; 1
 590:	62 e1       	ldi	r22, 0x12	; 18
 592:	72 e0       	ldi	r23, 0x02	; 2
 594:	0e 94 32 03 	call	0x664	; 0x664 <strcmp>
 598:	00 97       	sbiw	r24, 0x00	; 0
 59a:	29 f6       	brne	.-118    	; 0x526 <main+0x20>
				if(!strcmp(cmd, "all"))
 59c:	ce 01       	movw	r24, r28
 59e:	01 96       	adiw	r24, 0x01	; 1
 5a0:	65 e1       	ldi	r22, 0x15	; 21
 5a2:	72 e0       	ldi	r23, 0x02	; 2
 5a4:	0e 94 32 03 	call	0x664	; 0x664 <strcmp>
 5a8:	00 97       	sbiw	r24, 0x00	; 0
 5aa:	19 f4       	brne	.+6      	; 0x5b2 <main+0xac>
						led(1);
 5ac:	81 e0       	ldi	r24, 0x01	; 1
 5ae:	90 e0       	ldi	r25, 0x00	; 0
 5b0:	20 c0       	rjmp	.+64     	; 0x5f2 <main+0xec>
		else if(!strcmp(cmd, "led off all"))		led(2);
 5b2:	ce 01       	movw	r24, r28
 5b4:	01 96       	adiw	r24, 0x01	; 1
 5b6:	69 e1       	ldi	r22, 0x19	; 25
 5b8:	72 e0       	ldi	r23, 0x02	; 2
 5ba:	0e 94 32 03 	call	0x664	; 0x664 <strcmp>
 5be:	00 97       	sbiw	r24, 0x00	; 0
 5c0:	19 f4       	brne	.+6      	; 0x5c8 <main+0xc2>
 5c2:	82 e0       	ldi	r24, 0x02	; 2
 5c4:	90 e0       	ldi	r25, 0x00	; 0
 5c6:	15 c0       	rjmp	.+42     	; 0x5f2 <main+0xec>
		else if(!strcmp(cmd, "led on 1"))			led(3);
 5c8:	ce 01       	movw	r24, r28
 5ca:	01 96       	adiw	r24, 0x01	; 1
 5cc:	65 e2       	ldi	r22, 0x25	; 37
 5ce:	72 e0       	ldi	r23, 0x02	; 2
 5d0:	0e 94 32 03 	call	0x664	; 0x664 <strcmp>
 5d4:	00 97       	sbiw	r24, 0x00	; 0
 5d6:	19 f4       	brne	.+6      	; 0x5de <main+0xd8>
 5d8:	83 e0       	ldi	r24, 0x03	; 3
 5da:	90 e0       	ldi	r25, 0x00	; 0
 5dc:	0a c0       	rjmp	.+20     	; 0x5f2 <main+0xec>
		else if(!strcmp(cmd, "led off 1"))			led(4);
 5de:	ce 01       	movw	r24, r28
 5e0:	01 96       	adiw	r24, 0x01	; 1
 5e2:	6e e2       	ldi	r22, 0x2E	; 46
 5e4:	72 e0       	ldi	r23, 0x02	; 2
 5e6:	0e 94 32 03 	call	0x664	; 0x664 <strcmp>
 5ea:	00 97       	sbiw	r24, 0x00	; 0
 5ec:	29 f4       	brne	.+10     	; 0x5f8 <main+0xf2>
 5ee:	84 e0       	ldi	r24, 0x04	; 4
 5f0:	90 e0       	ldi	r25, 0x00	; 0
 5f2:	0e 94 96 00 	call	0x12c	; 0x12c <led>
 5f6:	97 cf       	rjmp	.-210    	; 0x526 <main+0x20>
		//else if(!strcmp(cmd, "led"))				printf("Led = %x\n", Leds);
		else										printf("Unknown command...\n");
 5f8:	88 e3       	ldi	r24, 0x38	; 56
 5fa:	92 e0       	ldi	r25, 0x02	; 2
 5fc:	0e 94 a8 03 	call	0x750	; 0x750 <puts>
 600:	92 cf       	rjmp	.-220    	; 0x526 <main+0x20>
	}
	printf("logout, good bye !!!\n");
 602:	8b e4       	ldi	r24, 0x4B	; 75
 604:	92 e0       	ldi	r25, 0x02	; 2
 606:	0e 94 a8 03 	call	0x750	; 0x750 <puts>
 60a:	ff cf       	rjmp	.-2      	; 0x60a <main+0x104>

0000060c <__divmodhi4>:
 60c:	97 fb       	bst	r25, 7
 60e:	09 2e       	mov	r0, r25
 610:	07 26       	eor	r0, r23
 612:	0a d0       	rcall	.+20     	; 0x628 <__divmodhi4_neg1>
 614:	77 fd       	sbrc	r23, 7
 616:	04 d0       	rcall	.+8      	; 0x620 <__divmodhi4_neg2>
 618:	0c d0       	rcall	.+24     	; 0x632 <__udivmodhi4>
 61a:	06 d0       	rcall	.+12     	; 0x628 <__divmodhi4_neg1>
 61c:	00 20       	and	r0, r0
 61e:	1a f4       	brpl	.+6      	; 0x626 <__divmodhi4_exit>

00000620 <__divmodhi4_neg2>:
 620:	70 95       	com	r23
 622:	61 95       	neg	r22
 624:	7f 4f       	sbci	r23, 0xFF	; 255

00000626 <__divmodhi4_exit>:
 626:	08 95       	ret

00000628 <__divmodhi4_neg1>:
 628:	f6 f7       	brtc	.-4      	; 0x626 <__divmodhi4_exit>
 62a:	90 95       	com	r25
 62c:	81 95       	neg	r24
 62e:	9f 4f       	sbci	r25, 0xFF	; 255
 630:	08 95       	ret

00000632 <__udivmodhi4>:
 632:	aa 1b       	sub	r26, r26
 634:	bb 1b       	sub	r27, r27
 636:	51 e1       	ldi	r21, 0x11	; 17
 638:	07 c0       	rjmp	.+14     	; 0x648 <__udivmodhi4_ep>

0000063a <__udivmodhi4_loop>:
 63a:	aa 1f       	adc	r26, r26
 63c:	bb 1f       	adc	r27, r27
 63e:	a6 17       	cp	r26, r22
 640:	b7 07       	cpc	r27, r23
 642:	10 f0       	brcs	.+4      	; 0x648 <__udivmodhi4_ep>
 644:	a6 1b       	sub	r26, r22
 646:	b7 0b       	sbc	r27, r23

00000648 <__udivmodhi4_ep>:
 648:	88 1f       	adc	r24, r24
 64a:	99 1f       	adc	r25, r25
 64c:	5a 95       	dec	r21
 64e:	a9 f7       	brne	.-22     	; 0x63a <__udivmodhi4_loop>
 650:	80 95       	com	r24
 652:	90 95       	com	r25
 654:	bc 01       	movw	r22, r24
 656:	cd 01       	movw	r24, r26
 658:	08 95       	ret

0000065a <strtok>:
 65a:	45 ea       	ldi	r20, 0xA5	; 165
 65c:	52 e0       	ldi	r21, 0x02	; 2
 65e:	0e 94 3b 03 	call	0x676	; 0x676 <strtok_r>
 662:	08 95       	ret

00000664 <strcmp>:
 664:	fb 01       	movw	r30, r22
 666:	dc 01       	movw	r26, r24
 668:	8d 91       	ld	r24, X+
 66a:	01 90       	ld	r0, Z+
 66c:	80 19       	sub	r24, r0
 66e:	01 10       	cpse	r0, r1
 670:	d9 f3       	breq	.-10     	; 0x668 <strcmp+0x4>
 672:	99 0b       	sbc	r25, r25
 674:	08 95       	ret

00000676 <strtok_r>:
 676:	fa 01       	movw	r30, r20
 678:	a1 91       	ld	r26, Z+
 67a:	b0 81       	ld	r27, Z
 67c:	00 97       	sbiw	r24, 0x00	; 0
 67e:	19 f4       	brne	.+6      	; 0x686 <strtok_r+0x10>
 680:	10 97       	sbiw	r26, 0x00	; 0
 682:	e1 f0       	breq	.+56     	; 0x6bc <strtok_r+0x46>
 684:	cd 01       	movw	r24, r26
 686:	dc 01       	movw	r26, r24
 688:	cd 01       	movw	r24, r26
 68a:	0d 90       	ld	r0, X+
 68c:	00 20       	and	r0, r0
 68e:	11 f4       	brne	.+4      	; 0x694 <strtok_r+0x1e>
 690:	c0 01       	movw	r24, r0
 692:	13 c0       	rjmp	.+38     	; 0x6ba <strtok_r+0x44>
 694:	fb 01       	movw	r30, r22
 696:	21 91       	ld	r18, Z+
 698:	22 23       	and	r18, r18
 69a:	19 f0       	breq	.+6      	; 0x6a2 <strtok_r+0x2c>
 69c:	20 15       	cp	r18, r0
 69e:	d9 f7       	brne	.-10     	; 0x696 <strtok_r+0x20>
 6a0:	f3 cf       	rjmp	.-26     	; 0x688 <strtok_r+0x12>
 6a2:	fb 01       	movw	r30, r22
 6a4:	21 91       	ld	r18, Z+
 6a6:	20 15       	cp	r18, r0
 6a8:	19 f4       	brne	.+6      	; 0x6b0 <strtok_r+0x3a>
 6aa:	1e 92       	st	-X, r1
 6ac:	11 96       	adiw	r26, 0x01	; 1
 6ae:	06 c0       	rjmp	.+12     	; 0x6bc <strtok_r+0x46>
 6b0:	22 23       	and	r18, r18
 6b2:	c1 f7       	brne	.-16     	; 0x6a4 <strtok_r+0x2e>
 6b4:	0d 90       	ld	r0, X+
 6b6:	00 20       	and	r0, r0
 6b8:	a1 f7       	brne	.-24     	; 0x6a2 <strtok_r+0x2c>
 6ba:	d0 01       	movw	r26, r0
 6bc:	fa 01       	movw	r30, r20
 6be:	a1 93       	st	Z+, r26
 6c0:	b0 83       	st	Z, r27
 6c2:	08 95       	ret

000006c4 <fgets>:
 6c4:	cf 92       	push	r12
 6c6:	df 92       	push	r13
 6c8:	ef 92       	push	r14
 6ca:	ff 92       	push	r15
 6cc:	0f 93       	push	r16
 6ce:	1f 93       	push	r17
 6d0:	cf 93       	push	r28
 6d2:	df 93       	push	r29
 6d4:	8c 01       	movw	r16, r24
 6d6:	6a 01       	movw	r12, r20
 6d8:	fa 01       	movw	r30, r20
 6da:	83 81       	ldd	r24, Z+3	; 0x03
 6dc:	80 ff       	sbrs	r24, 0
 6de:	1a c0       	rjmp	.+52     	; 0x714 <fgets+0x50>
 6e0:	16 16       	cp	r1, r22
 6e2:	17 06       	cpc	r1, r23
 6e4:	bc f4       	brge	.+46     	; 0x714 <fgets+0x50>
 6e6:	7b 01       	movw	r14, r22
 6e8:	e8 01       	movw	r28, r16
 6ea:	0e c0       	rjmp	.+28     	; 0x708 <fgets+0x44>
 6ec:	c6 01       	movw	r24, r12
 6ee:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <fgetc>
 6f2:	ff ef       	ldi	r31, 0xFF	; 255
 6f4:	8f 3f       	cpi	r24, 0xFF	; 255
 6f6:	9f 07       	cpc	r25, r31
 6f8:	69 f0       	breq	.+26     	; 0x714 <fgets+0x50>
 6fa:	89 93       	st	Y+, r24
 6fc:	08 94       	sec
 6fe:	e1 08       	sbc	r14, r1
 700:	f1 08       	sbc	r15, r1
 702:	8a 30       	cpi	r24, 0x0A	; 10
 704:	91 05       	cpc	r25, r1
 706:	21 f0       	breq	.+8      	; 0x710 <fgets+0x4c>
 708:	21 e0       	ldi	r18, 0x01	; 1
 70a:	e2 16       	cp	r14, r18
 70c:	f1 04       	cpc	r15, r1
 70e:	71 f7       	brne	.-36     	; 0x6ec <fgets+0x28>
 710:	18 82       	st	Y, r1
 712:	02 c0       	rjmp	.+4      	; 0x718 <fgets+0x54>
 714:	00 e0       	ldi	r16, 0x00	; 0
 716:	10 e0       	ldi	r17, 0x00	; 0
 718:	c8 01       	movw	r24, r16
 71a:	df 91       	pop	r29
 71c:	cf 91       	pop	r28
 71e:	1f 91       	pop	r17
 720:	0f 91       	pop	r16
 722:	ff 90       	pop	r15
 724:	ef 90       	pop	r14
 726:	df 90       	pop	r13
 728:	cf 90       	pop	r12
 72a:	08 95       	ret

0000072c <printf>:
 72c:	cf 93       	push	r28
 72e:	df 93       	push	r29
 730:	cd b7       	in	r28, 0x3d	; 61
 732:	de b7       	in	r29, 0x3e	; 62
 734:	fe 01       	movw	r30, r28
 736:	36 96       	adiw	r30, 0x06	; 6
 738:	61 91       	ld	r22, Z+
 73a:	71 91       	ld	r23, Z+
 73c:	80 91 32 03 	lds	r24, 0x0332
 740:	90 91 33 03 	lds	r25, 0x0333
 744:	af 01       	movw	r20, r30
 746:	0e 94 d6 03 	call	0x7ac	; 0x7ac <vfprintf>
 74a:	df 91       	pop	r29
 74c:	cf 91       	pop	r28
 74e:	08 95       	ret

00000750 <puts>:
 750:	0f 93       	push	r16
 752:	1f 93       	push	r17
 754:	cf 93       	push	r28
 756:	df 93       	push	r29
 758:	8c 01       	movw	r16, r24
 75a:	e0 91 32 03 	lds	r30, 0x0332
 75e:	f0 91 33 03 	lds	r31, 0x0333
 762:	83 81       	ldd	r24, Z+3	; 0x03
 764:	81 ff       	sbrs	r24, 1
 766:	1a c0       	rjmp	.+52     	; 0x79c <puts+0x4c>
 768:	c0 e0       	ldi	r28, 0x00	; 0
 76a:	d0 e0       	ldi	r29, 0x00	; 0
 76c:	05 c0       	rjmp	.+10     	; 0x778 <puts+0x28>
 76e:	19 95       	eicall
 770:	00 97       	sbiw	r24, 0x00	; 0
 772:	11 f0       	breq	.+4      	; 0x778 <puts+0x28>
 774:	cf ef       	ldi	r28, 0xFF	; 255
 776:	df ef       	ldi	r29, 0xFF	; 255
 778:	f8 01       	movw	r30, r16
 77a:	81 91       	ld	r24, Z+
 77c:	8f 01       	movw	r16, r30
 77e:	60 91 32 03 	lds	r22, 0x0332
 782:	70 91 33 03 	lds	r23, 0x0333
 786:	db 01       	movw	r26, r22
 788:	18 96       	adiw	r26, 0x08	; 8
 78a:	ed 91       	ld	r30, X+
 78c:	fc 91       	ld	r31, X
 78e:	19 97       	sbiw	r26, 0x09	; 9
 790:	88 23       	and	r24, r24
 792:	69 f7       	brne	.-38     	; 0x76e <puts+0x1e>
 794:	8a e0       	ldi	r24, 0x0A	; 10
 796:	19 95       	eicall
 798:	00 97       	sbiw	r24, 0x00	; 0
 79a:	11 f0       	breq	.+4      	; 0x7a0 <puts+0x50>
 79c:	cf ef       	ldi	r28, 0xFF	; 255
 79e:	df ef       	ldi	r29, 0xFF	; 255
 7a0:	ce 01       	movw	r24, r28
 7a2:	df 91       	pop	r29
 7a4:	cf 91       	pop	r28
 7a6:	1f 91       	pop	r17
 7a8:	0f 91       	pop	r16
 7aa:	08 95       	ret

000007ac <vfprintf>:
 7ac:	2f 92       	push	r2
 7ae:	3f 92       	push	r3
 7b0:	4f 92       	push	r4
 7b2:	5f 92       	push	r5
 7b4:	6f 92       	push	r6
 7b6:	7f 92       	push	r7
 7b8:	8f 92       	push	r8
 7ba:	9f 92       	push	r9
 7bc:	af 92       	push	r10
 7be:	bf 92       	push	r11
 7c0:	cf 92       	push	r12
 7c2:	df 92       	push	r13
 7c4:	ef 92       	push	r14
 7c6:	ff 92       	push	r15
 7c8:	0f 93       	push	r16
 7ca:	1f 93       	push	r17
 7cc:	cf 93       	push	r28
 7ce:	df 93       	push	r29
 7d0:	cd b7       	in	r28, 0x3d	; 61
 7d2:	de b7       	in	r29, 0x3e	; 62
 7d4:	2d 97       	sbiw	r28, 0x0d	; 13
 7d6:	0f b6       	in	r0, 0x3f	; 63
 7d8:	f8 94       	cli
 7da:	de bf       	out	0x3e, r29	; 62
 7dc:	0f be       	out	0x3f, r0	; 63
 7de:	cd bf       	out	0x3d, r28	; 61
 7e0:	3c 01       	movw	r6, r24
 7e2:	7d 87       	std	Y+13, r23	; 0x0d
 7e4:	6c 87       	std	Y+12, r22	; 0x0c
 7e6:	5a 01       	movw	r10, r20
 7e8:	fc 01       	movw	r30, r24
 7ea:	17 82       	std	Z+7, r1	; 0x07
 7ec:	16 82       	std	Z+6, r1	; 0x06
 7ee:	83 81       	ldd	r24, Z+3	; 0x03
 7f0:	81 ff       	sbrs	r24, 1
 7f2:	c8 c1       	rjmp	.+912    	; 0xb84 <vfprintf+0x3d8>
 7f4:	2e 01       	movw	r4, r28
 7f6:	08 94       	sec
 7f8:	41 1c       	adc	r4, r1
 7fa:	51 1c       	adc	r5, r1
 7fc:	f3 01       	movw	r30, r6
 7fe:	93 81       	ldd	r25, Z+3	; 0x03
 800:	ec 85       	ldd	r30, Y+12	; 0x0c
 802:	fd 85       	ldd	r31, Y+13	; 0x0d
 804:	93 fd       	sbrc	r25, 3
 806:	85 91       	lpm	r24, Z+
 808:	93 ff       	sbrs	r25, 3
 80a:	81 91       	ld	r24, Z+
 80c:	fd 87       	std	Y+13, r31	; 0x0d
 80e:	ec 87       	std	Y+12, r30	; 0x0c
 810:	88 23       	and	r24, r24
 812:	09 f4       	brne	.+2      	; 0x816 <vfprintf+0x6a>
 814:	b3 c1       	rjmp	.+870    	; 0xb7c <vfprintf+0x3d0>
 816:	85 32       	cpi	r24, 0x25	; 37
 818:	41 f4       	brne	.+16     	; 0x82a <vfprintf+0x7e>
 81a:	93 fd       	sbrc	r25, 3
 81c:	85 91       	lpm	r24, Z+
 81e:	93 ff       	sbrs	r25, 3
 820:	81 91       	ld	r24, Z+
 822:	fd 87       	std	Y+13, r31	; 0x0d
 824:	ec 87       	std	Y+12, r30	; 0x0c
 826:	85 32       	cpi	r24, 0x25	; 37
 828:	29 f4       	brne	.+10     	; 0x834 <vfprintf+0x88>
 82a:	90 e0       	ldi	r25, 0x00	; 0
 82c:	b3 01       	movw	r22, r6
 82e:	0e 94 33 06 	call	0xc66	; 0xc66 <fputc>
 832:	e4 cf       	rjmp	.-56     	; 0x7fc <vfprintf+0x50>
 834:	ff 24       	eor	r15, r15
 836:	ee 24       	eor	r14, r14
 838:	10 e0       	ldi	r17, 0x00	; 0
 83a:	10 32       	cpi	r17, 0x20	; 32
 83c:	b0 f4       	brcc	.+44     	; 0x86a <vfprintf+0xbe>
 83e:	8b 32       	cpi	r24, 0x2B	; 43
 840:	69 f0       	breq	.+26     	; 0x85c <vfprintf+0xb0>
 842:	8c 32       	cpi	r24, 0x2C	; 44
 844:	28 f4       	brcc	.+10     	; 0x850 <vfprintf+0xa4>
 846:	80 32       	cpi	r24, 0x20	; 32
 848:	51 f0       	breq	.+20     	; 0x85e <vfprintf+0xb2>
 84a:	83 32       	cpi	r24, 0x23	; 35
 84c:	71 f4       	brne	.+28     	; 0x86a <vfprintf+0xbe>
 84e:	0b c0       	rjmp	.+22     	; 0x866 <vfprintf+0xba>
 850:	8d 32       	cpi	r24, 0x2D	; 45
 852:	39 f0       	breq	.+14     	; 0x862 <vfprintf+0xb6>
 854:	80 33       	cpi	r24, 0x30	; 48
 856:	49 f4       	brne	.+18     	; 0x86a <vfprintf+0xbe>
 858:	11 60       	ori	r17, 0x01	; 1
 85a:	2c c0       	rjmp	.+88     	; 0x8b4 <vfprintf+0x108>
 85c:	12 60       	ori	r17, 0x02	; 2
 85e:	14 60       	ori	r17, 0x04	; 4
 860:	29 c0       	rjmp	.+82     	; 0x8b4 <vfprintf+0x108>
 862:	18 60       	ori	r17, 0x08	; 8
 864:	27 c0       	rjmp	.+78     	; 0x8b4 <vfprintf+0x108>
 866:	10 61       	ori	r17, 0x10	; 16
 868:	25 c0       	rjmp	.+74     	; 0x8b4 <vfprintf+0x108>
 86a:	17 fd       	sbrc	r17, 7
 86c:	2e c0       	rjmp	.+92     	; 0x8ca <vfprintf+0x11e>
 86e:	28 2f       	mov	r18, r24
 870:	20 53       	subi	r18, 0x30	; 48
 872:	2a 30       	cpi	r18, 0x0A	; 10
 874:	98 f4       	brcc	.+38     	; 0x89c <vfprintf+0xf0>
 876:	16 ff       	sbrs	r17, 6
 878:	08 c0       	rjmp	.+16     	; 0x88a <vfprintf+0xde>
 87a:	8f 2d       	mov	r24, r15
 87c:	88 0f       	add	r24, r24
 87e:	f8 2e       	mov	r15, r24
 880:	ff 0c       	add	r15, r15
 882:	ff 0c       	add	r15, r15
 884:	f8 0e       	add	r15, r24
 886:	f2 0e       	add	r15, r18
 888:	15 c0       	rjmp	.+42     	; 0x8b4 <vfprintf+0x108>
 88a:	8e 2d       	mov	r24, r14
 88c:	88 0f       	add	r24, r24
 88e:	e8 2e       	mov	r14, r24
 890:	ee 0c       	add	r14, r14
 892:	ee 0c       	add	r14, r14
 894:	e8 0e       	add	r14, r24
 896:	e2 0e       	add	r14, r18
 898:	10 62       	ori	r17, 0x20	; 32
 89a:	0c c0       	rjmp	.+24     	; 0x8b4 <vfprintf+0x108>
 89c:	8e 32       	cpi	r24, 0x2E	; 46
 89e:	21 f4       	brne	.+8      	; 0x8a8 <vfprintf+0xfc>
 8a0:	16 fd       	sbrc	r17, 6
 8a2:	6c c1       	rjmp	.+728    	; 0xb7c <vfprintf+0x3d0>
 8a4:	10 64       	ori	r17, 0x40	; 64
 8a6:	06 c0       	rjmp	.+12     	; 0x8b4 <vfprintf+0x108>
 8a8:	8c 36       	cpi	r24, 0x6C	; 108
 8aa:	11 f4       	brne	.+4      	; 0x8b0 <vfprintf+0x104>
 8ac:	10 68       	ori	r17, 0x80	; 128
 8ae:	02 c0       	rjmp	.+4      	; 0x8b4 <vfprintf+0x108>
 8b0:	88 36       	cpi	r24, 0x68	; 104
 8b2:	59 f4       	brne	.+22     	; 0x8ca <vfprintf+0x11e>
 8b4:	ec 85       	ldd	r30, Y+12	; 0x0c
 8b6:	fd 85       	ldd	r31, Y+13	; 0x0d
 8b8:	93 fd       	sbrc	r25, 3
 8ba:	85 91       	lpm	r24, Z+
 8bc:	93 ff       	sbrs	r25, 3
 8be:	81 91       	ld	r24, Z+
 8c0:	fd 87       	std	Y+13, r31	; 0x0d
 8c2:	ec 87       	std	Y+12, r30	; 0x0c
 8c4:	88 23       	and	r24, r24
 8c6:	09 f0       	breq	.+2      	; 0x8ca <vfprintf+0x11e>
 8c8:	b8 cf       	rjmp	.-144    	; 0x83a <vfprintf+0x8e>
 8ca:	98 2f       	mov	r25, r24
 8cc:	95 54       	subi	r25, 0x45	; 69
 8ce:	93 30       	cpi	r25, 0x03	; 3
 8d0:	18 f0       	brcs	.+6      	; 0x8d8 <vfprintf+0x12c>
 8d2:	90 52       	subi	r25, 0x20	; 32
 8d4:	93 30       	cpi	r25, 0x03	; 3
 8d6:	38 f4       	brcc	.+14     	; 0x8e6 <vfprintf+0x13a>
 8d8:	24 e0       	ldi	r18, 0x04	; 4
 8da:	30 e0       	ldi	r19, 0x00	; 0
 8dc:	a2 0e       	add	r10, r18
 8de:	b3 1e       	adc	r11, r19
 8e0:	3f e3       	ldi	r19, 0x3F	; 63
 8e2:	39 83       	std	Y+1, r19	; 0x01
 8e4:	0f c0       	rjmp	.+30     	; 0x904 <vfprintf+0x158>
 8e6:	83 36       	cpi	r24, 0x63	; 99
 8e8:	31 f0       	breq	.+12     	; 0x8f6 <vfprintf+0x14a>
 8ea:	83 37       	cpi	r24, 0x73	; 115
 8ec:	81 f0       	breq	.+32     	; 0x90e <vfprintf+0x162>
 8ee:	83 35       	cpi	r24, 0x53	; 83
 8f0:	09 f0       	breq	.+2      	; 0x8f4 <vfprintf+0x148>
 8f2:	5a c0       	rjmp	.+180    	; 0x9a8 <vfprintf+0x1fc>
 8f4:	22 c0       	rjmp	.+68     	; 0x93a <vfprintf+0x18e>
 8f6:	f5 01       	movw	r30, r10
 8f8:	80 81       	ld	r24, Z
 8fa:	89 83       	std	Y+1, r24	; 0x01
 8fc:	22 e0       	ldi	r18, 0x02	; 2
 8fe:	30 e0       	ldi	r19, 0x00	; 0
 900:	a2 0e       	add	r10, r18
 902:	b3 1e       	adc	r11, r19
 904:	21 e0       	ldi	r18, 0x01	; 1
 906:	c2 2e       	mov	r12, r18
 908:	d1 2c       	mov	r13, r1
 90a:	42 01       	movw	r8, r4
 90c:	14 c0       	rjmp	.+40     	; 0x936 <vfprintf+0x18a>
 90e:	92 e0       	ldi	r25, 0x02	; 2
 910:	29 2e       	mov	r2, r25
 912:	31 2c       	mov	r3, r1
 914:	2a 0c       	add	r2, r10
 916:	3b 1c       	adc	r3, r11
 918:	f5 01       	movw	r30, r10
 91a:	80 80       	ld	r8, Z
 91c:	91 80       	ldd	r9, Z+1	; 0x01
 91e:	16 ff       	sbrs	r17, 6
 920:	03 c0       	rjmp	.+6      	; 0x928 <vfprintf+0x17c>
 922:	6f 2d       	mov	r22, r15
 924:	70 e0       	ldi	r23, 0x00	; 0
 926:	02 c0       	rjmp	.+4      	; 0x92c <vfprintf+0x180>
 928:	6f ef       	ldi	r22, 0xFF	; 255
 92a:	7f ef       	ldi	r23, 0xFF	; 255
 92c:	c4 01       	movw	r24, r8
 92e:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <strnlen>
 932:	6c 01       	movw	r12, r24
 934:	51 01       	movw	r10, r2
 936:	1f 77       	andi	r17, 0x7F	; 127
 938:	15 c0       	rjmp	.+42     	; 0x964 <vfprintf+0x1b8>
 93a:	82 e0       	ldi	r24, 0x02	; 2
 93c:	28 2e       	mov	r2, r24
 93e:	31 2c       	mov	r3, r1
 940:	2a 0c       	add	r2, r10
 942:	3b 1c       	adc	r3, r11
 944:	f5 01       	movw	r30, r10
 946:	80 80       	ld	r8, Z
 948:	91 80       	ldd	r9, Z+1	; 0x01
 94a:	16 ff       	sbrs	r17, 6
 94c:	03 c0       	rjmp	.+6      	; 0x954 <vfprintf+0x1a8>
 94e:	6f 2d       	mov	r22, r15
 950:	70 e0       	ldi	r23, 0x00	; 0
 952:	02 c0       	rjmp	.+4      	; 0x958 <vfprintf+0x1ac>
 954:	6f ef       	ldi	r22, 0xFF	; 255
 956:	7f ef       	ldi	r23, 0xFF	; 255
 958:	c4 01       	movw	r24, r8
 95a:	0e 94 dd 05 	call	0xbba	; 0xbba <strnlen_P>
 95e:	6c 01       	movw	r12, r24
 960:	10 68       	ori	r17, 0x80	; 128
 962:	51 01       	movw	r10, r2
 964:	13 fd       	sbrc	r17, 3
 966:	1c c0       	rjmp	.+56     	; 0x9a0 <vfprintf+0x1f4>
 968:	06 c0       	rjmp	.+12     	; 0x976 <vfprintf+0x1ca>
 96a:	80 e2       	ldi	r24, 0x20	; 32
 96c:	90 e0       	ldi	r25, 0x00	; 0
 96e:	b3 01       	movw	r22, r6
 970:	0e 94 33 06 	call	0xc66	; 0xc66 <fputc>
 974:	ea 94       	dec	r14
 976:	8e 2d       	mov	r24, r14
 978:	90 e0       	ldi	r25, 0x00	; 0
 97a:	c8 16       	cp	r12, r24
 97c:	d9 06       	cpc	r13, r25
 97e:	a8 f3       	brcs	.-22     	; 0x96a <vfprintf+0x1be>
 980:	0f c0       	rjmp	.+30     	; 0x9a0 <vfprintf+0x1f4>
 982:	f4 01       	movw	r30, r8
 984:	17 fd       	sbrc	r17, 7
 986:	85 91       	lpm	r24, Z+
 988:	17 ff       	sbrs	r17, 7
 98a:	81 91       	ld	r24, Z+
 98c:	4f 01       	movw	r8, r30
 98e:	90 e0       	ldi	r25, 0x00	; 0
 990:	b3 01       	movw	r22, r6
 992:	0e 94 33 06 	call	0xc66	; 0xc66 <fputc>
 996:	e1 10       	cpse	r14, r1
 998:	ea 94       	dec	r14
 99a:	08 94       	sec
 99c:	c1 08       	sbc	r12, r1
 99e:	d1 08       	sbc	r13, r1
 9a0:	c1 14       	cp	r12, r1
 9a2:	d1 04       	cpc	r13, r1
 9a4:	71 f7       	brne	.-36     	; 0x982 <vfprintf+0x1d6>
 9a6:	e7 c0       	rjmp	.+462    	; 0xb76 <vfprintf+0x3ca>
 9a8:	84 36       	cpi	r24, 0x64	; 100
 9aa:	11 f0       	breq	.+4      	; 0x9b0 <vfprintf+0x204>
 9ac:	89 36       	cpi	r24, 0x69	; 105
 9ae:	51 f5       	brne	.+84     	; 0xa04 <vfprintf+0x258>
 9b0:	f5 01       	movw	r30, r10
 9b2:	17 ff       	sbrs	r17, 7
 9b4:	07 c0       	rjmp	.+14     	; 0x9c4 <vfprintf+0x218>
 9b6:	80 81       	ld	r24, Z
 9b8:	91 81       	ldd	r25, Z+1	; 0x01
 9ba:	a2 81       	ldd	r26, Z+2	; 0x02
 9bc:	b3 81       	ldd	r27, Z+3	; 0x03
 9be:	24 e0       	ldi	r18, 0x04	; 4
 9c0:	30 e0       	ldi	r19, 0x00	; 0
 9c2:	08 c0       	rjmp	.+16     	; 0x9d4 <vfprintf+0x228>
 9c4:	80 81       	ld	r24, Z
 9c6:	91 81       	ldd	r25, Z+1	; 0x01
 9c8:	aa 27       	eor	r26, r26
 9ca:	97 fd       	sbrc	r25, 7
 9cc:	a0 95       	com	r26
 9ce:	ba 2f       	mov	r27, r26
 9d0:	22 e0       	ldi	r18, 0x02	; 2
 9d2:	30 e0       	ldi	r19, 0x00	; 0
 9d4:	a2 0e       	add	r10, r18
 9d6:	b3 1e       	adc	r11, r19
 9d8:	01 2f       	mov	r16, r17
 9da:	0f 76       	andi	r16, 0x6F	; 111
 9dc:	b7 ff       	sbrs	r27, 7
 9de:	08 c0       	rjmp	.+16     	; 0x9f0 <vfprintf+0x244>
 9e0:	b0 95       	com	r27
 9e2:	a0 95       	com	r26
 9e4:	90 95       	com	r25
 9e6:	81 95       	neg	r24
 9e8:	9f 4f       	sbci	r25, 0xFF	; 255
 9ea:	af 4f       	sbci	r26, 0xFF	; 255
 9ec:	bf 4f       	sbci	r27, 0xFF	; 255
 9ee:	00 68       	ori	r16, 0x80	; 128
 9f0:	bc 01       	movw	r22, r24
 9f2:	cd 01       	movw	r24, r26
 9f4:	a2 01       	movw	r20, r4
 9f6:	2a e0       	ldi	r18, 0x0A	; 10
 9f8:	30 e0       	ldi	r19, 0x00	; 0
 9fa:	0e 94 5f 06 	call	0xcbe	; 0xcbe <__ultoa_invert>
 9fe:	d8 2e       	mov	r13, r24
 a00:	d4 18       	sub	r13, r4
 a02:	3f c0       	rjmp	.+126    	; 0xa82 <vfprintf+0x2d6>
 a04:	85 37       	cpi	r24, 0x75	; 117
 a06:	21 f4       	brne	.+8      	; 0xa10 <vfprintf+0x264>
 a08:	1f 7e       	andi	r17, 0xEF	; 239
 a0a:	2a e0       	ldi	r18, 0x0A	; 10
 a0c:	30 e0       	ldi	r19, 0x00	; 0
 a0e:	20 c0       	rjmp	.+64     	; 0xa50 <vfprintf+0x2a4>
 a10:	19 7f       	andi	r17, 0xF9	; 249
 a12:	8f 36       	cpi	r24, 0x6F	; 111
 a14:	a9 f0       	breq	.+42     	; 0xa40 <vfprintf+0x294>
 a16:	80 37       	cpi	r24, 0x70	; 112
 a18:	20 f4       	brcc	.+8      	; 0xa22 <vfprintf+0x276>
 a1a:	88 35       	cpi	r24, 0x58	; 88
 a1c:	09 f0       	breq	.+2      	; 0xa20 <vfprintf+0x274>
 a1e:	ae c0       	rjmp	.+348    	; 0xb7c <vfprintf+0x3d0>
 a20:	0b c0       	rjmp	.+22     	; 0xa38 <vfprintf+0x28c>
 a22:	80 37       	cpi	r24, 0x70	; 112
 a24:	21 f0       	breq	.+8      	; 0xa2e <vfprintf+0x282>
 a26:	88 37       	cpi	r24, 0x78	; 120
 a28:	09 f0       	breq	.+2      	; 0xa2c <vfprintf+0x280>
 a2a:	a8 c0       	rjmp	.+336    	; 0xb7c <vfprintf+0x3d0>
 a2c:	01 c0       	rjmp	.+2      	; 0xa30 <vfprintf+0x284>
 a2e:	10 61       	ori	r17, 0x10	; 16
 a30:	14 ff       	sbrs	r17, 4
 a32:	09 c0       	rjmp	.+18     	; 0xa46 <vfprintf+0x29a>
 a34:	14 60       	ori	r17, 0x04	; 4
 a36:	07 c0       	rjmp	.+14     	; 0xa46 <vfprintf+0x29a>
 a38:	14 ff       	sbrs	r17, 4
 a3a:	08 c0       	rjmp	.+16     	; 0xa4c <vfprintf+0x2a0>
 a3c:	16 60       	ori	r17, 0x06	; 6
 a3e:	06 c0       	rjmp	.+12     	; 0xa4c <vfprintf+0x2a0>
 a40:	28 e0       	ldi	r18, 0x08	; 8
 a42:	30 e0       	ldi	r19, 0x00	; 0
 a44:	05 c0       	rjmp	.+10     	; 0xa50 <vfprintf+0x2a4>
 a46:	20 e1       	ldi	r18, 0x10	; 16
 a48:	30 e0       	ldi	r19, 0x00	; 0
 a4a:	02 c0       	rjmp	.+4      	; 0xa50 <vfprintf+0x2a4>
 a4c:	20 e1       	ldi	r18, 0x10	; 16
 a4e:	32 e0       	ldi	r19, 0x02	; 2
 a50:	f5 01       	movw	r30, r10
 a52:	17 ff       	sbrs	r17, 7
 a54:	07 c0       	rjmp	.+14     	; 0xa64 <vfprintf+0x2b8>
 a56:	60 81       	ld	r22, Z
 a58:	71 81       	ldd	r23, Z+1	; 0x01
 a5a:	82 81       	ldd	r24, Z+2	; 0x02
 a5c:	93 81       	ldd	r25, Z+3	; 0x03
 a5e:	44 e0       	ldi	r20, 0x04	; 4
 a60:	50 e0       	ldi	r21, 0x00	; 0
 a62:	06 c0       	rjmp	.+12     	; 0xa70 <vfprintf+0x2c4>
 a64:	60 81       	ld	r22, Z
 a66:	71 81       	ldd	r23, Z+1	; 0x01
 a68:	80 e0       	ldi	r24, 0x00	; 0
 a6a:	90 e0       	ldi	r25, 0x00	; 0
 a6c:	42 e0       	ldi	r20, 0x02	; 2
 a6e:	50 e0       	ldi	r21, 0x00	; 0
 a70:	a4 0e       	add	r10, r20
 a72:	b5 1e       	adc	r11, r21
 a74:	a2 01       	movw	r20, r4
 a76:	0e 94 5f 06 	call	0xcbe	; 0xcbe <__ultoa_invert>
 a7a:	d8 2e       	mov	r13, r24
 a7c:	d4 18       	sub	r13, r4
 a7e:	01 2f       	mov	r16, r17
 a80:	0f 77       	andi	r16, 0x7F	; 127
 a82:	06 ff       	sbrs	r16, 6
 a84:	09 c0       	rjmp	.+18     	; 0xa98 <vfprintf+0x2ec>
 a86:	0e 7f       	andi	r16, 0xFE	; 254
 a88:	df 14       	cp	r13, r15
 a8a:	30 f4       	brcc	.+12     	; 0xa98 <vfprintf+0x2ec>
 a8c:	04 ff       	sbrs	r16, 4
 a8e:	06 c0       	rjmp	.+12     	; 0xa9c <vfprintf+0x2f0>
 a90:	02 fd       	sbrc	r16, 2
 a92:	04 c0       	rjmp	.+8      	; 0xa9c <vfprintf+0x2f0>
 a94:	0f 7e       	andi	r16, 0xEF	; 239
 a96:	02 c0       	rjmp	.+4      	; 0xa9c <vfprintf+0x2f0>
 a98:	1d 2d       	mov	r17, r13
 a9a:	01 c0       	rjmp	.+2      	; 0xa9e <vfprintf+0x2f2>
 a9c:	1f 2d       	mov	r17, r15
 a9e:	80 2f       	mov	r24, r16
 aa0:	90 e0       	ldi	r25, 0x00	; 0
 aa2:	04 ff       	sbrs	r16, 4
 aa4:	0c c0       	rjmp	.+24     	; 0xabe <vfprintf+0x312>
 aa6:	fe 01       	movw	r30, r28
 aa8:	ed 0d       	add	r30, r13
 aaa:	f1 1d       	adc	r31, r1
 aac:	20 81       	ld	r18, Z
 aae:	20 33       	cpi	r18, 0x30	; 48
 ab0:	11 f4       	brne	.+4      	; 0xab6 <vfprintf+0x30a>
 ab2:	09 7e       	andi	r16, 0xE9	; 233
 ab4:	09 c0       	rjmp	.+18     	; 0xac8 <vfprintf+0x31c>
 ab6:	02 ff       	sbrs	r16, 2
 ab8:	06 c0       	rjmp	.+12     	; 0xac6 <vfprintf+0x31a>
 aba:	1e 5f       	subi	r17, 0xFE	; 254
 abc:	05 c0       	rjmp	.+10     	; 0xac8 <vfprintf+0x31c>
 abe:	86 78       	andi	r24, 0x86	; 134
 ac0:	90 70       	andi	r25, 0x00	; 0
 ac2:	00 97       	sbiw	r24, 0x00	; 0
 ac4:	09 f0       	breq	.+2      	; 0xac8 <vfprintf+0x31c>
 ac6:	1f 5f       	subi	r17, 0xFF	; 255
 ac8:	80 2e       	mov	r8, r16
 aca:	99 24       	eor	r9, r9
 acc:	03 fd       	sbrc	r16, 3
 ace:	12 c0       	rjmp	.+36     	; 0xaf4 <vfprintf+0x348>
 ad0:	00 ff       	sbrs	r16, 0
 ad2:	0d c0       	rjmp	.+26     	; 0xaee <vfprintf+0x342>
 ad4:	fd 2c       	mov	r15, r13
 ad6:	1e 15       	cp	r17, r14
 ad8:	50 f4       	brcc	.+20     	; 0xaee <vfprintf+0x342>
 ada:	fe 0c       	add	r15, r14
 adc:	f1 1a       	sub	r15, r17
 ade:	1e 2d       	mov	r17, r14
 ae0:	06 c0       	rjmp	.+12     	; 0xaee <vfprintf+0x342>
 ae2:	80 e2       	ldi	r24, 0x20	; 32
 ae4:	90 e0       	ldi	r25, 0x00	; 0
 ae6:	b3 01       	movw	r22, r6
 ae8:	0e 94 33 06 	call	0xc66	; 0xc66 <fputc>
 aec:	1f 5f       	subi	r17, 0xFF	; 255
 aee:	1e 15       	cp	r17, r14
 af0:	c0 f3       	brcs	.-16     	; 0xae2 <vfprintf+0x336>
 af2:	04 c0       	rjmp	.+8      	; 0xafc <vfprintf+0x350>
 af4:	1e 15       	cp	r17, r14
 af6:	10 f4       	brcc	.+4      	; 0xafc <vfprintf+0x350>
 af8:	e1 1a       	sub	r14, r17
 afa:	01 c0       	rjmp	.+2      	; 0xafe <vfprintf+0x352>
 afc:	ee 24       	eor	r14, r14
 afe:	84 fe       	sbrs	r8, 4
 b00:	0f c0       	rjmp	.+30     	; 0xb20 <vfprintf+0x374>
 b02:	80 e3       	ldi	r24, 0x30	; 48
 b04:	90 e0       	ldi	r25, 0x00	; 0
 b06:	b3 01       	movw	r22, r6
 b08:	0e 94 33 06 	call	0xc66	; 0xc66 <fputc>
 b0c:	82 fe       	sbrs	r8, 2
 b0e:	1f c0       	rjmp	.+62     	; 0xb4e <vfprintf+0x3a2>
 b10:	81 fe       	sbrs	r8, 1
 b12:	03 c0       	rjmp	.+6      	; 0xb1a <vfprintf+0x36e>
 b14:	88 e5       	ldi	r24, 0x58	; 88
 b16:	90 e0       	ldi	r25, 0x00	; 0
 b18:	10 c0       	rjmp	.+32     	; 0xb3a <vfprintf+0x38e>
 b1a:	88 e7       	ldi	r24, 0x78	; 120
 b1c:	90 e0       	ldi	r25, 0x00	; 0
 b1e:	0d c0       	rjmp	.+26     	; 0xb3a <vfprintf+0x38e>
 b20:	c4 01       	movw	r24, r8
 b22:	86 78       	andi	r24, 0x86	; 134
 b24:	90 70       	andi	r25, 0x00	; 0
 b26:	00 97       	sbiw	r24, 0x00	; 0
 b28:	91 f0       	breq	.+36     	; 0xb4e <vfprintf+0x3a2>
 b2a:	81 fc       	sbrc	r8, 1
 b2c:	02 c0       	rjmp	.+4      	; 0xb32 <vfprintf+0x386>
 b2e:	80 e2       	ldi	r24, 0x20	; 32
 b30:	01 c0       	rjmp	.+2      	; 0xb34 <vfprintf+0x388>
 b32:	8b e2       	ldi	r24, 0x2B	; 43
 b34:	07 fd       	sbrc	r16, 7
 b36:	8d e2       	ldi	r24, 0x2D	; 45
 b38:	90 e0       	ldi	r25, 0x00	; 0
 b3a:	b3 01       	movw	r22, r6
 b3c:	0e 94 33 06 	call	0xc66	; 0xc66 <fputc>
 b40:	06 c0       	rjmp	.+12     	; 0xb4e <vfprintf+0x3a2>
 b42:	80 e3       	ldi	r24, 0x30	; 48
 b44:	90 e0       	ldi	r25, 0x00	; 0
 b46:	b3 01       	movw	r22, r6
 b48:	0e 94 33 06 	call	0xc66	; 0xc66 <fputc>
 b4c:	fa 94       	dec	r15
 b4e:	df 14       	cp	r13, r15
 b50:	c0 f3       	brcs	.-16     	; 0xb42 <vfprintf+0x396>
 b52:	da 94       	dec	r13
 b54:	f2 01       	movw	r30, r4
 b56:	ed 0d       	add	r30, r13
 b58:	f1 1d       	adc	r31, r1
 b5a:	80 81       	ld	r24, Z
 b5c:	90 e0       	ldi	r25, 0x00	; 0
 b5e:	b3 01       	movw	r22, r6
 b60:	0e 94 33 06 	call	0xc66	; 0xc66 <fputc>
 b64:	dd 20       	and	r13, r13
 b66:	a9 f7       	brne	.-22     	; 0xb52 <vfprintf+0x3a6>
 b68:	06 c0       	rjmp	.+12     	; 0xb76 <vfprintf+0x3ca>
 b6a:	80 e2       	ldi	r24, 0x20	; 32
 b6c:	90 e0       	ldi	r25, 0x00	; 0
 b6e:	b3 01       	movw	r22, r6
 b70:	0e 94 33 06 	call	0xc66	; 0xc66 <fputc>
 b74:	ea 94       	dec	r14
 b76:	ee 20       	and	r14, r14
 b78:	c1 f7       	brne	.-16     	; 0xb6a <vfprintf+0x3be>
 b7a:	40 ce       	rjmp	.-896    	; 0x7fc <vfprintf+0x50>
 b7c:	f3 01       	movw	r30, r6
 b7e:	86 81       	ldd	r24, Z+6	; 0x06
 b80:	97 81       	ldd	r25, Z+7	; 0x07
 b82:	02 c0       	rjmp	.+4      	; 0xb88 <vfprintf+0x3dc>
 b84:	8f ef       	ldi	r24, 0xFF	; 255
 b86:	9f ef       	ldi	r25, 0xFF	; 255
 b88:	2d 96       	adiw	r28, 0x0d	; 13
 b8a:	0f b6       	in	r0, 0x3f	; 63
 b8c:	f8 94       	cli
 b8e:	de bf       	out	0x3e, r29	; 62
 b90:	0f be       	out	0x3f, r0	; 63
 b92:	cd bf       	out	0x3d, r28	; 61
 b94:	df 91       	pop	r29
 b96:	cf 91       	pop	r28
 b98:	1f 91       	pop	r17
 b9a:	0f 91       	pop	r16
 b9c:	ff 90       	pop	r15
 b9e:	ef 90       	pop	r14
 ba0:	df 90       	pop	r13
 ba2:	cf 90       	pop	r12
 ba4:	bf 90       	pop	r11
 ba6:	af 90       	pop	r10
 ba8:	9f 90       	pop	r9
 baa:	8f 90       	pop	r8
 bac:	7f 90       	pop	r7
 bae:	6f 90       	pop	r6
 bb0:	5f 90       	pop	r5
 bb2:	4f 90       	pop	r4
 bb4:	3f 90       	pop	r3
 bb6:	2f 90       	pop	r2
 bb8:	08 95       	ret

00000bba <strnlen_P>:
 bba:	fc 01       	movw	r30, r24
 bbc:	05 90       	lpm	r0, Z+
 bbe:	61 50       	subi	r22, 0x01	; 1
 bc0:	70 40       	sbci	r23, 0x00	; 0
 bc2:	01 10       	cpse	r0, r1
 bc4:	d8 f7       	brcc	.-10     	; 0xbbc <strnlen_P+0x2>
 bc6:	80 95       	com	r24
 bc8:	90 95       	com	r25
 bca:	8e 0f       	add	r24, r30
 bcc:	9f 1f       	adc	r25, r31
 bce:	08 95       	ret

00000bd0 <strnlen>:
 bd0:	fc 01       	movw	r30, r24
 bd2:	61 50       	subi	r22, 0x01	; 1
 bd4:	70 40       	sbci	r23, 0x00	; 0
 bd6:	01 90       	ld	r0, Z+
 bd8:	01 10       	cpse	r0, r1
 bda:	d8 f7       	brcc	.-10     	; 0xbd2 <strnlen+0x2>
 bdc:	80 95       	com	r24
 bde:	90 95       	com	r25
 be0:	8e 0f       	add	r24, r30
 be2:	9f 1f       	adc	r25, r31
 be4:	08 95       	ret

00000be6 <fgetc>:
 be6:	cf 93       	push	r28
 be8:	df 93       	push	r29
 bea:	ec 01       	movw	r28, r24
 bec:	2b 81       	ldd	r18, Y+3	; 0x03
 bee:	20 ff       	sbrs	r18, 0
 bf0:	35 c0       	rjmp	.+106    	; 0xc5c <fgetc+0x76>
 bf2:	26 ff       	sbrs	r18, 6
 bf4:	09 c0       	rjmp	.+18     	; 0xc08 <fgetc+0x22>
 bf6:	2f 7b       	andi	r18, 0xBF	; 191
 bf8:	2b 83       	std	Y+3, r18	; 0x03
 bfa:	8e 81       	ldd	r24, Y+6	; 0x06
 bfc:	9f 81       	ldd	r25, Y+7	; 0x07
 bfe:	01 96       	adiw	r24, 0x01	; 1
 c00:	9f 83       	std	Y+7, r25	; 0x07
 c02:	8e 83       	std	Y+6, r24	; 0x06
 c04:	8a 81       	ldd	r24, Y+2	; 0x02
 c06:	28 c0       	rjmp	.+80     	; 0xc58 <fgetc+0x72>
 c08:	22 ff       	sbrs	r18, 2
 c0a:	0f c0       	rjmp	.+30     	; 0xc2a <fgetc+0x44>
 c0c:	e8 81       	ld	r30, Y
 c0e:	f9 81       	ldd	r31, Y+1	; 0x01
 c10:	80 81       	ld	r24, Z
 c12:	99 27       	eor	r25, r25
 c14:	87 fd       	sbrc	r24, 7
 c16:	90 95       	com	r25
 c18:	00 97       	sbiw	r24, 0x00	; 0
 c1a:	19 f4       	brne	.+6      	; 0xc22 <fgetc+0x3c>
 c1c:	20 62       	ori	r18, 0x20	; 32
 c1e:	2b 83       	std	Y+3, r18	; 0x03
 c20:	1d c0       	rjmp	.+58     	; 0xc5c <fgetc+0x76>
 c22:	31 96       	adiw	r30, 0x01	; 1
 c24:	f9 83       	std	Y+1, r31	; 0x01
 c26:	e8 83       	st	Y, r30
 c28:	11 c0       	rjmp	.+34     	; 0xc4c <fgetc+0x66>
 c2a:	ea 85       	ldd	r30, Y+10	; 0x0a
 c2c:	fb 85       	ldd	r31, Y+11	; 0x0b
 c2e:	ce 01       	movw	r24, r28
 c30:	19 95       	eicall
 c32:	97 ff       	sbrs	r25, 7
 c34:	0b c0       	rjmp	.+22     	; 0xc4c <fgetc+0x66>
 c36:	2b 81       	ldd	r18, Y+3	; 0x03
 c38:	3f ef       	ldi	r19, 0xFF	; 255
 c3a:	8f 3f       	cpi	r24, 0xFF	; 255
 c3c:	93 07       	cpc	r25, r19
 c3e:	11 f4       	brne	.+4      	; 0xc44 <fgetc+0x5e>
 c40:	80 e1       	ldi	r24, 0x10	; 16
 c42:	01 c0       	rjmp	.+2      	; 0xc46 <fgetc+0x60>
 c44:	80 e2       	ldi	r24, 0x20	; 32
 c46:	82 2b       	or	r24, r18
 c48:	8b 83       	std	Y+3, r24	; 0x03
 c4a:	08 c0       	rjmp	.+16     	; 0xc5c <fgetc+0x76>
 c4c:	2e 81       	ldd	r18, Y+6	; 0x06
 c4e:	3f 81       	ldd	r19, Y+7	; 0x07
 c50:	2f 5f       	subi	r18, 0xFF	; 255
 c52:	3f 4f       	sbci	r19, 0xFF	; 255
 c54:	3f 83       	std	Y+7, r19	; 0x07
 c56:	2e 83       	std	Y+6, r18	; 0x06
 c58:	90 e0       	ldi	r25, 0x00	; 0
 c5a:	02 c0       	rjmp	.+4      	; 0xc60 <fgetc+0x7a>
 c5c:	8f ef       	ldi	r24, 0xFF	; 255
 c5e:	9f ef       	ldi	r25, 0xFF	; 255
 c60:	df 91       	pop	r29
 c62:	cf 91       	pop	r28
 c64:	08 95       	ret

00000c66 <fputc>:
 c66:	0f 93       	push	r16
 c68:	1f 93       	push	r17
 c6a:	cf 93       	push	r28
 c6c:	df 93       	push	r29
 c6e:	8c 01       	movw	r16, r24
 c70:	eb 01       	movw	r28, r22
 c72:	8b 81       	ldd	r24, Y+3	; 0x03
 c74:	81 ff       	sbrs	r24, 1
 c76:	1b c0       	rjmp	.+54     	; 0xcae <fputc+0x48>
 c78:	82 ff       	sbrs	r24, 2
 c7a:	0d c0       	rjmp	.+26     	; 0xc96 <fputc+0x30>
 c7c:	2e 81       	ldd	r18, Y+6	; 0x06
 c7e:	3f 81       	ldd	r19, Y+7	; 0x07
 c80:	8c 81       	ldd	r24, Y+4	; 0x04
 c82:	9d 81       	ldd	r25, Y+5	; 0x05
 c84:	28 17       	cp	r18, r24
 c86:	39 07       	cpc	r19, r25
 c88:	64 f4       	brge	.+24     	; 0xca2 <fputc+0x3c>
 c8a:	e8 81       	ld	r30, Y
 c8c:	f9 81       	ldd	r31, Y+1	; 0x01
 c8e:	01 93       	st	Z+, r16
 c90:	f9 83       	std	Y+1, r31	; 0x01
 c92:	e8 83       	st	Y, r30
 c94:	06 c0       	rjmp	.+12     	; 0xca2 <fputc+0x3c>
 c96:	e8 85       	ldd	r30, Y+8	; 0x08
 c98:	f9 85       	ldd	r31, Y+9	; 0x09
 c9a:	80 2f       	mov	r24, r16
 c9c:	19 95       	eicall
 c9e:	00 97       	sbiw	r24, 0x00	; 0
 ca0:	31 f4       	brne	.+12     	; 0xcae <fputc+0x48>
 ca2:	8e 81       	ldd	r24, Y+6	; 0x06
 ca4:	9f 81       	ldd	r25, Y+7	; 0x07
 ca6:	01 96       	adiw	r24, 0x01	; 1
 ca8:	9f 83       	std	Y+7, r25	; 0x07
 caa:	8e 83       	std	Y+6, r24	; 0x06
 cac:	02 c0       	rjmp	.+4      	; 0xcb2 <fputc+0x4c>
 cae:	0f ef       	ldi	r16, 0xFF	; 255
 cb0:	1f ef       	ldi	r17, 0xFF	; 255
 cb2:	c8 01       	movw	r24, r16
 cb4:	df 91       	pop	r29
 cb6:	cf 91       	pop	r28
 cb8:	1f 91       	pop	r17
 cba:	0f 91       	pop	r16
 cbc:	08 95       	ret

00000cbe <__ultoa_invert>:
 cbe:	fa 01       	movw	r30, r20
 cc0:	aa 27       	eor	r26, r26
 cc2:	28 30       	cpi	r18, 0x08	; 8
 cc4:	51 f1       	breq	.+84     	; 0xd1a <__ultoa_invert+0x5c>
 cc6:	20 31       	cpi	r18, 0x10	; 16
 cc8:	81 f1       	breq	.+96     	; 0xd2a <__ultoa_invert+0x6c>
 cca:	e8 94       	clt
 ccc:	6f 93       	push	r22
 cce:	6e 7f       	andi	r22, 0xFE	; 254
 cd0:	6e 5f       	subi	r22, 0xFE	; 254
 cd2:	7f 4f       	sbci	r23, 0xFF	; 255
 cd4:	8f 4f       	sbci	r24, 0xFF	; 255
 cd6:	9f 4f       	sbci	r25, 0xFF	; 255
 cd8:	af 4f       	sbci	r26, 0xFF	; 255
 cda:	b1 e0       	ldi	r27, 0x01	; 1
 cdc:	3e d0       	rcall	.+124    	; 0xd5a <__ultoa_invert+0x9c>
 cde:	b4 e0       	ldi	r27, 0x04	; 4
 ce0:	3c d0       	rcall	.+120    	; 0xd5a <__ultoa_invert+0x9c>
 ce2:	67 0f       	add	r22, r23
 ce4:	78 1f       	adc	r23, r24
 ce6:	89 1f       	adc	r24, r25
 ce8:	9a 1f       	adc	r25, r26
 cea:	a1 1d       	adc	r26, r1
 cec:	68 0f       	add	r22, r24
 cee:	79 1f       	adc	r23, r25
 cf0:	8a 1f       	adc	r24, r26
 cf2:	91 1d       	adc	r25, r1
 cf4:	a1 1d       	adc	r26, r1
 cf6:	6a 0f       	add	r22, r26
 cf8:	71 1d       	adc	r23, r1
 cfa:	81 1d       	adc	r24, r1
 cfc:	91 1d       	adc	r25, r1
 cfe:	a1 1d       	adc	r26, r1
 d00:	20 d0       	rcall	.+64     	; 0xd42 <__ultoa_invert+0x84>
 d02:	09 f4       	brne	.+2      	; 0xd06 <__ultoa_invert+0x48>
 d04:	68 94       	set
 d06:	3f 91       	pop	r19
 d08:	2a e0       	ldi	r18, 0x0A	; 10
 d0a:	26 9f       	mul	r18, r22
 d0c:	11 24       	eor	r1, r1
 d0e:	30 19       	sub	r19, r0
 d10:	30 5d       	subi	r19, 0xD0	; 208
 d12:	31 93       	st	Z+, r19
 d14:	de f6       	brtc	.-74     	; 0xccc <__ultoa_invert+0xe>
 d16:	cf 01       	movw	r24, r30
 d18:	08 95       	ret
 d1a:	46 2f       	mov	r20, r22
 d1c:	47 70       	andi	r20, 0x07	; 7
 d1e:	40 5d       	subi	r20, 0xD0	; 208
 d20:	41 93       	st	Z+, r20
 d22:	b3 e0       	ldi	r27, 0x03	; 3
 d24:	0f d0       	rcall	.+30     	; 0xd44 <__ultoa_invert+0x86>
 d26:	c9 f7       	brne	.-14     	; 0xd1a <__ultoa_invert+0x5c>
 d28:	f6 cf       	rjmp	.-20     	; 0xd16 <__ultoa_invert+0x58>
 d2a:	46 2f       	mov	r20, r22
 d2c:	4f 70       	andi	r20, 0x0F	; 15
 d2e:	40 5d       	subi	r20, 0xD0	; 208
 d30:	4a 33       	cpi	r20, 0x3A	; 58
 d32:	18 f0       	brcs	.+6      	; 0xd3a <__ultoa_invert+0x7c>
 d34:	49 5d       	subi	r20, 0xD9	; 217
 d36:	31 fd       	sbrc	r19, 1
 d38:	40 52       	subi	r20, 0x20	; 32
 d3a:	41 93       	st	Z+, r20
 d3c:	02 d0       	rcall	.+4      	; 0xd42 <__ultoa_invert+0x84>
 d3e:	a9 f7       	brne	.-22     	; 0xd2a <__ultoa_invert+0x6c>
 d40:	ea cf       	rjmp	.-44     	; 0xd16 <__ultoa_invert+0x58>
 d42:	b4 e0       	ldi	r27, 0x04	; 4
 d44:	a6 95       	lsr	r26
 d46:	97 95       	ror	r25
 d48:	87 95       	ror	r24
 d4a:	77 95       	ror	r23
 d4c:	67 95       	ror	r22
 d4e:	ba 95       	dec	r27
 d50:	c9 f7       	brne	.-14     	; 0xd44 <__ultoa_invert+0x86>
 d52:	00 97       	sbiw	r24, 0x00	; 0
 d54:	61 05       	cpc	r22, r1
 d56:	71 05       	cpc	r23, r1
 d58:	08 95       	ret
 d5a:	9b 01       	movw	r18, r22
 d5c:	ac 01       	movw	r20, r24
 d5e:	0a 2e       	mov	r0, r26
 d60:	06 94       	lsr	r0
 d62:	57 95       	ror	r21
 d64:	47 95       	ror	r20
 d66:	37 95       	ror	r19
 d68:	27 95       	ror	r18
 d6a:	ba 95       	dec	r27
 d6c:	c9 f7       	brne	.-14     	; 0xd60 <__ultoa_invert+0xa2>
 d6e:	62 0f       	add	r22, r18
 d70:	73 1f       	adc	r23, r19
 d72:	84 1f       	adc	r24, r20
 d74:	95 1f       	adc	r25, r21
 d76:	a0 1d       	adc	r26, r0
 d78:	08 95       	ret

00000d7a <_exit>:
 d7a:	f8 94       	cli

00000d7c <__stop_program>:
 d7c:	ff cf       	rjmp	.-2      	; 0xd7c <__stop_program>
