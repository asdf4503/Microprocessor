
Pjt09_linked_list.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000090  00800200  00001208  0000129c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001208  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000097  00800290  00800290  0000132c  2**0
                  ALLOC
  3 .stab         00001110  00000000  00000000  0000132c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000033b  00000000  00000000  0000243c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000288  00000000  00000000  00002778  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002184  00000000  00000000  00002a00  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001062  00000000  00000000  00004b84  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000012f8  00000000  00000000  00005be6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000584  00000000  00000000  00006ee0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000069f  00000000  00000000  00007464  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001648  00000000  00000000  00007b03  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  0000914b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
       4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
       8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
       c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      10:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      14:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      18:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      1c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      20:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      24:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      28:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      2c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      30:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      34:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      38:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      3c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      40:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      44:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      48:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      4c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      50:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      54:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      58:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      5c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      60:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      64:	0c 94 2c 02 	jmp	0x458	; 0x458 <__vector_25>
      68:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      6c:	0c 94 fd 01 	jmp	0x3fa	; 0x3fa <__vector_27>
      70:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      74:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      78:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      7c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      80:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      84:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      88:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      8c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      90:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      94:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      98:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      9c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      a0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      a4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      a8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      ac:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      b0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      b4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      b8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      bc:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      c0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      c4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      c8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      cc:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      d0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      d4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      d8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      dc:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      e0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	12 e0       	ldi	r17, 0x02	; 2
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	e8 e0       	ldi	r30, 0x08	; 8
      fc:	f2 e1       	ldi	r31, 0x12	; 18
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	a0 39       	cpi	r26, 0x90	; 144
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>
     10e:	1b be       	out	0x3b, r1	; 59

00000110 <__do_clear_bss>:
     110:	13 e0       	ldi	r17, 0x03	; 3
     112:	a0 e9       	ldi	r26, 0x90	; 144
     114:	b2 e0       	ldi	r27, 0x02	; 2
     116:	01 c0       	rjmp	.+2      	; 0x11a <.do_clear_bss_start>

00000118 <.do_clear_bss_loop>:
     118:	1d 92       	st	X+, r1

0000011a <.do_clear_bss_start>:
     11a:	a7 32       	cpi	r26, 0x27	; 39
     11c:	b1 07       	cpc	r27, r17
     11e:	e1 f7       	brne	.-8      	; 0x118 <.do_clear_bss_loop>
     120:	0e 94 97 03 	call	0x72e	; 0x72e <main>
     124:	0c 94 02 09 	jmp	0x1204	; 0x1204 <_exit>

00000128 <__bad_interrupt>:
     128:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012c <is_prime>:
#include <avr/io.h>
#include <stdio.h>
#include <compat/deprecated.h>
#include "prime.h"

int is_prime(int n) {
     12c:	cf 93       	push	r28
     12e:	df 93       	push	r29
     130:	fc 01       	movw	r30, r24
	int i;
	for(i = 2;i <= n/2;i++)
     132:	62 e0       	ldi	r22, 0x02	; 2
     134:	70 e0       	ldi	r23, 0x00	; 0
     136:	0e 94 ef 03 	call	0x7de	; 0x7de <__divmodhi4>
     13a:	eb 01       	movw	r28, r22
     13c:	22 e0       	ldi	r18, 0x02	; 2
     13e:	30 e0       	ldi	r19, 0x00	; 0
     140:	08 c0       	rjmp	.+16     	; 0x152 <is_prime+0x26>
		if((n % i) == 0)
     142:	cf 01       	movw	r24, r30
     144:	b9 01       	movw	r22, r18
     146:	0e 94 ef 03 	call	0x7de	; 0x7de <__divmodhi4>
     14a:	00 97       	sbiw	r24, 0x00	; 0
     14c:	41 f0       	breq	.+16     	; 0x15e <is_prime+0x32>
#include <compat/deprecated.h>
#include "prime.h"

int is_prime(int n) {
	int i;
	for(i = 2;i <= n/2;i++)
     14e:	2f 5f       	subi	r18, 0xFF	; 255
     150:	3f 4f       	sbci	r19, 0xFF	; 255
     152:	c2 17       	cp	r28, r18
     154:	d3 07       	cpc	r29, r19
     156:	ac f7       	brge	.-22     	; 0x142 <is_prime+0x16>
		if((n % i) == 0)
			return(0);
	return(1);
     158:	81 e0       	ldi	r24, 0x01	; 1
     15a:	90 e0       	ldi	r25, 0x00	; 0
     15c:	02 c0       	rjmp	.+4      	; 0x162 <is_prime+0x36>

int is_prime(int n) {
	int i;
	for(i = 2;i <= n/2;i++)
		if((n % i) == 0)
			return(0);
     15e:	80 e0       	ldi	r24, 0x00	; 0
     160:	90 e0       	ldi	r25, 0x00	; 0
	return(1);
}
     162:	df 91       	pop	r29
     164:	cf 91       	pop	r28
     166:	08 95       	ret

00000168 <app_prime>:

void app_prime(char *ap) {
     168:	cf 92       	push	r12
     16a:	df 92       	push	r13
     16c:	ef 92       	push	r14
     16e:	ff 92       	push	r15
     170:	0f 93       	push	r16
     172:	1f 93       	push	r17
     174:	cf 93       	push	r28
     176:	df 93       	push	r29
	int t = 2000, n, count = 0;
	if(ap) t = atoi(ap);
     178:	00 97       	sbiw	r24, 0x00	; 0
     17a:	21 f0       	breq	.+8      	; 0x184 <app_prime+0x1c>
     17c:	0e 94 45 05 	call	0xa8a	; 0xa8a <atoi>
     180:	7c 01       	movw	r14, r24
     182:	04 c0       	rjmp	.+8      	; 0x18c <app_prime+0x24>
			return(0);
	return(1);
}

void app_prime(char *ap) {
	int t = 2000, n, count = 0;
     184:	90 ed       	ldi	r25, 0xD0	; 208
     186:	e9 2e       	mov	r14, r25
     188:	97 e0       	ldi	r25, 0x07	; 7
     18a:	f9 2e       	mov	r15, r25
     18c:	00 e0       	ldi	r16, 0x00	; 0
     18e:	10 e0       	ldi	r17, 0x00	; 0
	if(ap) t = atoi(ap);
	for(n = 2;n <= t;n++) {
     190:	c2 e0       	ldi	r28, 0x02	; 2
     192:	d0 e0       	ldi	r29, 0x00	; 0
		if(is_prime(n)) {
			count++;
			printf("%d is a prime number !!! \n", n);
     194:	8c e3       	ldi	r24, 0x3C	; 60
     196:	c8 2e       	mov	r12, r24
     198:	82 e0       	ldi	r24, 0x02	; 2
     19a:	d8 2e       	mov	r13, r24
}

void app_prime(char *ap) {
	int t = 2000, n, count = 0;
	if(ap) t = atoi(ap);
	for(n = 2;n <= t;n++) {
     19c:	16 c0       	rjmp	.+44     	; 0x1ca <app_prime+0x62>
		if(is_prime(n)) {
     19e:	ce 01       	movw	r24, r28
     1a0:	0e 94 96 00 	call	0x12c	; 0x12c <is_prime>
     1a4:	00 97       	sbiw	r24, 0x00	; 0
     1a6:	81 f0       	breq	.+32     	; 0x1c8 <app_prime+0x60>
			count++;
     1a8:	0f 5f       	subi	r16, 0xFF	; 255
     1aa:	1f 4f       	sbci	r17, 0xFF	; 255
			printf("%d is a prime number !!! \n", n);
     1ac:	00 d0       	rcall	.+0      	; 0x1ae <app_prime+0x46>
     1ae:	0f 92       	push	r0
     1b0:	ed b7       	in	r30, 0x3d	; 61
     1b2:	fe b7       	in	r31, 0x3e	; 62
     1b4:	d2 82       	std	Z+2, r13	; 0x02
     1b6:	c1 82       	std	Z+1, r12	; 0x01
     1b8:	d4 83       	std	Z+4, r29	; 0x04
     1ba:	c3 83       	std	Z+3, r28	; 0x03
     1bc:	0e 94 d4 05 	call	0xba8	; 0xba8 <printf>
     1c0:	0f 90       	pop	r0
     1c2:	0f 90       	pop	r0
     1c4:	0f 90       	pop	r0
     1c6:	0f 90       	pop	r0
}

void app_prime(char *ap) {
	int t = 2000, n, count = 0;
	if(ap) t = atoi(ap);
	for(n = 2;n <= t;n++) {
     1c8:	21 96       	adiw	r28, 0x01	; 1
     1ca:	ec 16       	cp	r14, r28
     1cc:	fd 06       	cpc	r15, r29
     1ce:	3c f7       	brge	.-50     	; 0x19e <app_prime+0x36>
		if(is_prime(n)) {
			count++;
			printf("%d is a prime number !!! \n", n);
		}
	}
	printf("count = %d\n", count);
     1d0:	00 d0       	rcall	.+0      	; 0x1d2 <app_prime+0x6a>
     1d2:	0f 92       	push	r0
     1d4:	87 e5       	ldi	r24, 0x57	; 87
     1d6:	92 e0       	ldi	r25, 0x02	; 2
     1d8:	ed b7       	in	r30, 0x3d	; 61
     1da:	fe b7       	in	r31, 0x3e	; 62
     1dc:	92 83       	std	Z+2, r25	; 0x02
     1de:	81 83       	std	Z+1, r24	; 0x01
     1e0:	14 83       	std	Z+4, r17	; 0x04
     1e2:	03 83       	std	Z+3, r16	; 0x03
     1e4:	0e 94 d4 05 	call	0xba8	; 0xba8 <printf>
     1e8:	0f 90       	pop	r0
     1ea:	0f 90       	pop	r0
     1ec:	0f 90       	pop	r0
     1ee:	0f 90       	pop	r0
}
     1f0:	df 91       	pop	r29
     1f2:	cf 91       	pop	r28
     1f4:	1f 91       	pop	r17
     1f6:	0f 91       	pop	r16
     1f8:	ff 90       	pop	r15
     1fa:	ef 90       	pop	r14
     1fc:	df 90       	pop	r13
     1fe:	cf 90       	pop	r12
     200:	08 95       	ret

00000202 <q_init>:

char 	qi[QI_SIZE], qo[QO_SIZE];
int 	fi, ri, fo, ro;

void q_init() {
	fi = ri = fo = ro = 0;
     202:	10 92 d9 02 	sts	0x02D9, r1
     206:	10 92 d8 02 	sts	0x02D8, r1
     20a:	10 92 d7 02 	sts	0x02D7, r1
     20e:	10 92 d6 02 	sts	0x02D6, r1
     212:	10 92 db 02 	sts	0x02DB, r1
     216:	10 92 da 02 	sts	0x02DA, r1
     21a:	10 92 95 02 	sts	0x0295, r1
     21e:	10 92 94 02 	sts	0x0294, r1
}
     222:	08 95       	ret

00000224 <qi_insert>:


int qi_insert(char ch) {
     224:	48 2f       	mov	r20, r24
	if((ri + 1) % QI_SIZE == fi)
     226:	20 91 da 02 	lds	r18, 0x02DA
     22a:	30 91 db 02 	lds	r19, 0x02DB
     22e:	2f 5f       	subi	r18, 0xFF	; 255
     230:	3f 4f       	sbci	r19, 0xFF	; 255
     232:	c9 01       	movw	r24, r18
     234:	60 e4       	ldi	r22, 0x40	; 64
     236:	70 e0       	ldi	r23, 0x00	; 0
     238:	0e 94 ef 03 	call	0x7de	; 0x7de <__divmodhi4>
     23c:	9c 01       	movw	r18, r24
     23e:	80 91 94 02 	lds	r24, 0x0294
     242:	90 91 95 02 	lds	r25, 0x0295
     246:	28 17       	cp	r18, r24
     248:	39 07       	cpc	r19, r25
     24a:	59 f0       	breq	.+22     	; 0x262 <qi_insert+0x3e>
		return(0);
	ri = (ri + 1) % QI_SIZE;
     24c:	30 93 db 02 	sts	0x02DB, r19
     250:	20 93 da 02 	sts	0x02DA, r18
	qi[ri] = ch;
     254:	24 52       	subi	r18, 0x24	; 36
     256:	3d 4f       	sbci	r19, 0xFD	; 253
     258:	f9 01       	movw	r30, r18
     25a:	40 83       	st	Z, r20
	return(1);
     25c:	81 e0       	ldi	r24, 0x01	; 1
     25e:	90 e0       	ldi	r25, 0x00	; 0
     260:	08 95       	ret
}


int qi_insert(char ch) {
	if((ri + 1) % QI_SIZE == fi)
		return(0);
     262:	80 e0       	ldi	r24, 0x00	; 0
     264:	90 e0       	ldi	r25, 0x00	; 0
	ri = (ri + 1) % QI_SIZE;
	qi[ri] = ch;
	return(1);
}
     266:	08 95       	ret

00000268 <qi_delete>:

int qi_delete() {
	if(ri == fi)
     268:	80 91 94 02 	lds	r24, 0x0294
     26c:	90 91 95 02 	lds	r25, 0x0295
     270:	20 91 da 02 	lds	r18, 0x02DA
     274:	30 91 db 02 	lds	r19, 0x02DB
     278:	28 17       	cp	r18, r24
     27a:	39 07       	cpc	r19, r25
     27c:	79 f0       	breq	.+30     	; 0x29c <qi_delete+0x34>
		return(0);
	fi = (fi + 1) % QI_SIZE;
     27e:	01 96       	adiw	r24, 0x01	; 1
     280:	60 e4       	ldi	r22, 0x40	; 64
     282:	70 e0       	ldi	r23, 0x00	; 0
     284:	0e 94 ef 03 	call	0x7de	; 0x7de <__divmodhi4>
     288:	90 93 95 02 	sts	0x0295, r25
     28c:	80 93 94 02 	sts	0x0294, r24
	return(qi[fi]);
     290:	84 52       	subi	r24, 0x24	; 36
     292:	9d 4f       	sbci	r25, 0xFD	; 253
     294:	fc 01       	movw	r30, r24
     296:	80 81       	ld	r24, Z
     298:	90 e0       	ldi	r25, 0x00	; 0
     29a:	08 95       	ret
	return(1);
}

int qi_delete() {
	if(ri == fi)
		return(0);
     29c:	80 e0       	ldi	r24, 0x00	; 0
     29e:	90 e0       	ldi	r25, 0x00	; 0
	fi = (fi + 1) % QI_SIZE;
	return(qi[fi]);
}
     2a0:	08 95       	ret

000002a2 <qo_insert>:

int qo_insert(char ch) {
     2a2:	48 2f       	mov	r20, r24
	if((ro + 1) % QO_SIZE == fo)
     2a4:	20 91 d8 02 	lds	r18, 0x02D8
     2a8:	30 91 d9 02 	lds	r19, 0x02D9
     2ac:	2f 5f       	subi	r18, 0xFF	; 255
     2ae:	3f 4f       	sbci	r19, 0xFF	; 255
     2b0:	c9 01       	movw	r24, r18
     2b2:	60 e4       	ldi	r22, 0x40	; 64
     2b4:	70 e0       	ldi	r23, 0x00	; 0
     2b6:	0e 94 ef 03 	call	0x7de	; 0x7de <__divmodhi4>
     2ba:	9c 01       	movw	r18, r24
     2bc:	80 91 d6 02 	lds	r24, 0x02D6
     2c0:	90 91 d7 02 	lds	r25, 0x02D7
     2c4:	28 17       	cp	r18, r24
     2c6:	39 07       	cpc	r19, r25
     2c8:	59 f0       	breq	.+22     	; 0x2e0 <qo_insert+0x3e>
		return(0);
	ro = (ro + 1) % QO_SIZE;
     2ca:	30 93 d9 02 	sts	0x02D9, r19
     2ce:	20 93 d8 02 	sts	0x02D8, r18
	qo[ro] = ch;
     2d2:	2a 56       	subi	r18, 0x6A	; 106
     2d4:	3d 4f       	sbci	r19, 0xFD	; 253
     2d6:	f9 01       	movw	r30, r18
     2d8:	40 83       	st	Z, r20
	return(1);
     2da:	81 e0       	ldi	r24, 0x01	; 1
     2dc:	90 e0       	ldi	r25, 0x00	; 0
     2de:	08 95       	ret
	return(qi[fi]);
}

int qo_insert(char ch) {
	if((ro + 1) % QO_SIZE == fo)
		return(0);
     2e0:	80 e0       	ldi	r24, 0x00	; 0
     2e2:	90 e0       	ldi	r25, 0x00	; 0
	ro = (ro + 1) % QO_SIZE;
	qo[ro] = ch;
	return(1);
}
     2e4:	08 95       	ret

000002e6 <qo_delete>:

int qo_delete() {
	if(ro == fo)
     2e6:	80 91 d6 02 	lds	r24, 0x02D6
     2ea:	90 91 d7 02 	lds	r25, 0x02D7
     2ee:	20 91 d8 02 	lds	r18, 0x02D8
     2f2:	30 91 d9 02 	lds	r19, 0x02D9
     2f6:	28 17       	cp	r18, r24
     2f8:	39 07       	cpc	r19, r25
     2fa:	79 f0       	breq	.+30     	; 0x31a <qo_delete+0x34>
		return(0);
	fo = (fo + 1) % QO_SIZE;
     2fc:	01 96       	adiw	r24, 0x01	; 1
     2fe:	60 e4       	ldi	r22, 0x40	; 64
     300:	70 e0       	ldi	r23, 0x00	; 0
     302:	0e 94 ef 03 	call	0x7de	; 0x7de <__divmodhi4>
     306:	90 93 d7 02 	sts	0x02D7, r25
     30a:	80 93 d6 02 	sts	0x02D6, r24
	return(qo[fo]);
     30e:	8a 56       	subi	r24, 0x6A	; 106
     310:	9d 4f       	sbci	r25, 0xFD	; 253
     312:	fc 01       	movw	r30, r24
     314:	80 81       	ld	r24, Z
     316:	90 e0       	ldi	r25, 0x00	; 0
     318:	08 95       	ret
	return(1);
}

int qo_delete() {
	if(ro == fo)
		return(0);
     31a:	80 e0       	ldi	r24, 0x00	; 0
     31c:	90 e0       	ldi	r25, 0x00	; 0
	fo = (fo + 1) % QO_SIZE;
	return(qo[fo]);
}
     31e:	08 95       	ret

00000320 <uart_getchar>:

int uart_getchar(FILE *stream) {
	char ch;

	do {
		cli();
     320:	f8 94       	cli
		ch = qi_delete();
     322:	0e 94 34 01 	call	0x268	; 0x268 <qi_delete>
		sei();
     326:	78 94       	sei
	} while (ch == 0);
     328:	88 23       	and	r24, r24
     32a:	d1 f3       	breq	.-12     	; 0x320 <uart_getchar>

	if(ch == EOT)	return(-1);
     32c:	84 30       	cpi	r24, 0x04	; 4
     32e:	11 f0       	breq	.+4      	; 0x334 <uart_getchar+0x14>
	else			return(ch);
     330:	90 e0       	ldi	r25, 0x00	; 0
     332:	08 95       	ret
		cli();
		ch = qi_delete();
		sei();
	} while (ch == 0);

	if(ch == EOT)	return(-1);
     334:	8f ef       	ldi	r24, 0xFF	; 255
     336:	9f ef       	ldi	r25, 0xFF	; 255
	else			return(ch);
}
     338:	08 95       	ret

0000033a <uart_putchar>:
	sbi(UCSR0B, TXCIE0);
	sbi(UCSR0B, RXEN0);
	sbi(UCSR0B, RXCIE0);
}

int uart_putchar(char ch, FILE *stream) {
     33a:	cf 93       	push	r28
     33c:	c8 2f       	mov	r28, r24
	if(ch == '\n')	uart_putchar('\r', stream);
     33e:	8a 30       	cpi	r24, 0x0A	; 10
     340:	19 f4       	brne	.+6      	; 0x348 <uart_putchar+0xe>
     342:	8d e0       	ldi	r24, 0x0D	; 13
     344:	0e 94 9d 01 	call	0x33a	; 0x33a <uart_putchar>
	
	cli();
     348:	f8 94       	cli
	if(!uart_busy) {
     34a:	80 91 1c 03 	lds	r24, 0x031C
     34e:	88 23       	and	r24, r24
     350:	59 f4       	brne	.+22     	; 0x368 <uart_putchar+0x2e>
		UDR0 = ch;
     352:	c0 93 c6 00 	sts	0x00C6, r28
		uart_busy = 1;
     356:	81 e0       	ldi	r24, 0x01	; 1
     358:	80 93 1c 03 	sts	0x031C, r24
     35c:	0a c0       	rjmp	.+20     	; 0x372 <uart_putchar+0x38>
	} 
	else {
		while(qo_insert(ch) == 0) {
			sei();
     35e:	78 94       	sei
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     360:	86 ef       	ldi	r24, 0xF6	; 246
     362:	8a 95       	dec	r24
     364:	f1 f7       	brne	.-4      	; 0x362 <uart_putchar+0x28>
			_delay_us(100);
			cli();
     366:	f8 94       	cli
	if(!uart_busy) {
		UDR0 = ch;
		uart_busy = 1;
	} 
	else {
		while(qo_insert(ch) == 0) {
     368:	8c 2f       	mov	r24, r28
     36a:	0e 94 51 01 	call	0x2a2	; 0x2a2 <qo_insert>
     36e:	00 97       	sbiw	r24, 0x00	; 0
     370:	b1 f3       	breq	.-20     	; 0x35e <uart_putchar+0x24>
			sei();
			_delay_us(100);
			cli();
		}
	}
	sei();
     372:	78 94       	sei

	return(1);
}
     374:	81 e0       	ldi	r24, 0x01	; 1
     376:	90 e0       	ldi	r25, 0x00	; 0
     378:	cf 91       	pop	r28
     37a:	08 95       	ret

0000037c <uart_init>:
FILE	Mystdout = FDEV_SETUP_STREAM(uart_putchar, NULL, _FDEV_SETUP_WRITE);
FILE	Mystdin = FDEV_SETUP_STREAM(NULL, uart_getchar, _FDEV_SETUP_READ);
char	uart_busy;

void uart_init() {
	stdin = &Mystdin; stdout = &Mystdout;
     37c:	83 e6       	ldi	r24, 0x63	; 99
     37e:	92 e0       	ldi	r25, 0x02	; 2
     380:	90 93 22 03 	sts	0x0322, r25
     384:	80 93 21 03 	sts	0x0321, r24
     388:	81 e7       	ldi	r24, 0x71	; 113
     38a:	92 e0       	ldi	r25, 0x02	; 2
     38c:	90 93 24 03 	sts	0x0324, r25
     390:	80 93 23 03 	sts	0x0323, r24
	q_init();
     394:	0e 94 01 01 	call	0x202	; 0x202 <q_init>
	uart_busy = 0;
     398:	10 92 1c 03 	sts	0x031C, r1
	
	UBRR0H = 0x00; UBRR0L = 0x07;
     39c:	10 92 c5 00 	sts	0x00C5, r1
     3a0:	87 e0       	ldi	r24, 0x07	; 7
     3a2:	80 93 c4 00 	sts	0x00C4, r24
	sbi(UCSR0A, U2X0);
     3a6:	e0 ec       	ldi	r30, 0xC0	; 192
     3a8:	f0 e0       	ldi	r31, 0x00	; 0
     3aa:	80 81       	ld	r24, Z
     3ac:	82 60       	ori	r24, 0x02	; 2
     3ae:	80 83       	st	Z, r24
	sbi(UCSR0B, TXEN0);
     3b0:	e1 ec       	ldi	r30, 0xC1	; 193
     3b2:	f0 e0       	ldi	r31, 0x00	; 0
     3b4:	80 81       	ld	r24, Z
     3b6:	88 60       	ori	r24, 0x08	; 8
     3b8:	80 83       	st	Z, r24
	sbi(UCSR0B, TXCIE0);
     3ba:	80 81       	ld	r24, Z
     3bc:	80 64       	ori	r24, 0x40	; 64
     3be:	80 83       	st	Z, r24
	sbi(UCSR0B, RXEN0);
     3c0:	80 81       	ld	r24, Z
     3c2:	80 61       	ori	r24, 0x10	; 16
     3c4:	80 83       	st	Z, r24
	sbi(UCSR0B, RXCIE0);
     3c6:	80 81       	ld	r24, Z
     3c8:	80 68       	ori	r24, 0x80	; 128
     3ca:	80 83       	st	Z, r24
}
     3cc:	08 95       	ret

000003ce <uart_echo>:

	if(ch == EOT)	return(-1);
	else			return(ch);
}

void uart_echo (char ch) {
     3ce:	cf 93       	push	r28
     3d0:	c8 2f       	mov	r28, r24
	if(ch == '\n')	uart_echo('\r');
     3d2:	8a 30       	cpi	r24, 0x0A	; 10
     3d4:	19 f4       	brne	.+6      	; 0x3dc <uart_echo+0xe>
     3d6:	8d e0       	ldi	r24, 0x0D	; 13
     3d8:	0e 94 e7 01 	call	0x3ce	; 0x3ce <uart_echo>
	if(!uart_busy) {
     3dc:	80 91 1c 03 	lds	r24, 0x031C
     3e0:	88 23       	and	r24, r24
     3e2:	31 f4       	brne	.+12     	; 0x3f0 <uart_echo+0x22>
		UDR0 = ch;
     3e4:	c0 93 c6 00 	sts	0x00C6, r28
		uart_busy = 1;
     3e8:	81 e0       	ldi	r24, 0x01	; 1
     3ea:	80 93 1c 03 	sts	0x031C, r24
     3ee:	03 c0       	rjmp	.+6      	; 0x3f6 <uart_echo+0x28>
	}
	else	qo_insert(ch);
     3f0:	8c 2f       	mov	r24, r28
     3f2:	0e 94 51 01 	call	0x2a2	; 0x2a2 <qo_insert>
}
     3f6:	cf 91       	pop	r28
     3f8:	08 95       	ret

000003fa <__vector_27>:

ISR(USART0_TX_vect) {
     3fa:	1f 92       	push	r1
     3fc:	0f 92       	push	r0
     3fe:	0f b6       	in	r0, 0x3f	; 63
     400:	0f 92       	push	r0
     402:	0b b6       	in	r0, 0x3b	; 59
     404:	0f 92       	push	r0
     406:	11 24       	eor	r1, r1
     408:	2f 93       	push	r18
     40a:	3f 93       	push	r19
     40c:	4f 93       	push	r20
     40e:	5f 93       	push	r21
     410:	6f 93       	push	r22
     412:	7f 93       	push	r23
     414:	8f 93       	push	r24
     416:	9f 93       	push	r25
     418:	af 93       	push	r26
     41a:	bf 93       	push	r27
     41c:	ef 93       	push	r30
     41e:	ff 93       	push	r31
   char ch;

   if((ch = qo_delete()) == 0)
     420:	0e 94 73 01 	call	0x2e6	; 0x2e6 <qo_delete>
     424:	88 23       	and	r24, r24
     426:	19 f4       	brne	.+6      	; 0x42e <__vector_27+0x34>
      uart_busy = 0;
     428:	10 92 1c 03 	sts	0x031C, r1
     42c:	02 c0       	rjmp	.+4      	; 0x432 <__vector_27+0x38>
   else
      UDR0 = ch;
     42e:	80 93 c6 00 	sts	0x00C6, r24
}
     432:	ff 91       	pop	r31
     434:	ef 91       	pop	r30
     436:	bf 91       	pop	r27
     438:	af 91       	pop	r26
     43a:	9f 91       	pop	r25
     43c:	8f 91       	pop	r24
     43e:	7f 91       	pop	r23
     440:	6f 91       	pop	r22
     442:	5f 91       	pop	r21
     444:	4f 91       	pop	r20
     446:	3f 91       	pop	r19
     448:	2f 91       	pop	r18
     44a:	0f 90       	pop	r0
     44c:	0b be       	out	0x3b, r0	; 59
     44e:	0f 90       	pop	r0
     450:	0f be       	out	0x3f, r0	; 63
     452:	0f 90       	pop	r0
     454:	1f 90       	pop	r1
     456:	18 95       	reti

00000458 <__vector_25>:

ISR(USART0_RX_vect) {
     458:	1f 92       	push	r1
     45a:	0f 92       	push	r0
     45c:	0f b6       	in	r0, 0x3f	; 63
     45e:	0f 92       	push	r0
     460:	0b b6       	in	r0, 0x3b	; 59
     462:	0f 92       	push	r0
     464:	11 24       	eor	r1, r1
     466:	2f 93       	push	r18
     468:	3f 93       	push	r19
     46a:	4f 93       	push	r20
     46c:	5f 93       	push	r21
     46e:	6f 93       	push	r22
     470:	7f 93       	push	r23
     472:	8f 93       	push	r24
     474:	9f 93       	push	r25
     476:	af 93       	push	r26
     478:	bf 93       	push	r27
     47a:	cf 93       	push	r28
     47c:	ef 93       	push	r30
     47e:	ff 93       	push	r31
	char ch;

	ch = UDR0;
     480:	c0 91 c6 00 	lds	r28, 0x00C6
	
	if(ch != EOT) {
     484:	c4 30       	cpi	r28, 0x04	; 4
     486:	31 f0       	breq	.+12     	; 0x494 <__vector_25+0x3c>
		if(ch == '\r')	ch = '\n';
     488:	cd 30       	cpi	r28, 0x0D	; 13
     48a:	09 f4       	brne	.+2      	; 0x48e <__vector_25+0x36>
     48c:	ca e0       	ldi	r28, 0x0A	; 10
		uart_echo(ch);
     48e:	8c 2f       	mov	r24, r28
     490:	0e 94 e7 01 	call	0x3ce	; 0x3ce <uart_echo>
	}
	qi_insert(ch);
     494:	8c 2f       	mov	r24, r28
     496:	0e 94 12 01 	call	0x224	; 0x224 <qi_insert>
}
     49a:	ff 91       	pop	r31
     49c:	ef 91       	pop	r30
     49e:	cf 91       	pop	r28
     4a0:	bf 91       	pop	r27
     4a2:	af 91       	pop	r26
     4a4:	9f 91       	pop	r25
     4a6:	8f 91       	pop	r24
     4a8:	7f 91       	pop	r23
     4aa:	6f 91       	pop	r22
     4ac:	5f 91       	pop	r21
     4ae:	4f 91       	pop	r20
     4b0:	3f 91       	pop	r19
     4b2:	2f 91       	pop	r18
     4b4:	0f 90       	pop	r0
     4b6:	0b be       	out	0x3b, r0	; 59
     4b8:	0f 90       	pop	r0
     4ba:	0f be       	out	0x3f, r0	; 63
     4bc:	0f 90       	pop	r0
     4be:	1f 90       	pop	r1
     4c0:	18 95       	reti

000004c2 <get_node>:
struct node *Head = NULL;

struct node *get_node() {
	struct node *cp;

	cp = (struct node *)malloc(sizeof(struct node));
     4c2:	84 e0       	ldi	r24, 0x04	; 4
     4c4:	90 e0       	ldi	r25, 0x00	; 0
     4c6:	0e 94 16 04 	call	0x82c	; 0x82c <malloc>
	return(cp);
}
     4ca:	08 95       	ret

000004cc <free_node>:


void free_node(struct node *np) {
	free(np);
     4cc:	0e 94 ac 04 	call	0x958	; 0x958 <free>
}
     4d0:	08 95       	ret

000004d2 <insert_node_head>:

void insert_node_head(struct node *np) {
     4d2:	fc 01       	movw	r30, r24
	if(!Head) {
     4d4:	80 91 90 02 	lds	r24, 0x0290
     4d8:	90 91 91 02 	lds	r25, 0x0291
     4dc:	00 97       	sbiw	r24, 0x00	; 0
     4de:	39 f4       	brne	.+14     	; 0x4ee <insert_node_head+0x1c>
		Head = np;
     4e0:	f0 93 91 02 	sts	0x0291, r31
     4e4:	e0 93 90 02 	sts	0x0290, r30
		np->link = NULL;
     4e8:	13 82       	std	Z+3, r1	; 0x03
     4ea:	12 82       	std	Z+2, r1	; 0x02
     4ec:	08 95       	ret
	} else {
		np->link = Head;
     4ee:	93 83       	std	Z+3, r25	; 0x03
     4f0:	82 83       	std	Z+2, r24	; 0x02
		Head = np;
     4f2:	f0 93 91 02 	sts	0x0291, r31
     4f6:	e0 93 90 02 	sts	0x0290, r30
     4fa:	08 95       	ret

000004fc <insert_node_tail>:
}

void insert_node_tail(struct node *np) {
	struct node *cp;

	if(!Head)
     4fc:	e0 91 90 02 	lds	r30, 0x0290
     500:	f0 91 91 02 	lds	r31, 0x0291
     504:	30 97       	sbiw	r30, 0x00	; 0
     506:	31 f4       	brne	.+12     	; 0x514 <insert_node_tail+0x18>
		Head = np;
     508:	90 93 91 02 	sts	0x0291, r25
     50c:	80 93 90 02 	sts	0x0290, r24
     510:	08 c0       	rjmp	.+16     	; 0x522 <insert_node_tail+0x26>
	else {
		for(cp = Head;cp->link != NULL;cp = cp->link)
     512:	f9 01       	movw	r30, r18
     514:	22 81       	ldd	r18, Z+2	; 0x02
     516:	33 81       	ldd	r19, Z+3	; 0x03
     518:	21 15       	cp	r18, r1
     51a:	31 05       	cpc	r19, r1
     51c:	d1 f7       	brne	.-12     	; 0x512 <insert_node_tail+0x16>
			;
		cp->link = np;
     51e:	93 83       	std	Z+3, r25	; 0x03
     520:	82 83       	std	Z+2, r24	; 0x02
	}
	np->link = NULL;
     522:	fc 01       	movw	r30, r24
     524:	13 82       	std	Z+3, r1	; 0x03
     526:	12 82       	std	Z+2, r1	; 0x02
}
     528:	08 95       	ret

0000052a <insert_node_ascn>:

void insert_node_ascn(struct node *np) {
     52a:	cf 93       	push	r28
     52c:	df 93       	push	r29
     52e:	fc 01       	movw	r30, r24
	struct node *cp, *pp;
	if(!Head) {
     530:	20 91 90 02 	lds	r18, 0x0290
     534:	30 91 91 02 	lds	r19, 0x0291
     538:	21 15       	cp	r18, r1
     53a:	31 05       	cpc	r19, r1
     53c:	31 f0       	breq	.+12     	; 0x54a <insert_node_ascn+0x20>
		Head = np;
		np->link = NULL;
	}
	else {
		for(cp = Head, pp = NULL;cp != NULL && cp->data < np->data;pp = cp, cp = cp->link)
     53e:	40 81       	ld	r20, Z
     540:	51 81       	ldd	r21, Z+1	; 0x01
     542:	d9 01       	movw	r26, r18
     544:	c0 e0       	ldi	r28, 0x00	; 0
     546:	d0 e0       	ldi	r29, 0x00	; 0
     548:	0f c0       	rjmp	.+30     	; 0x568 <insert_node_ascn+0x3e>
}

void insert_node_ascn(struct node *np) {
	struct node *cp, *pp;
	if(!Head) {
		Head = np;
     54a:	90 93 91 02 	sts	0x0291, r25
     54e:	80 93 90 02 	sts	0x0290, r24
		np->link = NULL;
     552:	13 82       	std	Z+3, r1	; 0x03
     554:	12 82       	std	Z+2, r1	; 0x02
     556:	1d c0       	rjmp	.+58     	; 0x592 <insert_node_ascn+0x68>
	}
	else {
		for(cp = Head, pp = NULL;cp != NULL && cp->data < np->data;pp = cp, cp = cp->link)
     558:	12 96       	adiw	r26, 0x02	; 2
     55a:	8d 91       	ld	r24, X+
     55c:	9c 91       	ld	r25, X
     55e:	13 97       	sbiw	r26, 0x03	; 3
     560:	ed 01       	movw	r28, r26
     562:	00 97       	sbiw	r24, 0x00	; 0
     564:	39 f0       	breq	.+14     	; 0x574 <insert_node_ascn+0x4a>
     566:	dc 01       	movw	r26, r24
     568:	8d 91       	ld	r24, X+
     56a:	9c 91       	ld	r25, X
     56c:	11 97       	sbiw	r26, 0x01	; 1
     56e:	84 17       	cp	r24, r20
     570:	95 07       	cpc	r25, r21
     572:	94 f3       	brlt	.-28     	; 0x558 <insert_node_ascn+0x2e>
			;
		if(pp == NULL) {
     574:	20 97       	sbiw	r28, 0x00	; 0
     576:	39 f4       	brne	.+14     	; 0x586 <insert_node_ascn+0x5c>
			np->link = Head;
     578:	33 83       	std	Z+3, r19	; 0x03
     57a:	22 83       	std	Z+2, r18	; 0x02
			Head = np;
     57c:	f0 93 91 02 	sts	0x0291, r31
     580:	e0 93 90 02 	sts	0x0290, r30
     584:	06 c0       	rjmp	.+12     	; 0x592 <insert_node_ascn+0x68>
		} else {
			np->link = pp->link;
     586:	8a 81       	ldd	r24, Y+2	; 0x02
     588:	9b 81       	ldd	r25, Y+3	; 0x03
     58a:	93 83       	std	Z+3, r25	; 0x03
     58c:	82 83       	std	Z+2, r24	; 0x02
			pp->link = np;
     58e:	fb 83       	std	Y+3, r31	; 0x03
     590:	ea 83       	std	Y+2, r30	; 0x02
		}
	}
}
     592:	df 91       	pop	r29
     594:	cf 91       	pop	r28
     596:	08 95       	ret

00000598 <insert_node_desc>:

void insert_node_desc(struct node *np) {
     598:	cf 93       	push	r28
     59a:	df 93       	push	r29
     59c:	fc 01       	movw	r30, r24
	struct node *cp, *pp;
	if(!Head) {
     59e:	20 91 90 02 	lds	r18, 0x0290
     5a2:	30 91 91 02 	lds	r19, 0x0291
     5a6:	21 15       	cp	r18, r1
     5a8:	31 05       	cpc	r19, r1
     5aa:	31 f0       	breq	.+12     	; 0x5b8 <insert_node_desc+0x20>
		Head = np;
		np->link = NULL;
	}
	else {
		for(cp = Head, pp = NULL;cp != NULL && cp->data < np->data;pp = cp, cp = cp->link)
     5ac:	40 81       	ld	r20, Z
     5ae:	51 81       	ldd	r21, Z+1	; 0x01
     5b0:	d9 01       	movw	r26, r18
     5b2:	c0 e0       	ldi	r28, 0x00	; 0
     5b4:	d0 e0       	ldi	r29, 0x00	; 0
     5b6:	0f c0       	rjmp	.+30     	; 0x5d6 <insert_node_desc+0x3e>
}

void insert_node_desc(struct node *np) {
	struct node *cp, *pp;
	if(!Head) {
		Head = np;
     5b8:	90 93 91 02 	sts	0x0291, r25
     5bc:	80 93 90 02 	sts	0x0290, r24
		np->link = NULL;
     5c0:	13 82       	std	Z+3, r1	; 0x03
     5c2:	12 82       	std	Z+2, r1	; 0x02
     5c4:	1d c0       	rjmp	.+58     	; 0x600 <insert_node_desc+0x68>
	}
	else {
		for(cp = Head, pp = NULL;cp != NULL && cp->data < np->data;pp = cp, cp = cp->link)
     5c6:	12 96       	adiw	r26, 0x02	; 2
     5c8:	8d 91       	ld	r24, X+
     5ca:	9c 91       	ld	r25, X
     5cc:	13 97       	sbiw	r26, 0x03	; 3
     5ce:	ed 01       	movw	r28, r26
     5d0:	00 97       	sbiw	r24, 0x00	; 0
     5d2:	39 f0       	breq	.+14     	; 0x5e2 <insert_node_desc+0x4a>
     5d4:	dc 01       	movw	r26, r24
     5d6:	8d 91       	ld	r24, X+
     5d8:	9c 91       	ld	r25, X
     5da:	11 97       	sbiw	r26, 0x01	; 1
     5dc:	84 17       	cp	r24, r20
     5de:	95 07       	cpc	r25, r21
     5e0:	94 f3       	brlt	.-28     	; 0x5c6 <insert_node_desc+0x2e>
			;
		if(pp == NULL) {
     5e2:	20 97       	sbiw	r28, 0x00	; 0
     5e4:	39 f4       	brne	.+14     	; 0x5f4 <insert_node_desc+0x5c>
			np->link = pp->link;
     5e6:	8a 81       	ldd	r24, Y+2	; 0x02
     5e8:	9b 81       	ldd	r25, Y+3	; 0x03
     5ea:	93 83       	std	Z+3, r25	; 0x03
     5ec:	82 83       	std	Z+2, r24	; 0x02
			pp->link = np;
     5ee:	fb 83       	std	Y+3, r31	; 0x03
     5f0:	ea 83       	std	Y+2, r30	; 0x02
     5f2:	06 c0       	rjmp	.+12     	; 0x600 <insert_node_desc+0x68>
		} else {
			np->link = Head;
     5f4:	33 83       	std	Z+3, r19	; 0x03
     5f6:	22 83       	std	Z+2, r18	; 0x02
			Head = np;
     5f8:	f0 93 91 02 	sts	0x0291, r31
     5fc:	e0 93 90 02 	sts	0x0290, r30
		}
	}
}
     600:	df 91       	pop	r29
     602:	cf 91       	pop	r28
     604:	08 95       	ret

00000606 <tour_list>:

void tour_list() {
     606:	0f 93       	push	r16
     608:	1f 93       	push	r17
     60a:	cf 93       	push	r28
     60c:	df 93       	push	r29
	struct node *cp;

	printf("\n");
     60e:	8a e0       	ldi	r24, 0x0A	; 10
     610:	90 e0       	ldi	r25, 0x00	; 0
     612:	0e 94 e6 05 	call	0xbcc	; 0xbcc <putchar>
	for(cp = Head;cp != NULL;cp = cp->link)
     616:	c0 91 90 02 	lds	r28, 0x0290
     61a:	d0 91 91 02 	lds	r29, 0x0291
		printf("-->%c ", cp->data);
     61e:	0f e7       	ldi	r16, 0x7F	; 127
     620:	12 e0       	ldi	r17, 0x02	; 2

void tour_list() {
	struct node *cp;

	printf("\n");
	for(cp = Head;cp != NULL;cp = cp->link)
     622:	13 c0       	rjmp	.+38     	; 0x64a <tour_list+0x44>
		printf("-->%c ", cp->data);
     624:	00 d0       	rcall	.+0      	; 0x626 <tour_list+0x20>
     626:	0f 92       	push	r0
     628:	ed b7       	in	r30, 0x3d	; 61
     62a:	fe b7       	in	r31, 0x3e	; 62
     62c:	12 83       	std	Z+2, r17	; 0x02
     62e:	01 83       	std	Z+1, r16	; 0x01
     630:	88 81       	ld	r24, Y
     632:	99 81       	ldd	r25, Y+1	; 0x01
     634:	94 83       	std	Z+4, r25	; 0x04
     636:	83 83       	std	Z+3, r24	; 0x03
     638:	0e 94 d4 05 	call	0xba8	; 0xba8 <printf>

void tour_list() {
	struct node *cp;

	printf("\n");
	for(cp = Head;cp != NULL;cp = cp->link)
     63c:	0a 80       	ldd	r0, Y+2	; 0x02
     63e:	db 81       	ldd	r29, Y+3	; 0x03
     640:	c0 2d       	mov	r28, r0
     642:	0f 90       	pop	r0
     644:	0f 90       	pop	r0
     646:	0f 90       	pop	r0
     648:	0f 90       	pop	r0
     64a:	20 97       	sbiw	r28, 0x00	; 0
     64c:	59 f7       	brne	.-42     	; 0x624 <tour_list+0x1e>
		printf("-->%c ", cp->data);

	printf("\n");
     64e:	8a e0       	ldi	r24, 0x0A	; 10
     650:	90 e0       	ldi	r25, 0x00	; 0
     652:	0e 94 e6 05 	call	0xbcc	; 0xbcc <putchar>
}
     656:	df 91       	pop	r29
     658:	cf 91       	pop	r28
     65a:	1f 91       	pop	r17
     65c:	0f 91       	pop	r16
     65e:	08 95       	ret

00000660 <free_list>:

void free_list() {
	struct node *cp;

	for( ;Head != NULL; ) {
     660:	09 c0       	rjmp	.+18     	; 0x674 <free_list+0x14>
		cp = Head;
		Head = cp->link;
     662:	fc 01       	movw	r30, r24
     664:	22 81       	ldd	r18, Z+2	; 0x02
     666:	33 81       	ldd	r19, Z+3	; 0x03
     668:	30 93 91 02 	sts	0x0291, r19
     66c:	20 93 90 02 	sts	0x0290, r18
	return(cp);
}


void free_node(struct node *np) {
	free(np);
     670:	0e 94 ac 04 	call	0x958	; 0x958 <free>
}

void free_list() {
	struct node *cp;

	for( ;Head != NULL; ) {
     674:	80 91 90 02 	lds	r24, 0x0290
     678:	90 91 91 02 	lds	r25, 0x0291
     67c:	00 97       	sbiw	r24, 0x00	; 0
     67e:	89 f7       	brne	.-30     	; 0x662 <free_list+0x2>
		cp = Head;
		Head = cp->link;
		free_node(cp);
	}
}
     680:	08 95       	ret

00000682 <app_list>:
#include <stdlib.h>
#include <string.h>
#include "link.h"
#include "list.h"

void app_list(char *ap) {
     682:	ef 92       	push	r14
     684:	ff 92       	push	r15
     686:	1f 93       	push	r17
     688:	cf 93       	push	r28
     68a:	df 93       	push	r29
     68c:	cd b7       	in	r28, 0x3d	; 61
     68e:	de b7       	in	r29, 0x3e	; 62
     690:	28 97       	sbiw	r28, 0x08	; 8
     692:	0f b6       	in	r0, 0x3f	; 63
     694:	f8 94       	cli
     696:	de bf       	out	0x3e, r29	; 62
     698:	0f be       	out	0x3f, r0	; 63
     69a:	cd bf       	out	0x3d, r28	; 61
	char buf[8], how = 'a';
	struct node *np;

	if(ap)	how = *ap;
     69c:	00 97       	sbiw	r24, 0x00	; 0
     69e:	19 f0       	breq	.+6      	; 0x6a6 <app_list+0x24>
     6a0:	fc 01       	movw	r30, r24
     6a2:	10 81       	ld	r17, Z
     6a4:	01 c0       	rjmp	.+2      	; 0x6a8 <app_list+0x26>
#include <string.h>
#include "link.h"
#include "list.h"

void app_list(char *ap) {
	char buf[8], how = 'a';
     6a6:	11 e6       	ldi	r17, 0x61	; 97
	struct node *np;

	if(ap)	how = *ap;
	while(1) {
		printf("> ");
     6a8:	86 e8       	ldi	r24, 0x86	; 134
     6aa:	e8 2e       	mov	r14, r24
     6ac:	82 e0       	ldi	r24, 0x02	; 2
     6ae:	f8 2e       	mov	r15, r24
     6b0:	0f 92       	push	r0
     6b2:	0f 92       	push	r0
     6b4:	ed b7       	in	r30, 0x3d	; 61
     6b6:	fe b7       	in	r31, 0x3e	; 62
     6b8:	f2 82       	std	Z+2, r15	; 0x02
     6ba:	e1 82       	std	Z+1, r14	; 0x01
     6bc:	0e 94 d4 05 	call	0xba8	; 0xba8 <printf>
		if(fgets(buf, 8, stdin) == NULL)
     6c0:	0f 90       	pop	r0
     6c2:	0f 90       	pop	r0
     6c4:	40 91 21 03 	lds	r20, 0x0321
     6c8:	50 91 22 03 	lds	r21, 0x0322
     6cc:	ce 01       	movw	r24, r28
     6ce:	01 96       	adiw	r24, 0x01	; 1
     6d0:	68 e0       	ldi	r22, 0x08	; 8
     6d2:	70 e0       	ldi	r23, 0x00	; 0
     6d4:	0e 94 a0 05 	call	0xb40	; 0xb40 <fgets>
     6d8:	00 97       	sbiw	r24, 0x00	; 0
     6da:	c9 f0       	breq	.+50     	; 0x70e <app_list+0x8c>
			break;
		np = get_node();
     6dc:	0e 94 61 02 	call	0x4c2	; 0x4c2 <get_node>
		np->data = buf[0];
     6e0:	29 81       	ldd	r18, Y+1	; 0x01
     6e2:	fc 01       	movw	r30, r24
     6e4:	20 83       	st	Z, r18
     6e6:	11 82       	std	Z+1, r1	; 0x01
		switch(how) {
     6e8:	18 36       	cpi	r17, 0x68	; 104
     6ea:	29 f0       	breq	.+10     	; 0x6f6 <app_list+0x74>
     6ec:	14 37       	cpi	r17, 0x74	; 116
     6ee:	31 f0       	breq	.+12     	; 0x6fc <app_list+0x7a>
     6f0:	14 36       	cpi	r17, 0x64	; 100
     6f2:	51 f4       	brne	.+20     	; 0x708 <app_list+0x86>
     6f4:	06 c0       	rjmp	.+12     	; 0x702 <app_list+0x80>
			case 'h' 	: insert_node_head(np);	break;
     6f6:	0e 94 69 02 	call	0x4d2	; 0x4d2 <insert_node_head>
     6fa:	da cf       	rjmp	.-76     	; 0x6b0 <app_list+0x2e>
			case 't' 	: insert_node_tail(np);	break;
     6fc:	0e 94 7e 02 	call	0x4fc	; 0x4fc <insert_node_tail>
     700:	d7 cf       	rjmp	.-82     	; 0x6b0 <app_list+0x2e>
			case 'd' 	: insert_node_desc(np);	break;
     702:	0e 94 cc 02 	call	0x598	; 0x598 <insert_node_desc>
     706:	d4 cf       	rjmp	.-88     	; 0x6b0 <app_list+0x2e>
			default  	: insert_node_ascn(np);
     708:	0e 94 95 02 	call	0x52a	; 0x52a <insert_node_ascn>
     70c:	d1 cf       	rjmp	.-94     	; 0x6b0 <app_list+0x2e>
		}
	}
	tour_list();
     70e:	0e 94 03 03 	call	0x606	; 0x606 <tour_list>
	free_list();
     712:	0e 94 30 03 	call	0x660	; 0x660 <free_list>
}
     716:	28 96       	adiw	r28, 0x08	; 8
     718:	0f b6       	in	r0, 0x3f	; 63
     71a:	f8 94       	cli
     71c:	de bf       	out	0x3e, r29	; 62
     71e:	0f be       	out	0x3f, r0	; 63
     720:	cd bf       	out	0x3d, r28	; 61
     722:	df 91       	pop	r29
     724:	cf 91       	pop	r28
     726:	1f 91       	pop	r17
     728:	ff 90       	pop	r15
     72a:	ef 90       	pop	r14
     72c:	08 95       	ret

0000072e <main>:
#include "prime.h"
#include "queue.h"
#include "link.h"
#include "list.h"

int main() {
     72e:	cf 93       	push	r28
     730:	df 93       	push	r29
     732:	cd b7       	in	r28, 0x3d	; 61
     734:	de b7       	in	r29, 0x3e	; 62
     736:	c0 58       	subi	r28, 0x80	; 128
     738:	d0 40       	sbci	r29, 0x00	; 0
     73a:	0f b6       	in	r0, 0x3f	; 63
     73c:	f8 94       	cli
     73e:	de bf       	out	0x3e, r29	; 62
     740:	0f be       	out	0x3f, r0	; 63
     742:	cd bf       	out	0x3d, r28	; 61
	char cmd[128], *cp, *ap;
	int n = 0;	

	uart_init();
     744:	0e 94 be 01 	call	0x37c	; 0x37c <uart_init>
	sei();
     748:	78 94       	sei
	while(1) {
		printf("$ ");
     74a:	80 e0       	ldi	r24, 0x00	; 0
     74c:	c8 2e       	mov	r12, r24
     74e:	82 e0       	ldi	r24, 0x02	; 2
     750:	d8 2e       	mov	r13, r24
     752:	0f 92       	push	r0
     754:	0f 92       	push	r0
     756:	ed b7       	in	r30, 0x3d	; 61
     758:	fe b7       	in	r31, 0x3e	; 62
     75a:	d2 82       	std	Z+2, r13	; 0x02
     75c:	c1 82       	std	Z+1, r12	; 0x01
     75e:	0e 94 d4 05 	call	0xba8	; 0xba8 <printf>
		if(fgets(cmd, sizeof(cmd), stdin) == NULL)	break;
     762:	0f 90       	pop	r0
     764:	0f 90       	pop	r0
     766:	40 91 21 03 	lds	r20, 0x0321
     76a:	50 91 22 03 	lds	r21, 0x0322
     76e:	ce 01       	movw	r24, r28
     770:	01 96       	adiw	r24, 0x01	; 1
     772:	60 e8       	ldi	r22, 0x80	; 128
     774:	70 e0       	ldi	r23, 0x00	; 0
     776:	0e 94 a0 05 	call	0xb40	; 0xb40 <fgets>
     77a:	00 97       	sbiw	r24, 0x00	; 0
     77c:	59 f1       	breq	.+86     	; 0x7d4 <main+0xa6>

		if((cp = strtok(cmd, "\n\r\t  ")) == NULL)	continue;
     77e:	ce 01       	movw	r24, r28
     780:	01 96       	adiw	r24, 0x01	; 1
     782:	63 e0       	ldi	r22, 0x03	; 3
     784:	72 e0       	ldi	r23, 0x02	; 2
     786:	0e 94 63 05 	call	0xac6	; 0xac6 <strtok>
     78a:	8c 01       	movw	r16, r24
     78c:	00 97       	sbiw	r24, 0x00	; 0
     78e:	09 f3       	breq	.-62     	; 0x752 <main+0x24>
		ap = strtok(NULL, "\n\r\t  ");
     790:	80 e0       	ldi	r24, 0x00	; 0
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	63 e0       	ldi	r22, 0x03	; 3
     796:	72 e0       	ldi	r23, 0x02	; 2
     798:	0e 94 63 05 	call	0xac6	; 0xac6 <strtok>
     79c:	7c 01       	movw	r14, r24
		if		(!strcmp(cp, "prime"))				app_prime(ap);
     79e:	c8 01       	movw	r24, r16
     7a0:	69 e0       	ldi	r22, 0x09	; 9
     7a2:	72 e0       	ldi	r23, 0x02	; 2
     7a4:	0e 94 68 05 	call	0xad0	; 0xad0 <strcmp>
     7a8:	00 97       	sbiw	r24, 0x00	; 0
     7aa:	21 f4       	brne	.+8      	; 0x7b4 <main+0x86>
     7ac:	c7 01       	movw	r24, r14
     7ae:	0e 94 b4 00 	call	0x168	; 0x168 <app_prime>
     7b2:	cf cf       	rjmp	.-98     	; 0x752 <main+0x24>
		else if	(!strcmp(cp, "list"))				app_list(ap);
     7b4:	c8 01       	movw	r24, r16
     7b6:	6f e0       	ldi	r22, 0x0F	; 15
     7b8:	72 e0       	ldi	r23, 0x02	; 2
     7ba:	0e 94 68 05 	call	0xad0	; 0xad0 <strcmp>
     7be:	00 97       	sbiw	r24, 0x00	; 0
     7c0:	21 f4       	brne	.+8      	; 0x7ca <main+0x9c>
     7c2:	c7 01       	movw	r24, r14
     7c4:	0e 94 41 03 	call	0x682	; 0x682 <app_list>
     7c8:	c4 cf       	rjmp	.-120    	; 0x752 <main+0x24>
		else										printf("Unknown command...\n");
     7ca:	84 e1       	ldi	r24, 0x14	; 20
     7cc:	92 e0       	ldi	r25, 0x02	; 2
     7ce:	0e 94 ed 05 	call	0xbda	; 0xbda <puts>
     7d2:	bf cf       	rjmp	.-130    	; 0x752 <main+0x24>
	}
	printf("logout, good bye !!!\n");
     7d4:	87 e2       	ldi	r24, 0x27	; 39
     7d6:	92 e0       	ldi	r25, 0x02	; 2
     7d8:	0e 94 ed 05 	call	0xbda	; 0xbda <puts>
     7dc:	ff cf       	rjmp	.-2      	; 0x7dc <main+0xae>

000007de <__divmodhi4>:
     7de:	97 fb       	bst	r25, 7
     7e0:	09 2e       	mov	r0, r25
     7e2:	07 26       	eor	r0, r23
     7e4:	0a d0       	rcall	.+20     	; 0x7fa <__divmodhi4_neg1>
     7e6:	77 fd       	sbrc	r23, 7
     7e8:	04 d0       	rcall	.+8      	; 0x7f2 <__divmodhi4_neg2>
     7ea:	0c d0       	rcall	.+24     	; 0x804 <__udivmodhi4>
     7ec:	06 d0       	rcall	.+12     	; 0x7fa <__divmodhi4_neg1>
     7ee:	00 20       	and	r0, r0
     7f0:	1a f4       	brpl	.+6      	; 0x7f8 <__divmodhi4_exit>

000007f2 <__divmodhi4_neg2>:
     7f2:	70 95       	com	r23
     7f4:	61 95       	neg	r22
     7f6:	7f 4f       	sbci	r23, 0xFF	; 255

000007f8 <__divmodhi4_exit>:
     7f8:	08 95       	ret

000007fa <__divmodhi4_neg1>:
     7fa:	f6 f7       	brtc	.-4      	; 0x7f8 <__divmodhi4_exit>
     7fc:	90 95       	com	r25
     7fe:	81 95       	neg	r24
     800:	9f 4f       	sbci	r25, 0xFF	; 255
     802:	08 95       	ret

00000804 <__udivmodhi4>:
     804:	aa 1b       	sub	r26, r26
     806:	bb 1b       	sub	r27, r27
     808:	51 e1       	ldi	r21, 0x11	; 17
     80a:	07 c0       	rjmp	.+14     	; 0x81a <__udivmodhi4_ep>

0000080c <__udivmodhi4_loop>:
     80c:	aa 1f       	adc	r26, r26
     80e:	bb 1f       	adc	r27, r27
     810:	a6 17       	cp	r26, r22
     812:	b7 07       	cpc	r27, r23
     814:	10 f0       	brcs	.+4      	; 0x81a <__udivmodhi4_ep>
     816:	a6 1b       	sub	r26, r22
     818:	b7 0b       	sbc	r27, r23

0000081a <__udivmodhi4_ep>:
     81a:	88 1f       	adc	r24, r24
     81c:	99 1f       	adc	r25, r25
     81e:	5a 95       	dec	r21
     820:	a9 f7       	brne	.-22     	; 0x80c <__udivmodhi4_loop>
     822:	80 95       	com	r24
     824:	90 95       	com	r25
     826:	bc 01       	movw	r22, r24
     828:	cd 01       	movw	r24, r26
     82a:	08 95       	ret

0000082c <malloc>:
     82c:	cf 93       	push	r28
     82e:	df 93       	push	r29
     830:	ac 01       	movw	r20, r24
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	91 05       	cpc	r25, r1
     836:	10 f4       	brcc	.+4      	; 0x83c <malloc+0x10>
     838:	42 e0       	ldi	r20, 0x02	; 2
     83a:	50 e0       	ldi	r21, 0x00	; 0
     83c:	e0 91 1f 03 	lds	r30, 0x031F
     840:	f0 91 20 03 	lds	r31, 0x0320
     844:	20 e0       	ldi	r18, 0x00	; 0
     846:	30 e0       	ldi	r19, 0x00	; 0
     848:	a0 e0       	ldi	r26, 0x00	; 0
     84a:	b0 e0       	ldi	r27, 0x00	; 0
     84c:	24 c0       	rjmp	.+72     	; 0x896 <malloc+0x6a>
     84e:	80 81       	ld	r24, Z
     850:	91 81       	ldd	r25, Z+1	; 0x01
     852:	84 17       	cp	r24, r20
     854:	95 07       	cpc	r25, r21
     856:	d0 f0       	brcs	.+52     	; 0x88c <malloc+0x60>
     858:	84 17       	cp	r24, r20
     85a:	95 07       	cpc	r25, r21
     85c:	71 f4       	brne	.+28     	; 0x87a <malloc+0x4e>
     85e:	82 81       	ldd	r24, Z+2	; 0x02
     860:	93 81       	ldd	r25, Z+3	; 0x03
     862:	10 97       	sbiw	r26, 0x00	; 0
     864:	29 f0       	breq	.+10     	; 0x870 <malloc+0x44>
     866:	13 96       	adiw	r26, 0x03	; 3
     868:	9c 93       	st	X, r25
     86a:	8e 93       	st	-X, r24
     86c:	12 97       	sbiw	r26, 0x02	; 2
     86e:	2c c0       	rjmp	.+88     	; 0x8c8 <malloc+0x9c>
     870:	90 93 20 03 	sts	0x0320, r25
     874:	80 93 1f 03 	sts	0x031F, r24
     878:	27 c0       	rjmp	.+78     	; 0x8c8 <malloc+0x9c>
     87a:	21 15       	cp	r18, r1
     87c:	31 05       	cpc	r19, r1
     87e:	19 f0       	breq	.+6      	; 0x886 <malloc+0x5a>
     880:	82 17       	cp	r24, r18
     882:	93 07       	cpc	r25, r19
     884:	18 f4       	brcc	.+6      	; 0x88c <malloc+0x60>
     886:	9c 01       	movw	r18, r24
     888:	bd 01       	movw	r22, r26
     88a:	ef 01       	movw	r28, r30
     88c:	92 81       	ldd	r25, Z+2	; 0x02
     88e:	83 81       	ldd	r24, Z+3	; 0x03
     890:	df 01       	movw	r26, r30
     892:	e9 2f       	mov	r30, r25
     894:	f8 2f       	mov	r31, r24
     896:	30 97       	sbiw	r30, 0x00	; 0
     898:	d1 f6       	brne	.-76     	; 0x84e <malloc+0x22>
     89a:	21 15       	cp	r18, r1
     89c:	31 05       	cpc	r19, r1
     89e:	f9 f0       	breq	.+62     	; 0x8de <malloc+0xb2>
     8a0:	c9 01       	movw	r24, r18
     8a2:	84 1b       	sub	r24, r20
     8a4:	95 0b       	sbc	r25, r21
     8a6:	84 30       	cpi	r24, 0x04	; 4
     8a8:	91 05       	cpc	r25, r1
     8aa:	80 f4       	brcc	.+32     	; 0x8cc <malloc+0xa0>
     8ac:	8a 81       	ldd	r24, Y+2	; 0x02
     8ae:	9b 81       	ldd	r25, Y+3	; 0x03
     8b0:	61 15       	cp	r22, r1
     8b2:	71 05       	cpc	r23, r1
     8b4:	21 f0       	breq	.+8      	; 0x8be <malloc+0x92>
     8b6:	fb 01       	movw	r30, r22
     8b8:	93 83       	std	Z+3, r25	; 0x03
     8ba:	82 83       	std	Z+2, r24	; 0x02
     8bc:	04 c0       	rjmp	.+8      	; 0x8c6 <malloc+0x9a>
     8be:	90 93 20 03 	sts	0x0320, r25
     8c2:	80 93 1f 03 	sts	0x031F, r24
     8c6:	fe 01       	movw	r30, r28
     8c8:	32 96       	adiw	r30, 0x02	; 2
     8ca:	42 c0       	rjmp	.+132    	; 0x950 <malloc+0x124>
     8cc:	fe 01       	movw	r30, r28
     8ce:	e8 0f       	add	r30, r24
     8d0:	f9 1f       	adc	r31, r25
     8d2:	41 93       	st	Z+, r20
     8d4:	51 93       	st	Z+, r21
     8d6:	02 97       	sbiw	r24, 0x02	; 2
     8d8:	99 83       	std	Y+1, r25	; 0x01
     8da:	88 83       	st	Y, r24
     8dc:	39 c0       	rjmp	.+114    	; 0x950 <malloc+0x124>
     8de:	80 91 1d 03 	lds	r24, 0x031D
     8e2:	90 91 1e 03 	lds	r25, 0x031E
     8e6:	00 97       	sbiw	r24, 0x00	; 0
     8e8:	41 f4       	brne	.+16     	; 0x8fa <malloc+0xce>
     8ea:	80 91 8b 02 	lds	r24, 0x028B
     8ee:	90 91 8c 02 	lds	r25, 0x028C
     8f2:	90 93 1e 03 	sts	0x031E, r25
     8f6:	80 93 1d 03 	sts	0x031D, r24
     8fa:	20 91 89 02 	lds	r18, 0x0289
     8fe:	30 91 8a 02 	lds	r19, 0x028A
     902:	21 15       	cp	r18, r1
     904:	31 05       	cpc	r19, r1
     906:	41 f4       	brne	.+16     	; 0x918 <malloc+0xec>
     908:	2d b7       	in	r18, 0x3d	; 61
     90a:	3e b7       	in	r19, 0x3e	; 62
     90c:	80 91 8d 02 	lds	r24, 0x028D
     910:	90 91 8e 02 	lds	r25, 0x028E
     914:	28 1b       	sub	r18, r24
     916:	39 0b       	sbc	r19, r25
     918:	e0 91 1d 03 	lds	r30, 0x031D
     91c:	f0 91 1e 03 	lds	r31, 0x031E
     920:	e2 17       	cp	r30, r18
     922:	f3 07       	cpc	r31, r19
     924:	98 f4       	brcc	.+38     	; 0x94c <malloc+0x120>
     926:	2e 1b       	sub	r18, r30
     928:	3f 0b       	sbc	r19, r31
     92a:	24 17       	cp	r18, r20
     92c:	35 07       	cpc	r19, r21
     92e:	70 f0       	brcs	.+28     	; 0x94c <malloc+0x120>
     930:	ca 01       	movw	r24, r20
     932:	02 96       	adiw	r24, 0x02	; 2
     934:	28 17       	cp	r18, r24
     936:	39 07       	cpc	r19, r25
     938:	48 f0       	brcs	.+18     	; 0x94c <malloc+0x120>
     93a:	8e 0f       	add	r24, r30
     93c:	9f 1f       	adc	r25, r31
     93e:	90 93 1e 03 	sts	0x031E, r25
     942:	80 93 1d 03 	sts	0x031D, r24
     946:	41 93       	st	Z+, r20
     948:	51 93       	st	Z+, r21
     94a:	02 c0       	rjmp	.+4      	; 0x950 <malloc+0x124>
     94c:	e0 e0       	ldi	r30, 0x00	; 0
     94e:	f0 e0       	ldi	r31, 0x00	; 0
     950:	cf 01       	movw	r24, r30
     952:	df 91       	pop	r29
     954:	cf 91       	pop	r28
     956:	08 95       	ret

00000958 <free>:
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	cf 93       	push	r28
     95e:	df 93       	push	r29
     960:	9c 01       	movw	r18, r24
     962:	00 97       	sbiw	r24, 0x00	; 0
     964:	09 f4       	brne	.+2      	; 0x968 <free+0x10>
     966:	8c c0       	rjmp	.+280    	; 0xa80 <free+0x128>
     968:	dc 01       	movw	r26, r24
     96a:	12 97       	sbiw	r26, 0x02	; 2
     96c:	13 96       	adiw	r26, 0x03	; 3
     96e:	1c 92       	st	X, r1
     970:	1e 92       	st	-X, r1
     972:	12 97       	sbiw	r26, 0x02	; 2
     974:	60 91 1f 03 	lds	r22, 0x031F
     978:	70 91 20 03 	lds	r23, 0x0320
     97c:	61 15       	cp	r22, r1
     97e:	71 05       	cpc	r23, r1
     980:	89 f4       	brne	.+34     	; 0x9a4 <free+0x4c>
     982:	8d 91       	ld	r24, X+
     984:	9c 91       	ld	r25, X
     986:	11 97       	sbiw	r26, 0x01	; 1
     988:	82 0f       	add	r24, r18
     98a:	93 1f       	adc	r25, r19
     98c:	20 91 1d 03 	lds	r18, 0x031D
     990:	30 91 1e 03 	lds	r19, 0x031E
     994:	28 17       	cp	r18, r24
     996:	39 07       	cpc	r19, r25
     998:	69 f5       	brne	.+90     	; 0x9f4 <free+0x9c>
     99a:	b0 93 1e 03 	sts	0x031E, r27
     99e:	a0 93 1d 03 	sts	0x031D, r26
     9a2:	6e c0       	rjmp	.+220    	; 0xa80 <free+0x128>
     9a4:	fb 01       	movw	r30, r22
     9a6:	40 e0       	ldi	r20, 0x00	; 0
     9a8:	50 e0       	ldi	r21, 0x00	; 0
     9aa:	01 c0       	rjmp	.+2      	; 0x9ae <free+0x56>
     9ac:	fc 01       	movw	r30, r24
     9ae:	ea 17       	cp	r30, r26
     9b0:	fb 07       	cpc	r31, r27
     9b2:	30 f4       	brcc	.+12     	; 0x9c0 <free+0x68>
     9b4:	82 81       	ldd	r24, Z+2	; 0x02
     9b6:	93 81       	ldd	r25, Z+3	; 0x03
     9b8:	af 01       	movw	r20, r30
     9ba:	00 97       	sbiw	r24, 0x00	; 0
     9bc:	b9 f7       	brne	.-18     	; 0x9ac <free+0x54>
     9be:	1f c0       	rjmp	.+62     	; 0x9fe <free+0xa6>
     9c0:	e9 01       	movw	r28, r18
     9c2:	22 97       	sbiw	r28, 0x02	; 2
     9c4:	fb 83       	std	Y+3, r31	; 0x03
     9c6:	ea 83       	std	Y+2, r30	; 0x02
     9c8:	08 81       	ld	r16, Y
     9ca:	19 81       	ldd	r17, Y+1	; 0x01
     9cc:	c9 01       	movw	r24, r18
     9ce:	80 0f       	add	r24, r16
     9d0:	91 1f       	adc	r25, r17
     9d2:	8e 17       	cp	r24, r30
     9d4:	9f 07       	cpc	r25, r31
     9d6:	59 f4       	brne	.+22     	; 0x9ee <free+0x96>
     9d8:	80 81       	ld	r24, Z
     9da:	91 81       	ldd	r25, Z+1	; 0x01
     9dc:	80 0f       	add	r24, r16
     9de:	91 1f       	adc	r25, r17
     9e0:	02 96       	adiw	r24, 0x02	; 2
     9e2:	99 83       	std	Y+1, r25	; 0x01
     9e4:	88 83       	st	Y, r24
     9e6:	82 81       	ldd	r24, Z+2	; 0x02
     9e8:	93 81       	ldd	r25, Z+3	; 0x03
     9ea:	9b 83       	std	Y+3, r25	; 0x03
     9ec:	8a 83       	std	Y+2, r24	; 0x02
     9ee:	41 15       	cp	r20, r1
     9f0:	51 05       	cpc	r21, r1
     9f2:	29 f4       	brne	.+10     	; 0x9fe <free+0xa6>
     9f4:	b0 93 20 03 	sts	0x0320, r27
     9f8:	a0 93 1f 03 	sts	0x031F, r26
     9fc:	41 c0       	rjmp	.+130    	; 0xa80 <free+0x128>
     9fe:	fa 01       	movw	r30, r20
     a00:	b3 83       	std	Z+3, r27	; 0x03
     a02:	a2 83       	std	Z+2, r26	; 0x02
     a04:	c1 91       	ld	r28, Z+
     a06:	d1 91       	ld	r29, Z+
     a08:	ec 0f       	add	r30, r28
     a0a:	fd 1f       	adc	r31, r29
     a0c:	ae 17       	cp	r26, r30
     a0e:	bf 07       	cpc	r27, r31
     a10:	81 f4       	brne	.+32     	; 0xa32 <free+0xda>
     a12:	f9 01       	movw	r30, r18
     a14:	92 91       	ld	r25, -Z
     a16:	82 91       	ld	r24, -Z
     a18:	8c 0f       	add	r24, r28
     a1a:	9d 1f       	adc	r25, r29
     a1c:	02 96       	adiw	r24, 0x02	; 2
     a1e:	da 01       	movw	r26, r20
     a20:	11 96       	adiw	r26, 0x01	; 1
     a22:	9c 93       	st	X, r25
     a24:	8e 93       	st	-X, r24
     a26:	82 81       	ldd	r24, Z+2	; 0x02
     a28:	93 81       	ldd	r25, Z+3	; 0x03
     a2a:	13 96       	adiw	r26, 0x03	; 3
     a2c:	9c 93       	st	X, r25
     a2e:	8e 93       	st	-X, r24
     a30:	12 97       	sbiw	r26, 0x02	; 2
     a32:	e0 e0       	ldi	r30, 0x00	; 0
     a34:	f0 e0       	ldi	r31, 0x00	; 0
     a36:	02 c0       	rjmp	.+4      	; 0xa3c <free+0xe4>
     a38:	fb 01       	movw	r30, r22
     a3a:	bc 01       	movw	r22, r24
     a3c:	db 01       	movw	r26, r22
     a3e:	12 96       	adiw	r26, 0x02	; 2
     a40:	8d 91       	ld	r24, X+
     a42:	9c 91       	ld	r25, X
     a44:	13 97       	sbiw	r26, 0x03	; 3
     a46:	00 97       	sbiw	r24, 0x00	; 0
     a48:	b9 f7       	brne	.-18     	; 0xa38 <free+0xe0>
     a4a:	cb 01       	movw	r24, r22
     a4c:	02 96       	adiw	r24, 0x02	; 2
     a4e:	2d 91       	ld	r18, X+
     a50:	3c 91       	ld	r19, X
     a52:	11 97       	sbiw	r26, 0x01	; 1
     a54:	82 0f       	add	r24, r18
     a56:	93 1f       	adc	r25, r19
     a58:	20 91 1d 03 	lds	r18, 0x031D
     a5c:	30 91 1e 03 	lds	r19, 0x031E
     a60:	28 17       	cp	r18, r24
     a62:	39 07       	cpc	r19, r25
     a64:	69 f4       	brne	.+26     	; 0xa80 <free+0x128>
     a66:	30 97       	sbiw	r30, 0x00	; 0
     a68:	29 f4       	brne	.+10     	; 0xa74 <free+0x11c>
     a6a:	10 92 20 03 	sts	0x0320, r1
     a6e:	10 92 1f 03 	sts	0x031F, r1
     a72:	02 c0       	rjmp	.+4      	; 0xa78 <free+0x120>
     a74:	13 82       	std	Z+3, r1	; 0x03
     a76:	12 82       	std	Z+2, r1	; 0x02
     a78:	70 93 1e 03 	sts	0x031E, r23
     a7c:	60 93 1d 03 	sts	0x031D, r22
     a80:	df 91       	pop	r29
     a82:	cf 91       	pop	r28
     a84:	1f 91       	pop	r17
     a86:	0f 91       	pop	r16
     a88:	08 95       	ret

00000a8a <atoi>:
     a8a:	fc 01       	movw	r30, r24
     a8c:	88 27       	eor	r24, r24
     a8e:	99 27       	eor	r25, r25
     a90:	e8 94       	clt
     a92:	21 91       	ld	r18, Z+
     a94:	20 32       	cpi	r18, 0x20	; 32
     a96:	e9 f3       	breq	.-6      	; 0xa92 <atoi+0x8>
     a98:	29 30       	cpi	r18, 0x09	; 9
     a9a:	10 f0       	brcs	.+4      	; 0xaa0 <atoi+0x16>
     a9c:	2e 30       	cpi	r18, 0x0E	; 14
     a9e:	c8 f3       	brcs	.-14     	; 0xa92 <atoi+0x8>
     aa0:	2b 32       	cpi	r18, 0x2B	; 43
     aa2:	41 f0       	breq	.+16     	; 0xab4 <atoi+0x2a>
     aa4:	2d 32       	cpi	r18, 0x2D	; 45
     aa6:	39 f4       	brne	.+14     	; 0xab6 <atoi+0x2c>
     aa8:	68 94       	set
     aaa:	04 c0       	rjmp	.+8      	; 0xab4 <atoi+0x2a>
     aac:	0e 94 98 05 	call	0xb30	; 0xb30 <__mulhi_const_10>
     ab0:	82 0f       	add	r24, r18
     ab2:	91 1d       	adc	r25, r1
     ab4:	21 91       	ld	r18, Z+
     ab6:	20 53       	subi	r18, 0x30	; 48
     ab8:	2a 30       	cpi	r18, 0x0A	; 10
     aba:	c0 f3       	brcs	.-16     	; 0xaac <atoi+0x22>
     abc:	1e f4       	brtc	.+6      	; 0xac4 <atoi+0x3a>
     abe:	90 95       	com	r25
     ac0:	81 95       	neg	r24
     ac2:	9f 4f       	sbci	r25, 0xFF	; 255
     ac4:	08 95       	ret

00000ac6 <strtok>:
     ac6:	42 e9       	ldi	r20, 0x92	; 146
     ac8:	52 e0       	ldi	r21, 0x02	; 2
     aca:	0e 94 71 05 	call	0xae2	; 0xae2 <strtok_r>
     ace:	08 95       	ret

00000ad0 <strcmp>:
     ad0:	fb 01       	movw	r30, r22
     ad2:	dc 01       	movw	r26, r24
     ad4:	8d 91       	ld	r24, X+
     ad6:	01 90       	ld	r0, Z+
     ad8:	80 19       	sub	r24, r0
     ada:	01 10       	cpse	r0, r1
     adc:	d9 f3       	breq	.-10     	; 0xad4 <strcmp+0x4>
     ade:	99 0b       	sbc	r25, r25
     ae0:	08 95       	ret

00000ae2 <strtok_r>:
     ae2:	fa 01       	movw	r30, r20
     ae4:	a1 91       	ld	r26, Z+
     ae6:	b0 81       	ld	r27, Z
     ae8:	00 97       	sbiw	r24, 0x00	; 0
     aea:	19 f4       	brne	.+6      	; 0xaf2 <strtok_r+0x10>
     aec:	10 97       	sbiw	r26, 0x00	; 0
     aee:	e1 f0       	breq	.+56     	; 0xb28 <strtok_r+0x46>
     af0:	cd 01       	movw	r24, r26
     af2:	dc 01       	movw	r26, r24
     af4:	cd 01       	movw	r24, r26
     af6:	0d 90       	ld	r0, X+
     af8:	00 20       	and	r0, r0
     afa:	11 f4       	brne	.+4      	; 0xb00 <strtok_r+0x1e>
     afc:	c0 01       	movw	r24, r0
     afe:	13 c0       	rjmp	.+38     	; 0xb26 <strtok_r+0x44>
     b00:	fb 01       	movw	r30, r22
     b02:	21 91       	ld	r18, Z+
     b04:	22 23       	and	r18, r18
     b06:	19 f0       	breq	.+6      	; 0xb0e <strtok_r+0x2c>
     b08:	20 15       	cp	r18, r0
     b0a:	d9 f7       	brne	.-10     	; 0xb02 <strtok_r+0x20>
     b0c:	f3 cf       	rjmp	.-26     	; 0xaf4 <strtok_r+0x12>
     b0e:	fb 01       	movw	r30, r22
     b10:	21 91       	ld	r18, Z+
     b12:	20 15       	cp	r18, r0
     b14:	19 f4       	brne	.+6      	; 0xb1c <strtok_r+0x3a>
     b16:	1e 92       	st	-X, r1
     b18:	11 96       	adiw	r26, 0x01	; 1
     b1a:	06 c0       	rjmp	.+12     	; 0xb28 <strtok_r+0x46>
     b1c:	22 23       	and	r18, r18
     b1e:	c1 f7       	brne	.-16     	; 0xb10 <strtok_r+0x2e>
     b20:	0d 90       	ld	r0, X+
     b22:	00 20       	and	r0, r0
     b24:	a1 f7       	brne	.-24     	; 0xb0e <strtok_r+0x2c>
     b26:	d0 01       	movw	r26, r0
     b28:	fa 01       	movw	r30, r20
     b2a:	a1 93       	st	Z+, r26
     b2c:	b0 83       	st	Z, r27
     b2e:	08 95       	ret

00000b30 <__mulhi_const_10>:
     b30:	7a e0       	ldi	r23, 0x0A	; 10
     b32:	97 9f       	mul	r25, r23
     b34:	90 2d       	mov	r25, r0
     b36:	87 9f       	mul	r24, r23
     b38:	80 2d       	mov	r24, r0
     b3a:	91 0d       	add	r25, r1
     b3c:	11 24       	eor	r1, r1
     b3e:	08 95       	ret

00000b40 <fgets>:
     b40:	cf 92       	push	r12
     b42:	df 92       	push	r13
     b44:	ef 92       	push	r14
     b46:	ff 92       	push	r15
     b48:	0f 93       	push	r16
     b4a:	1f 93       	push	r17
     b4c:	cf 93       	push	r28
     b4e:	df 93       	push	r29
     b50:	8c 01       	movw	r16, r24
     b52:	6a 01       	movw	r12, r20
     b54:	fa 01       	movw	r30, r20
     b56:	83 81       	ldd	r24, Z+3	; 0x03
     b58:	80 ff       	sbrs	r24, 0
     b5a:	1a c0       	rjmp	.+52     	; 0xb90 <fgets+0x50>
     b5c:	16 16       	cp	r1, r22
     b5e:	17 06       	cpc	r1, r23
     b60:	bc f4       	brge	.+46     	; 0xb90 <fgets+0x50>
     b62:	7b 01       	movw	r14, r22
     b64:	e8 01       	movw	r28, r16
     b66:	0e c0       	rjmp	.+28     	; 0xb84 <fgets+0x44>
     b68:	c6 01       	movw	r24, r12
     b6a:	0e 94 38 08 	call	0x1070	; 0x1070 <fgetc>
     b6e:	ff ef       	ldi	r31, 0xFF	; 255
     b70:	8f 3f       	cpi	r24, 0xFF	; 255
     b72:	9f 07       	cpc	r25, r31
     b74:	69 f0       	breq	.+26     	; 0xb90 <fgets+0x50>
     b76:	89 93       	st	Y+, r24
     b78:	08 94       	sec
     b7a:	e1 08       	sbc	r14, r1
     b7c:	f1 08       	sbc	r15, r1
     b7e:	8a 30       	cpi	r24, 0x0A	; 10
     b80:	91 05       	cpc	r25, r1
     b82:	21 f0       	breq	.+8      	; 0xb8c <fgets+0x4c>
     b84:	21 e0       	ldi	r18, 0x01	; 1
     b86:	e2 16       	cp	r14, r18
     b88:	f1 04       	cpc	r15, r1
     b8a:	71 f7       	brne	.-36     	; 0xb68 <fgets+0x28>
     b8c:	18 82       	st	Y, r1
     b8e:	02 c0       	rjmp	.+4      	; 0xb94 <fgets+0x54>
     b90:	00 e0       	ldi	r16, 0x00	; 0
     b92:	10 e0       	ldi	r17, 0x00	; 0
     b94:	c8 01       	movw	r24, r16
     b96:	df 91       	pop	r29
     b98:	cf 91       	pop	r28
     b9a:	1f 91       	pop	r17
     b9c:	0f 91       	pop	r16
     b9e:	ff 90       	pop	r15
     ba0:	ef 90       	pop	r14
     ba2:	df 90       	pop	r13
     ba4:	cf 90       	pop	r12
     ba6:	08 95       	ret

00000ba8 <printf>:
     ba8:	cf 93       	push	r28
     baa:	df 93       	push	r29
     bac:	cd b7       	in	r28, 0x3d	; 61
     bae:	de b7       	in	r29, 0x3e	; 62
     bb0:	fe 01       	movw	r30, r28
     bb2:	36 96       	adiw	r30, 0x06	; 6
     bb4:	61 91       	ld	r22, Z+
     bb6:	71 91       	ld	r23, Z+
     bb8:	80 91 23 03 	lds	r24, 0x0323
     bbc:	90 91 24 03 	lds	r25, 0x0324
     bc0:	af 01       	movw	r20, r30
     bc2:	0e 94 1b 06 	call	0xc36	; 0xc36 <vfprintf>
     bc6:	df 91       	pop	r29
     bc8:	cf 91       	pop	r28
     bca:	08 95       	ret

00000bcc <putchar>:
     bcc:	60 91 23 03 	lds	r22, 0x0323
     bd0:	70 91 24 03 	lds	r23, 0x0324
     bd4:	0e 94 78 08 	call	0x10f0	; 0x10f0 <fputc>
     bd8:	08 95       	ret

00000bda <puts>:
     bda:	0f 93       	push	r16
     bdc:	1f 93       	push	r17
     bde:	cf 93       	push	r28
     be0:	df 93       	push	r29
     be2:	8c 01       	movw	r16, r24
     be4:	e0 91 23 03 	lds	r30, 0x0323
     be8:	f0 91 24 03 	lds	r31, 0x0324
     bec:	83 81       	ldd	r24, Z+3	; 0x03
     bee:	81 ff       	sbrs	r24, 1
     bf0:	1a c0       	rjmp	.+52     	; 0xc26 <puts+0x4c>
     bf2:	c0 e0       	ldi	r28, 0x00	; 0
     bf4:	d0 e0       	ldi	r29, 0x00	; 0
     bf6:	05 c0       	rjmp	.+10     	; 0xc02 <puts+0x28>
     bf8:	19 95       	eicall
     bfa:	00 97       	sbiw	r24, 0x00	; 0
     bfc:	11 f0       	breq	.+4      	; 0xc02 <puts+0x28>
     bfe:	cf ef       	ldi	r28, 0xFF	; 255
     c00:	df ef       	ldi	r29, 0xFF	; 255
     c02:	f8 01       	movw	r30, r16
     c04:	81 91       	ld	r24, Z+
     c06:	8f 01       	movw	r16, r30
     c08:	60 91 23 03 	lds	r22, 0x0323
     c0c:	70 91 24 03 	lds	r23, 0x0324
     c10:	db 01       	movw	r26, r22
     c12:	18 96       	adiw	r26, 0x08	; 8
     c14:	ed 91       	ld	r30, X+
     c16:	fc 91       	ld	r31, X
     c18:	19 97       	sbiw	r26, 0x09	; 9
     c1a:	88 23       	and	r24, r24
     c1c:	69 f7       	brne	.-38     	; 0xbf8 <puts+0x1e>
     c1e:	8a e0       	ldi	r24, 0x0A	; 10
     c20:	19 95       	eicall
     c22:	00 97       	sbiw	r24, 0x00	; 0
     c24:	11 f0       	breq	.+4      	; 0xc2a <puts+0x50>
     c26:	cf ef       	ldi	r28, 0xFF	; 255
     c28:	df ef       	ldi	r29, 0xFF	; 255
     c2a:	ce 01       	movw	r24, r28
     c2c:	df 91       	pop	r29
     c2e:	cf 91       	pop	r28
     c30:	1f 91       	pop	r17
     c32:	0f 91       	pop	r16
     c34:	08 95       	ret

00000c36 <vfprintf>:
     c36:	2f 92       	push	r2
     c38:	3f 92       	push	r3
     c3a:	4f 92       	push	r4
     c3c:	5f 92       	push	r5
     c3e:	6f 92       	push	r6
     c40:	7f 92       	push	r7
     c42:	8f 92       	push	r8
     c44:	9f 92       	push	r9
     c46:	af 92       	push	r10
     c48:	bf 92       	push	r11
     c4a:	cf 92       	push	r12
     c4c:	df 92       	push	r13
     c4e:	ef 92       	push	r14
     c50:	ff 92       	push	r15
     c52:	0f 93       	push	r16
     c54:	1f 93       	push	r17
     c56:	cf 93       	push	r28
     c58:	df 93       	push	r29
     c5a:	cd b7       	in	r28, 0x3d	; 61
     c5c:	de b7       	in	r29, 0x3e	; 62
     c5e:	2d 97       	sbiw	r28, 0x0d	; 13
     c60:	0f b6       	in	r0, 0x3f	; 63
     c62:	f8 94       	cli
     c64:	de bf       	out	0x3e, r29	; 62
     c66:	0f be       	out	0x3f, r0	; 63
     c68:	cd bf       	out	0x3d, r28	; 61
     c6a:	3c 01       	movw	r6, r24
     c6c:	7d 87       	std	Y+13, r23	; 0x0d
     c6e:	6c 87       	std	Y+12, r22	; 0x0c
     c70:	5a 01       	movw	r10, r20
     c72:	fc 01       	movw	r30, r24
     c74:	17 82       	std	Z+7, r1	; 0x07
     c76:	16 82       	std	Z+6, r1	; 0x06
     c78:	83 81       	ldd	r24, Z+3	; 0x03
     c7a:	81 ff       	sbrs	r24, 1
     c7c:	c8 c1       	rjmp	.+912    	; 0x100e <vfprintf+0x3d8>
     c7e:	2e 01       	movw	r4, r28
     c80:	08 94       	sec
     c82:	41 1c       	adc	r4, r1
     c84:	51 1c       	adc	r5, r1
     c86:	f3 01       	movw	r30, r6
     c88:	93 81       	ldd	r25, Z+3	; 0x03
     c8a:	ec 85       	ldd	r30, Y+12	; 0x0c
     c8c:	fd 85       	ldd	r31, Y+13	; 0x0d
     c8e:	93 fd       	sbrc	r25, 3
     c90:	85 91       	lpm	r24, Z+
     c92:	93 ff       	sbrs	r25, 3
     c94:	81 91       	ld	r24, Z+
     c96:	fd 87       	std	Y+13, r31	; 0x0d
     c98:	ec 87       	std	Y+12, r30	; 0x0c
     c9a:	88 23       	and	r24, r24
     c9c:	09 f4       	brne	.+2      	; 0xca0 <vfprintf+0x6a>
     c9e:	b3 c1       	rjmp	.+870    	; 0x1006 <vfprintf+0x3d0>
     ca0:	85 32       	cpi	r24, 0x25	; 37
     ca2:	41 f4       	brne	.+16     	; 0xcb4 <vfprintf+0x7e>
     ca4:	93 fd       	sbrc	r25, 3
     ca6:	85 91       	lpm	r24, Z+
     ca8:	93 ff       	sbrs	r25, 3
     caa:	81 91       	ld	r24, Z+
     cac:	fd 87       	std	Y+13, r31	; 0x0d
     cae:	ec 87       	std	Y+12, r30	; 0x0c
     cb0:	85 32       	cpi	r24, 0x25	; 37
     cb2:	29 f4       	brne	.+10     	; 0xcbe <vfprintf+0x88>
     cb4:	90 e0       	ldi	r25, 0x00	; 0
     cb6:	b3 01       	movw	r22, r6
     cb8:	0e 94 78 08 	call	0x10f0	; 0x10f0 <fputc>
     cbc:	e4 cf       	rjmp	.-56     	; 0xc86 <vfprintf+0x50>
     cbe:	ff 24       	eor	r15, r15
     cc0:	ee 24       	eor	r14, r14
     cc2:	10 e0       	ldi	r17, 0x00	; 0
     cc4:	10 32       	cpi	r17, 0x20	; 32
     cc6:	b0 f4       	brcc	.+44     	; 0xcf4 <vfprintf+0xbe>
     cc8:	8b 32       	cpi	r24, 0x2B	; 43
     cca:	69 f0       	breq	.+26     	; 0xce6 <vfprintf+0xb0>
     ccc:	8c 32       	cpi	r24, 0x2C	; 44
     cce:	28 f4       	brcc	.+10     	; 0xcda <vfprintf+0xa4>
     cd0:	80 32       	cpi	r24, 0x20	; 32
     cd2:	51 f0       	breq	.+20     	; 0xce8 <vfprintf+0xb2>
     cd4:	83 32       	cpi	r24, 0x23	; 35
     cd6:	71 f4       	brne	.+28     	; 0xcf4 <vfprintf+0xbe>
     cd8:	0b c0       	rjmp	.+22     	; 0xcf0 <vfprintf+0xba>
     cda:	8d 32       	cpi	r24, 0x2D	; 45
     cdc:	39 f0       	breq	.+14     	; 0xcec <vfprintf+0xb6>
     cde:	80 33       	cpi	r24, 0x30	; 48
     ce0:	49 f4       	brne	.+18     	; 0xcf4 <vfprintf+0xbe>
     ce2:	11 60       	ori	r17, 0x01	; 1
     ce4:	2c c0       	rjmp	.+88     	; 0xd3e <vfprintf+0x108>
     ce6:	12 60       	ori	r17, 0x02	; 2
     ce8:	14 60       	ori	r17, 0x04	; 4
     cea:	29 c0       	rjmp	.+82     	; 0xd3e <vfprintf+0x108>
     cec:	18 60       	ori	r17, 0x08	; 8
     cee:	27 c0       	rjmp	.+78     	; 0xd3e <vfprintf+0x108>
     cf0:	10 61       	ori	r17, 0x10	; 16
     cf2:	25 c0       	rjmp	.+74     	; 0xd3e <vfprintf+0x108>
     cf4:	17 fd       	sbrc	r17, 7
     cf6:	2e c0       	rjmp	.+92     	; 0xd54 <vfprintf+0x11e>
     cf8:	28 2f       	mov	r18, r24
     cfa:	20 53       	subi	r18, 0x30	; 48
     cfc:	2a 30       	cpi	r18, 0x0A	; 10
     cfe:	98 f4       	brcc	.+38     	; 0xd26 <vfprintf+0xf0>
     d00:	16 ff       	sbrs	r17, 6
     d02:	08 c0       	rjmp	.+16     	; 0xd14 <vfprintf+0xde>
     d04:	8f 2d       	mov	r24, r15
     d06:	88 0f       	add	r24, r24
     d08:	f8 2e       	mov	r15, r24
     d0a:	ff 0c       	add	r15, r15
     d0c:	ff 0c       	add	r15, r15
     d0e:	f8 0e       	add	r15, r24
     d10:	f2 0e       	add	r15, r18
     d12:	15 c0       	rjmp	.+42     	; 0xd3e <vfprintf+0x108>
     d14:	8e 2d       	mov	r24, r14
     d16:	88 0f       	add	r24, r24
     d18:	e8 2e       	mov	r14, r24
     d1a:	ee 0c       	add	r14, r14
     d1c:	ee 0c       	add	r14, r14
     d1e:	e8 0e       	add	r14, r24
     d20:	e2 0e       	add	r14, r18
     d22:	10 62       	ori	r17, 0x20	; 32
     d24:	0c c0       	rjmp	.+24     	; 0xd3e <vfprintf+0x108>
     d26:	8e 32       	cpi	r24, 0x2E	; 46
     d28:	21 f4       	brne	.+8      	; 0xd32 <vfprintf+0xfc>
     d2a:	16 fd       	sbrc	r17, 6
     d2c:	6c c1       	rjmp	.+728    	; 0x1006 <vfprintf+0x3d0>
     d2e:	10 64       	ori	r17, 0x40	; 64
     d30:	06 c0       	rjmp	.+12     	; 0xd3e <vfprintf+0x108>
     d32:	8c 36       	cpi	r24, 0x6C	; 108
     d34:	11 f4       	brne	.+4      	; 0xd3a <vfprintf+0x104>
     d36:	10 68       	ori	r17, 0x80	; 128
     d38:	02 c0       	rjmp	.+4      	; 0xd3e <vfprintf+0x108>
     d3a:	88 36       	cpi	r24, 0x68	; 104
     d3c:	59 f4       	brne	.+22     	; 0xd54 <vfprintf+0x11e>
     d3e:	ec 85       	ldd	r30, Y+12	; 0x0c
     d40:	fd 85       	ldd	r31, Y+13	; 0x0d
     d42:	93 fd       	sbrc	r25, 3
     d44:	85 91       	lpm	r24, Z+
     d46:	93 ff       	sbrs	r25, 3
     d48:	81 91       	ld	r24, Z+
     d4a:	fd 87       	std	Y+13, r31	; 0x0d
     d4c:	ec 87       	std	Y+12, r30	; 0x0c
     d4e:	88 23       	and	r24, r24
     d50:	09 f0       	breq	.+2      	; 0xd54 <vfprintf+0x11e>
     d52:	b8 cf       	rjmp	.-144    	; 0xcc4 <vfprintf+0x8e>
     d54:	98 2f       	mov	r25, r24
     d56:	95 54       	subi	r25, 0x45	; 69
     d58:	93 30       	cpi	r25, 0x03	; 3
     d5a:	18 f0       	brcs	.+6      	; 0xd62 <vfprintf+0x12c>
     d5c:	90 52       	subi	r25, 0x20	; 32
     d5e:	93 30       	cpi	r25, 0x03	; 3
     d60:	38 f4       	brcc	.+14     	; 0xd70 <vfprintf+0x13a>
     d62:	24 e0       	ldi	r18, 0x04	; 4
     d64:	30 e0       	ldi	r19, 0x00	; 0
     d66:	a2 0e       	add	r10, r18
     d68:	b3 1e       	adc	r11, r19
     d6a:	3f e3       	ldi	r19, 0x3F	; 63
     d6c:	39 83       	std	Y+1, r19	; 0x01
     d6e:	0f c0       	rjmp	.+30     	; 0xd8e <vfprintf+0x158>
     d70:	83 36       	cpi	r24, 0x63	; 99
     d72:	31 f0       	breq	.+12     	; 0xd80 <vfprintf+0x14a>
     d74:	83 37       	cpi	r24, 0x73	; 115
     d76:	81 f0       	breq	.+32     	; 0xd98 <vfprintf+0x162>
     d78:	83 35       	cpi	r24, 0x53	; 83
     d7a:	09 f0       	breq	.+2      	; 0xd7e <vfprintf+0x148>
     d7c:	5a c0       	rjmp	.+180    	; 0xe32 <vfprintf+0x1fc>
     d7e:	22 c0       	rjmp	.+68     	; 0xdc4 <vfprintf+0x18e>
     d80:	f5 01       	movw	r30, r10
     d82:	80 81       	ld	r24, Z
     d84:	89 83       	std	Y+1, r24	; 0x01
     d86:	22 e0       	ldi	r18, 0x02	; 2
     d88:	30 e0       	ldi	r19, 0x00	; 0
     d8a:	a2 0e       	add	r10, r18
     d8c:	b3 1e       	adc	r11, r19
     d8e:	21 e0       	ldi	r18, 0x01	; 1
     d90:	c2 2e       	mov	r12, r18
     d92:	d1 2c       	mov	r13, r1
     d94:	42 01       	movw	r8, r4
     d96:	14 c0       	rjmp	.+40     	; 0xdc0 <vfprintf+0x18a>
     d98:	92 e0       	ldi	r25, 0x02	; 2
     d9a:	29 2e       	mov	r2, r25
     d9c:	31 2c       	mov	r3, r1
     d9e:	2a 0c       	add	r2, r10
     da0:	3b 1c       	adc	r3, r11
     da2:	f5 01       	movw	r30, r10
     da4:	80 80       	ld	r8, Z
     da6:	91 80       	ldd	r9, Z+1	; 0x01
     da8:	16 ff       	sbrs	r17, 6
     daa:	03 c0       	rjmp	.+6      	; 0xdb2 <vfprintf+0x17c>
     dac:	6f 2d       	mov	r22, r15
     dae:	70 e0       	ldi	r23, 0x00	; 0
     db0:	02 c0       	rjmp	.+4      	; 0xdb6 <vfprintf+0x180>
     db2:	6f ef       	ldi	r22, 0xFF	; 255
     db4:	7f ef       	ldi	r23, 0xFF	; 255
     db6:	c4 01       	movw	r24, r8
     db8:	0e 94 2d 08 	call	0x105a	; 0x105a <strnlen>
     dbc:	6c 01       	movw	r12, r24
     dbe:	51 01       	movw	r10, r2
     dc0:	1f 77       	andi	r17, 0x7F	; 127
     dc2:	15 c0       	rjmp	.+42     	; 0xdee <vfprintf+0x1b8>
     dc4:	82 e0       	ldi	r24, 0x02	; 2
     dc6:	28 2e       	mov	r2, r24
     dc8:	31 2c       	mov	r3, r1
     dca:	2a 0c       	add	r2, r10
     dcc:	3b 1c       	adc	r3, r11
     dce:	f5 01       	movw	r30, r10
     dd0:	80 80       	ld	r8, Z
     dd2:	91 80       	ldd	r9, Z+1	; 0x01
     dd4:	16 ff       	sbrs	r17, 6
     dd6:	03 c0       	rjmp	.+6      	; 0xdde <vfprintf+0x1a8>
     dd8:	6f 2d       	mov	r22, r15
     dda:	70 e0       	ldi	r23, 0x00	; 0
     ddc:	02 c0       	rjmp	.+4      	; 0xde2 <vfprintf+0x1ac>
     dde:	6f ef       	ldi	r22, 0xFF	; 255
     de0:	7f ef       	ldi	r23, 0xFF	; 255
     de2:	c4 01       	movw	r24, r8
     de4:	0e 94 22 08 	call	0x1044	; 0x1044 <strnlen_P>
     de8:	6c 01       	movw	r12, r24
     dea:	10 68       	ori	r17, 0x80	; 128
     dec:	51 01       	movw	r10, r2
     dee:	13 fd       	sbrc	r17, 3
     df0:	1c c0       	rjmp	.+56     	; 0xe2a <vfprintf+0x1f4>
     df2:	06 c0       	rjmp	.+12     	; 0xe00 <vfprintf+0x1ca>
     df4:	80 e2       	ldi	r24, 0x20	; 32
     df6:	90 e0       	ldi	r25, 0x00	; 0
     df8:	b3 01       	movw	r22, r6
     dfa:	0e 94 78 08 	call	0x10f0	; 0x10f0 <fputc>
     dfe:	ea 94       	dec	r14
     e00:	8e 2d       	mov	r24, r14
     e02:	90 e0       	ldi	r25, 0x00	; 0
     e04:	c8 16       	cp	r12, r24
     e06:	d9 06       	cpc	r13, r25
     e08:	a8 f3       	brcs	.-22     	; 0xdf4 <vfprintf+0x1be>
     e0a:	0f c0       	rjmp	.+30     	; 0xe2a <vfprintf+0x1f4>
     e0c:	f4 01       	movw	r30, r8
     e0e:	17 fd       	sbrc	r17, 7
     e10:	85 91       	lpm	r24, Z+
     e12:	17 ff       	sbrs	r17, 7
     e14:	81 91       	ld	r24, Z+
     e16:	4f 01       	movw	r8, r30
     e18:	90 e0       	ldi	r25, 0x00	; 0
     e1a:	b3 01       	movw	r22, r6
     e1c:	0e 94 78 08 	call	0x10f0	; 0x10f0 <fputc>
     e20:	e1 10       	cpse	r14, r1
     e22:	ea 94       	dec	r14
     e24:	08 94       	sec
     e26:	c1 08       	sbc	r12, r1
     e28:	d1 08       	sbc	r13, r1
     e2a:	c1 14       	cp	r12, r1
     e2c:	d1 04       	cpc	r13, r1
     e2e:	71 f7       	brne	.-36     	; 0xe0c <vfprintf+0x1d6>
     e30:	e7 c0       	rjmp	.+462    	; 0x1000 <vfprintf+0x3ca>
     e32:	84 36       	cpi	r24, 0x64	; 100
     e34:	11 f0       	breq	.+4      	; 0xe3a <vfprintf+0x204>
     e36:	89 36       	cpi	r24, 0x69	; 105
     e38:	51 f5       	brne	.+84     	; 0xe8e <vfprintf+0x258>
     e3a:	f5 01       	movw	r30, r10
     e3c:	17 ff       	sbrs	r17, 7
     e3e:	07 c0       	rjmp	.+14     	; 0xe4e <vfprintf+0x218>
     e40:	80 81       	ld	r24, Z
     e42:	91 81       	ldd	r25, Z+1	; 0x01
     e44:	a2 81       	ldd	r26, Z+2	; 0x02
     e46:	b3 81       	ldd	r27, Z+3	; 0x03
     e48:	24 e0       	ldi	r18, 0x04	; 4
     e4a:	30 e0       	ldi	r19, 0x00	; 0
     e4c:	08 c0       	rjmp	.+16     	; 0xe5e <vfprintf+0x228>
     e4e:	80 81       	ld	r24, Z
     e50:	91 81       	ldd	r25, Z+1	; 0x01
     e52:	aa 27       	eor	r26, r26
     e54:	97 fd       	sbrc	r25, 7
     e56:	a0 95       	com	r26
     e58:	ba 2f       	mov	r27, r26
     e5a:	22 e0       	ldi	r18, 0x02	; 2
     e5c:	30 e0       	ldi	r19, 0x00	; 0
     e5e:	a2 0e       	add	r10, r18
     e60:	b3 1e       	adc	r11, r19
     e62:	01 2f       	mov	r16, r17
     e64:	0f 76       	andi	r16, 0x6F	; 111
     e66:	b7 ff       	sbrs	r27, 7
     e68:	08 c0       	rjmp	.+16     	; 0xe7a <vfprintf+0x244>
     e6a:	b0 95       	com	r27
     e6c:	a0 95       	com	r26
     e6e:	90 95       	com	r25
     e70:	81 95       	neg	r24
     e72:	9f 4f       	sbci	r25, 0xFF	; 255
     e74:	af 4f       	sbci	r26, 0xFF	; 255
     e76:	bf 4f       	sbci	r27, 0xFF	; 255
     e78:	00 68       	ori	r16, 0x80	; 128
     e7a:	bc 01       	movw	r22, r24
     e7c:	cd 01       	movw	r24, r26
     e7e:	a2 01       	movw	r20, r4
     e80:	2a e0       	ldi	r18, 0x0A	; 10
     e82:	30 e0       	ldi	r19, 0x00	; 0
     e84:	0e 94 a4 08 	call	0x1148	; 0x1148 <__ultoa_invert>
     e88:	d8 2e       	mov	r13, r24
     e8a:	d4 18       	sub	r13, r4
     e8c:	3f c0       	rjmp	.+126    	; 0xf0c <vfprintf+0x2d6>
     e8e:	85 37       	cpi	r24, 0x75	; 117
     e90:	21 f4       	brne	.+8      	; 0xe9a <vfprintf+0x264>
     e92:	1f 7e       	andi	r17, 0xEF	; 239
     e94:	2a e0       	ldi	r18, 0x0A	; 10
     e96:	30 e0       	ldi	r19, 0x00	; 0
     e98:	20 c0       	rjmp	.+64     	; 0xeda <vfprintf+0x2a4>
     e9a:	19 7f       	andi	r17, 0xF9	; 249
     e9c:	8f 36       	cpi	r24, 0x6F	; 111
     e9e:	a9 f0       	breq	.+42     	; 0xeca <vfprintf+0x294>
     ea0:	80 37       	cpi	r24, 0x70	; 112
     ea2:	20 f4       	brcc	.+8      	; 0xeac <vfprintf+0x276>
     ea4:	88 35       	cpi	r24, 0x58	; 88
     ea6:	09 f0       	breq	.+2      	; 0xeaa <vfprintf+0x274>
     ea8:	ae c0       	rjmp	.+348    	; 0x1006 <vfprintf+0x3d0>
     eaa:	0b c0       	rjmp	.+22     	; 0xec2 <vfprintf+0x28c>
     eac:	80 37       	cpi	r24, 0x70	; 112
     eae:	21 f0       	breq	.+8      	; 0xeb8 <vfprintf+0x282>
     eb0:	88 37       	cpi	r24, 0x78	; 120
     eb2:	09 f0       	breq	.+2      	; 0xeb6 <vfprintf+0x280>
     eb4:	a8 c0       	rjmp	.+336    	; 0x1006 <vfprintf+0x3d0>
     eb6:	01 c0       	rjmp	.+2      	; 0xeba <vfprintf+0x284>
     eb8:	10 61       	ori	r17, 0x10	; 16
     eba:	14 ff       	sbrs	r17, 4
     ebc:	09 c0       	rjmp	.+18     	; 0xed0 <vfprintf+0x29a>
     ebe:	14 60       	ori	r17, 0x04	; 4
     ec0:	07 c0       	rjmp	.+14     	; 0xed0 <vfprintf+0x29a>
     ec2:	14 ff       	sbrs	r17, 4
     ec4:	08 c0       	rjmp	.+16     	; 0xed6 <vfprintf+0x2a0>
     ec6:	16 60       	ori	r17, 0x06	; 6
     ec8:	06 c0       	rjmp	.+12     	; 0xed6 <vfprintf+0x2a0>
     eca:	28 e0       	ldi	r18, 0x08	; 8
     ecc:	30 e0       	ldi	r19, 0x00	; 0
     ece:	05 c0       	rjmp	.+10     	; 0xeda <vfprintf+0x2a4>
     ed0:	20 e1       	ldi	r18, 0x10	; 16
     ed2:	30 e0       	ldi	r19, 0x00	; 0
     ed4:	02 c0       	rjmp	.+4      	; 0xeda <vfprintf+0x2a4>
     ed6:	20 e1       	ldi	r18, 0x10	; 16
     ed8:	32 e0       	ldi	r19, 0x02	; 2
     eda:	f5 01       	movw	r30, r10
     edc:	17 ff       	sbrs	r17, 7
     ede:	07 c0       	rjmp	.+14     	; 0xeee <vfprintf+0x2b8>
     ee0:	60 81       	ld	r22, Z
     ee2:	71 81       	ldd	r23, Z+1	; 0x01
     ee4:	82 81       	ldd	r24, Z+2	; 0x02
     ee6:	93 81       	ldd	r25, Z+3	; 0x03
     ee8:	44 e0       	ldi	r20, 0x04	; 4
     eea:	50 e0       	ldi	r21, 0x00	; 0
     eec:	06 c0       	rjmp	.+12     	; 0xefa <vfprintf+0x2c4>
     eee:	60 81       	ld	r22, Z
     ef0:	71 81       	ldd	r23, Z+1	; 0x01
     ef2:	80 e0       	ldi	r24, 0x00	; 0
     ef4:	90 e0       	ldi	r25, 0x00	; 0
     ef6:	42 e0       	ldi	r20, 0x02	; 2
     ef8:	50 e0       	ldi	r21, 0x00	; 0
     efa:	a4 0e       	add	r10, r20
     efc:	b5 1e       	adc	r11, r21
     efe:	a2 01       	movw	r20, r4
     f00:	0e 94 a4 08 	call	0x1148	; 0x1148 <__ultoa_invert>
     f04:	d8 2e       	mov	r13, r24
     f06:	d4 18       	sub	r13, r4
     f08:	01 2f       	mov	r16, r17
     f0a:	0f 77       	andi	r16, 0x7F	; 127
     f0c:	06 ff       	sbrs	r16, 6
     f0e:	09 c0       	rjmp	.+18     	; 0xf22 <vfprintf+0x2ec>
     f10:	0e 7f       	andi	r16, 0xFE	; 254
     f12:	df 14       	cp	r13, r15
     f14:	30 f4       	brcc	.+12     	; 0xf22 <vfprintf+0x2ec>
     f16:	04 ff       	sbrs	r16, 4
     f18:	06 c0       	rjmp	.+12     	; 0xf26 <vfprintf+0x2f0>
     f1a:	02 fd       	sbrc	r16, 2
     f1c:	04 c0       	rjmp	.+8      	; 0xf26 <vfprintf+0x2f0>
     f1e:	0f 7e       	andi	r16, 0xEF	; 239
     f20:	02 c0       	rjmp	.+4      	; 0xf26 <vfprintf+0x2f0>
     f22:	1d 2d       	mov	r17, r13
     f24:	01 c0       	rjmp	.+2      	; 0xf28 <vfprintf+0x2f2>
     f26:	1f 2d       	mov	r17, r15
     f28:	80 2f       	mov	r24, r16
     f2a:	90 e0       	ldi	r25, 0x00	; 0
     f2c:	04 ff       	sbrs	r16, 4
     f2e:	0c c0       	rjmp	.+24     	; 0xf48 <vfprintf+0x312>
     f30:	fe 01       	movw	r30, r28
     f32:	ed 0d       	add	r30, r13
     f34:	f1 1d       	adc	r31, r1
     f36:	20 81       	ld	r18, Z
     f38:	20 33       	cpi	r18, 0x30	; 48
     f3a:	11 f4       	brne	.+4      	; 0xf40 <vfprintf+0x30a>
     f3c:	09 7e       	andi	r16, 0xE9	; 233
     f3e:	09 c0       	rjmp	.+18     	; 0xf52 <vfprintf+0x31c>
     f40:	02 ff       	sbrs	r16, 2
     f42:	06 c0       	rjmp	.+12     	; 0xf50 <vfprintf+0x31a>
     f44:	1e 5f       	subi	r17, 0xFE	; 254
     f46:	05 c0       	rjmp	.+10     	; 0xf52 <vfprintf+0x31c>
     f48:	86 78       	andi	r24, 0x86	; 134
     f4a:	90 70       	andi	r25, 0x00	; 0
     f4c:	00 97       	sbiw	r24, 0x00	; 0
     f4e:	09 f0       	breq	.+2      	; 0xf52 <vfprintf+0x31c>
     f50:	1f 5f       	subi	r17, 0xFF	; 255
     f52:	80 2e       	mov	r8, r16
     f54:	99 24       	eor	r9, r9
     f56:	03 fd       	sbrc	r16, 3
     f58:	12 c0       	rjmp	.+36     	; 0xf7e <vfprintf+0x348>
     f5a:	00 ff       	sbrs	r16, 0
     f5c:	0d c0       	rjmp	.+26     	; 0xf78 <vfprintf+0x342>
     f5e:	fd 2c       	mov	r15, r13
     f60:	1e 15       	cp	r17, r14
     f62:	50 f4       	brcc	.+20     	; 0xf78 <vfprintf+0x342>
     f64:	fe 0c       	add	r15, r14
     f66:	f1 1a       	sub	r15, r17
     f68:	1e 2d       	mov	r17, r14
     f6a:	06 c0       	rjmp	.+12     	; 0xf78 <vfprintf+0x342>
     f6c:	80 e2       	ldi	r24, 0x20	; 32
     f6e:	90 e0       	ldi	r25, 0x00	; 0
     f70:	b3 01       	movw	r22, r6
     f72:	0e 94 78 08 	call	0x10f0	; 0x10f0 <fputc>
     f76:	1f 5f       	subi	r17, 0xFF	; 255
     f78:	1e 15       	cp	r17, r14
     f7a:	c0 f3       	brcs	.-16     	; 0xf6c <vfprintf+0x336>
     f7c:	04 c0       	rjmp	.+8      	; 0xf86 <vfprintf+0x350>
     f7e:	1e 15       	cp	r17, r14
     f80:	10 f4       	brcc	.+4      	; 0xf86 <vfprintf+0x350>
     f82:	e1 1a       	sub	r14, r17
     f84:	01 c0       	rjmp	.+2      	; 0xf88 <vfprintf+0x352>
     f86:	ee 24       	eor	r14, r14
     f88:	84 fe       	sbrs	r8, 4
     f8a:	0f c0       	rjmp	.+30     	; 0xfaa <vfprintf+0x374>
     f8c:	80 e3       	ldi	r24, 0x30	; 48
     f8e:	90 e0       	ldi	r25, 0x00	; 0
     f90:	b3 01       	movw	r22, r6
     f92:	0e 94 78 08 	call	0x10f0	; 0x10f0 <fputc>
     f96:	82 fe       	sbrs	r8, 2
     f98:	1f c0       	rjmp	.+62     	; 0xfd8 <vfprintf+0x3a2>
     f9a:	81 fe       	sbrs	r8, 1
     f9c:	03 c0       	rjmp	.+6      	; 0xfa4 <vfprintf+0x36e>
     f9e:	88 e5       	ldi	r24, 0x58	; 88
     fa0:	90 e0       	ldi	r25, 0x00	; 0
     fa2:	10 c0       	rjmp	.+32     	; 0xfc4 <vfprintf+0x38e>
     fa4:	88 e7       	ldi	r24, 0x78	; 120
     fa6:	90 e0       	ldi	r25, 0x00	; 0
     fa8:	0d c0       	rjmp	.+26     	; 0xfc4 <vfprintf+0x38e>
     faa:	c4 01       	movw	r24, r8
     fac:	86 78       	andi	r24, 0x86	; 134
     fae:	90 70       	andi	r25, 0x00	; 0
     fb0:	00 97       	sbiw	r24, 0x00	; 0
     fb2:	91 f0       	breq	.+36     	; 0xfd8 <vfprintf+0x3a2>
     fb4:	81 fc       	sbrc	r8, 1
     fb6:	02 c0       	rjmp	.+4      	; 0xfbc <vfprintf+0x386>
     fb8:	80 e2       	ldi	r24, 0x20	; 32
     fba:	01 c0       	rjmp	.+2      	; 0xfbe <vfprintf+0x388>
     fbc:	8b e2       	ldi	r24, 0x2B	; 43
     fbe:	07 fd       	sbrc	r16, 7
     fc0:	8d e2       	ldi	r24, 0x2D	; 45
     fc2:	90 e0       	ldi	r25, 0x00	; 0
     fc4:	b3 01       	movw	r22, r6
     fc6:	0e 94 78 08 	call	0x10f0	; 0x10f0 <fputc>
     fca:	06 c0       	rjmp	.+12     	; 0xfd8 <vfprintf+0x3a2>
     fcc:	80 e3       	ldi	r24, 0x30	; 48
     fce:	90 e0       	ldi	r25, 0x00	; 0
     fd0:	b3 01       	movw	r22, r6
     fd2:	0e 94 78 08 	call	0x10f0	; 0x10f0 <fputc>
     fd6:	fa 94       	dec	r15
     fd8:	df 14       	cp	r13, r15
     fda:	c0 f3       	brcs	.-16     	; 0xfcc <vfprintf+0x396>
     fdc:	da 94       	dec	r13
     fde:	f2 01       	movw	r30, r4
     fe0:	ed 0d       	add	r30, r13
     fe2:	f1 1d       	adc	r31, r1
     fe4:	80 81       	ld	r24, Z
     fe6:	90 e0       	ldi	r25, 0x00	; 0
     fe8:	b3 01       	movw	r22, r6
     fea:	0e 94 78 08 	call	0x10f0	; 0x10f0 <fputc>
     fee:	dd 20       	and	r13, r13
     ff0:	a9 f7       	brne	.-22     	; 0xfdc <vfprintf+0x3a6>
     ff2:	06 c0       	rjmp	.+12     	; 0x1000 <vfprintf+0x3ca>
     ff4:	80 e2       	ldi	r24, 0x20	; 32
     ff6:	90 e0       	ldi	r25, 0x00	; 0
     ff8:	b3 01       	movw	r22, r6
     ffa:	0e 94 78 08 	call	0x10f0	; 0x10f0 <fputc>
     ffe:	ea 94       	dec	r14
    1000:	ee 20       	and	r14, r14
    1002:	c1 f7       	brne	.-16     	; 0xff4 <vfprintf+0x3be>
    1004:	40 ce       	rjmp	.-896    	; 0xc86 <vfprintf+0x50>
    1006:	f3 01       	movw	r30, r6
    1008:	86 81       	ldd	r24, Z+6	; 0x06
    100a:	97 81       	ldd	r25, Z+7	; 0x07
    100c:	02 c0       	rjmp	.+4      	; 0x1012 <vfprintf+0x3dc>
    100e:	8f ef       	ldi	r24, 0xFF	; 255
    1010:	9f ef       	ldi	r25, 0xFF	; 255
    1012:	2d 96       	adiw	r28, 0x0d	; 13
    1014:	0f b6       	in	r0, 0x3f	; 63
    1016:	f8 94       	cli
    1018:	de bf       	out	0x3e, r29	; 62
    101a:	0f be       	out	0x3f, r0	; 63
    101c:	cd bf       	out	0x3d, r28	; 61
    101e:	df 91       	pop	r29
    1020:	cf 91       	pop	r28
    1022:	1f 91       	pop	r17
    1024:	0f 91       	pop	r16
    1026:	ff 90       	pop	r15
    1028:	ef 90       	pop	r14
    102a:	df 90       	pop	r13
    102c:	cf 90       	pop	r12
    102e:	bf 90       	pop	r11
    1030:	af 90       	pop	r10
    1032:	9f 90       	pop	r9
    1034:	8f 90       	pop	r8
    1036:	7f 90       	pop	r7
    1038:	6f 90       	pop	r6
    103a:	5f 90       	pop	r5
    103c:	4f 90       	pop	r4
    103e:	3f 90       	pop	r3
    1040:	2f 90       	pop	r2
    1042:	08 95       	ret

00001044 <strnlen_P>:
    1044:	fc 01       	movw	r30, r24
    1046:	05 90       	lpm	r0, Z+
    1048:	61 50       	subi	r22, 0x01	; 1
    104a:	70 40       	sbci	r23, 0x00	; 0
    104c:	01 10       	cpse	r0, r1
    104e:	d8 f7       	brcc	.-10     	; 0x1046 <strnlen_P+0x2>
    1050:	80 95       	com	r24
    1052:	90 95       	com	r25
    1054:	8e 0f       	add	r24, r30
    1056:	9f 1f       	adc	r25, r31
    1058:	08 95       	ret

0000105a <strnlen>:
    105a:	fc 01       	movw	r30, r24
    105c:	61 50       	subi	r22, 0x01	; 1
    105e:	70 40       	sbci	r23, 0x00	; 0
    1060:	01 90       	ld	r0, Z+
    1062:	01 10       	cpse	r0, r1
    1064:	d8 f7       	brcc	.-10     	; 0x105c <strnlen+0x2>
    1066:	80 95       	com	r24
    1068:	90 95       	com	r25
    106a:	8e 0f       	add	r24, r30
    106c:	9f 1f       	adc	r25, r31
    106e:	08 95       	ret

00001070 <fgetc>:
    1070:	cf 93       	push	r28
    1072:	df 93       	push	r29
    1074:	ec 01       	movw	r28, r24
    1076:	2b 81       	ldd	r18, Y+3	; 0x03
    1078:	20 ff       	sbrs	r18, 0
    107a:	35 c0       	rjmp	.+106    	; 0x10e6 <fgetc+0x76>
    107c:	26 ff       	sbrs	r18, 6
    107e:	09 c0       	rjmp	.+18     	; 0x1092 <fgetc+0x22>
    1080:	2f 7b       	andi	r18, 0xBF	; 191
    1082:	2b 83       	std	Y+3, r18	; 0x03
    1084:	8e 81       	ldd	r24, Y+6	; 0x06
    1086:	9f 81       	ldd	r25, Y+7	; 0x07
    1088:	01 96       	adiw	r24, 0x01	; 1
    108a:	9f 83       	std	Y+7, r25	; 0x07
    108c:	8e 83       	std	Y+6, r24	; 0x06
    108e:	8a 81       	ldd	r24, Y+2	; 0x02
    1090:	28 c0       	rjmp	.+80     	; 0x10e2 <fgetc+0x72>
    1092:	22 ff       	sbrs	r18, 2
    1094:	0f c0       	rjmp	.+30     	; 0x10b4 <fgetc+0x44>
    1096:	e8 81       	ld	r30, Y
    1098:	f9 81       	ldd	r31, Y+1	; 0x01
    109a:	80 81       	ld	r24, Z
    109c:	99 27       	eor	r25, r25
    109e:	87 fd       	sbrc	r24, 7
    10a0:	90 95       	com	r25
    10a2:	00 97       	sbiw	r24, 0x00	; 0
    10a4:	19 f4       	brne	.+6      	; 0x10ac <fgetc+0x3c>
    10a6:	20 62       	ori	r18, 0x20	; 32
    10a8:	2b 83       	std	Y+3, r18	; 0x03
    10aa:	1d c0       	rjmp	.+58     	; 0x10e6 <fgetc+0x76>
    10ac:	31 96       	adiw	r30, 0x01	; 1
    10ae:	f9 83       	std	Y+1, r31	; 0x01
    10b0:	e8 83       	st	Y, r30
    10b2:	11 c0       	rjmp	.+34     	; 0x10d6 <fgetc+0x66>
    10b4:	ea 85       	ldd	r30, Y+10	; 0x0a
    10b6:	fb 85       	ldd	r31, Y+11	; 0x0b
    10b8:	ce 01       	movw	r24, r28
    10ba:	19 95       	eicall
    10bc:	97 ff       	sbrs	r25, 7
    10be:	0b c0       	rjmp	.+22     	; 0x10d6 <fgetc+0x66>
    10c0:	2b 81       	ldd	r18, Y+3	; 0x03
    10c2:	3f ef       	ldi	r19, 0xFF	; 255
    10c4:	8f 3f       	cpi	r24, 0xFF	; 255
    10c6:	93 07       	cpc	r25, r19
    10c8:	11 f4       	brne	.+4      	; 0x10ce <fgetc+0x5e>
    10ca:	80 e1       	ldi	r24, 0x10	; 16
    10cc:	01 c0       	rjmp	.+2      	; 0x10d0 <fgetc+0x60>
    10ce:	80 e2       	ldi	r24, 0x20	; 32
    10d0:	82 2b       	or	r24, r18
    10d2:	8b 83       	std	Y+3, r24	; 0x03
    10d4:	08 c0       	rjmp	.+16     	; 0x10e6 <fgetc+0x76>
    10d6:	2e 81       	ldd	r18, Y+6	; 0x06
    10d8:	3f 81       	ldd	r19, Y+7	; 0x07
    10da:	2f 5f       	subi	r18, 0xFF	; 255
    10dc:	3f 4f       	sbci	r19, 0xFF	; 255
    10de:	3f 83       	std	Y+7, r19	; 0x07
    10e0:	2e 83       	std	Y+6, r18	; 0x06
    10e2:	90 e0       	ldi	r25, 0x00	; 0
    10e4:	02 c0       	rjmp	.+4      	; 0x10ea <fgetc+0x7a>
    10e6:	8f ef       	ldi	r24, 0xFF	; 255
    10e8:	9f ef       	ldi	r25, 0xFF	; 255
    10ea:	df 91       	pop	r29
    10ec:	cf 91       	pop	r28
    10ee:	08 95       	ret

000010f0 <fputc>:
    10f0:	0f 93       	push	r16
    10f2:	1f 93       	push	r17
    10f4:	cf 93       	push	r28
    10f6:	df 93       	push	r29
    10f8:	8c 01       	movw	r16, r24
    10fa:	eb 01       	movw	r28, r22
    10fc:	8b 81       	ldd	r24, Y+3	; 0x03
    10fe:	81 ff       	sbrs	r24, 1
    1100:	1b c0       	rjmp	.+54     	; 0x1138 <fputc+0x48>
    1102:	82 ff       	sbrs	r24, 2
    1104:	0d c0       	rjmp	.+26     	; 0x1120 <fputc+0x30>
    1106:	2e 81       	ldd	r18, Y+6	; 0x06
    1108:	3f 81       	ldd	r19, Y+7	; 0x07
    110a:	8c 81       	ldd	r24, Y+4	; 0x04
    110c:	9d 81       	ldd	r25, Y+5	; 0x05
    110e:	28 17       	cp	r18, r24
    1110:	39 07       	cpc	r19, r25
    1112:	64 f4       	brge	.+24     	; 0x112c <fputc+0x3c>
    1114:	e8 81       	ld	r30, Y
    1116:	f9 81       	ldd	r31, Y+1	; 0x01
    1118:	01 93       	st	Z+, r16
    111a:	f9 83       	std	Y+1, r31	; 0x01
    111c:	e8 83       	st	Y, r30
    111e:	06 c0       	rjmp	.+12     	; 0x112c <fputc+0x3c>
    1120:	e8 85       	ldd	r30, Y+8	; 0x08
    1122:	f9 85       	ldd	r31, Y+9	; 0x09
    1124:	80 2f       	mov	r24, r16
    1126:	19 95       	eicall
    1128:	00 97       	sbiw	r24, 0x00	; 0
    112a:	31 f4       	brne	.+12     	; 0x1138 <fputc+0x48>
    112c:	8e 81       	ldd	r24, Y+6	; 0x06
    112e:	9f 81       	ldd	r25, Y+7	; 0x07
    1130:	01 96       	adiw	r24, 0x01	; 1
    1132:	9f 83       	std	Y+7, r25	; 0x07
    1134:	8e 83       	std	Y+6, r24	; 0x06
    1136:	02 c0       	rjmp	.+4      	; 0x113c <fputc+0x4c>
    1138:	0f ef       	ldi	r16, 0xFF	; 255
    113a:	1f ef       	ldi	r17, 0xFF	; 255
    113c:	c8 01       	movw	r24, r16
    113e:	df 91       	pop	r29
    1140:	cf 91       	pop	r28
    1142:	1f 91       	pop	r17
    1144:	0f 91       	pop	r16
    1146:	08 95       	ret

00001148 <__ultoa_invert>:
    1148:	fa 01       	movw	r30, r20
    114a:	aa 27       	eor	r26, r26
    114c:	28 30       	cpi	r18, 0x08	; 8
    114e:	51 f1       	breq	.+84     	; 0x11a4 <__ultoa_invert+0x5c>
    1150:	20 31       	cpi	r18, 0x10	; 16
    1152:	81 f1       	breq	.+96     	; 0x11b4 <__ultoa_invert+0x6c>
    1154:	e8 94       	clt
    1156:	6f 93       	push	r22
    1158:	6e 7f       	andi	r22, 0xFE	; 254
    115a:	6e 5f       	subi	r22, 0xFE	; 254
    115c:	7f 4f       	sbci	r23, 0xFF	; 255
    115e:	8f 4f       	sbci	r24, 0xFF	; 255
    1160:	9f 4f       	sbci	r25, 0xFF	; 255
    1162:	af 4f       	sbci	r26, 0xFF	; 255
    1164:	b1 e0       	ldi	r27, 0x01	; 1
    1166:	3e d0       	rcall	.+124    	; 0x11e4 <__ultoa_invert+0x9c>
    1168:	b4 e0       	ldi	r27, 0x04	; 4
    116a:	3c d0       	rcall	.+120    	; 0x11e4 <__ultoa_invert+0x9c>
    116c:	67 0f       	add	r22, r23
    116e:	78 1f       	adc	r23, r24
    1170:	89 1f       	adc	r24, r25
    1172:	9a 1f       	adc	r25, r26
    1174:	a1 1d       	adc	r26, r1
    1176:	68 0f       	add	r22, r24
    1178:	79 1f       	adc	r23, r25
    117a:	8a 1f       	adc	r24, r26
    117c:	91 1d       	adc	r25, r1
    117e:	a1 1d       	adc	r26, r1
    1180:	6a 0f       	add	r22, r26
    1182:	71 1d       	adc	r23, r1
    1184:	81 1d       	adc	r24, r1
    1186:	91 1d       	adc	r25, r1
    1188:	a1 1d       	adc	r26, r1
    118a:	20 d0       	rcall	.+64     	; 0x11cc <__ultoa_invert+0x84>
    118c:	09 f4       	brne	.+2      	; 0x1190 <__ultoa_invert+0x48>
    118e:	68 94       	set
    1190:	3f 91       	pop	r19
    1192:	2a e0       	ldi	r18, 0x0A	; 10
    1194:	26 9f       	mul	r18, r22
    1196:	11 24       	eor	r1, r1
    1198:	30 19       	sub	r19, r0
    119a:	30 5d       	subi	r19, 0xD0	; 208
    119c:	31 93       	st	Z+, r19
    119e:	de f6       	brtc	.-74     	; 0x1156 <__ultoa_invert+0xe>
    11a0:	cf 01       	movw	r24, r30
    11a2:	08 95       	ret
    11a4:	46 2f       	mov	r20, r22
    11a6:	47 70       	andi	r20, 0x07	; 7
    11a8:	40 5d       	subi	r20, 0xD0	; 208
    11aa:	41 93       	st	Z+, r20
    11ac:	b3 e0       	ldi	r27, 0x03	; 3
    11ae:	0f d0       	rcall	.+30     	; 0x11ce <__ultoa_invert+0x86>
    11b0:	c9 f7       	brne	.-14     	; 0x11a4 <__ultoa_invert+0x5c>
    11b2:	f6 cf       	rjmp	.-20     	; 0x11a0 <__ultoa_invert+0x58>
    11b4:	46 2f       	mov	r20, r22
    11b6:	4f 70       	andi	r20, 0x0F	; 15
    11b8:	40 5d       	subi	r20, 0xD0	; 208
    11ba:	4a 33       	cpi	r20, 0x3A	; 58
    11bc:	18 f0       	brcs	.+6      	; 0x11c4 <__ultoa_invert+0x7c>
    11be:	49 5d       	subi	r20, 0xD9	; 217
    11c0:	31 fd       	sbrc	r19, 1
    11c2:	40 52       	subi	r20, 0x20	; 32
    11c4:	41 93       	st	Z+, r20
    11c6:	02 d0       	rcall	.+4      	; 0x11cc <__ultoa_invert+0x84>
    11c8:	a9 f7       	brne	.-22     	; 0x11b4 <__ultoa_invert+0x6c>
    11ca:	ea cf       	rjmp	.-44     	; 0x11a0 <__ultoa_invert+0x58>
    11cc:	b4 e0       	ldi	r27, 0x04	; 4
    11ce:	a6 95       	lsr	r26
    11d0:	97 95       	ror	r25
    11d2:	87 95       	ror	r24
    11d4:	77 95       	ror	r23
    11d6:	67 95       	ror	r22
    11d8:	ba 95       	dec	r27
    11da:	c9 f7       	brne	.-14     	; 0x11ce <__ultoa_invert+0x86>
    11dc:	00 97       	sbiw	r24, 0x00	; 0
    11de:	61 05       	cpc	r22, r1
    11e0:	71 05       	cpc	r23, r1
    11e2:	08 95       	ret
    11e4:	9b 01       	movw	r18, r22
    11e6:	ac 01       	movw	r20, r24
    11e8:	0a 2e       	mov	r0, r26
    11ea:	06 94       	lsr	r0
    11ec:	57 95       	ror	r21
    11ee:	47 95       	ror	r20
    11f0:	37 95       	ror	r19
    11f2:	27 95       	ror	r18
    11f4:	ba 95       	dec	r27
    11f6:	c9 f7       	brne	.-14     	; 0x11ea <__ultoa_invert+0xa2>
    11f8:	62 0f       	add	r22, r18
    11fa:	73 1f       	adc	r23, r19
    11fc:	84 1f       	adc	r24, r20
    11fe:	95 1f       	adc	r25, r21
    1200:	a0 1d       	adc	r26, r0
    1202:	08 95       	ret

00001204 <_exit>:
    1204:	f8 94       	cli

00001206 <__stop_program>:
    1206:	ff cf       	rjmp	.-2      	; 0x1206 <__stop_program>
