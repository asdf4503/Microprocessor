
pjt07_uart_input_cir_queue.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000050  00800200  00000bae  00000c42  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000bae  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000008f  00800250  00800250  00000c92  2**0
                  ALLOC
  3 .stab         00000f48  00000000  00000000  00000c94  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000002d8  00000000  00000000  00001bdc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  00001eb8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000013ee  00000000  00000000  00002058  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008ed  00000000  00000000  00003446  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000bb6  00000000  00000000  00003d33  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000032c  00000000  00000000  000048ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003af  00000000  00000000  00004c18  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000ca1  00000000  00000000  00004fc7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  00005c68  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
   4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
   8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
   c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  10:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  14:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  18:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  1c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  20:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  24:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  28:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  2c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  30:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  34:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  38:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  3c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  40:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  44:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  48:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  4c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  50:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  54:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  58:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  5c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  60:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  64:	0c 94 98 01 	jmp	0x330	; 0x330 <__vector_25>
  68:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  6c:	0c 94 69 01 	jmp	0x2d2	; 0x2d2 <__vector_27>
  70:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  74:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  78:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  7c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  80:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  84:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  88:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  8c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  90:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  94:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  98:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  9c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  a0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  a4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  a8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  ac:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  b0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  b4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  b8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  bc:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  c0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  c4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  c8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  cc:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  d0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  d4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  d8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  dc:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  e0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ee ea       	ldi	r30, 0xAE	; 174
  fc:	fb e0       	ldi	r31, 0x0B	; 11
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a0 35       	cpi	r26, 0x50	; 80
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>
 10e:	1b be       	out	0x3b, r1	; 59

00000110 <__do_clear_bss>:
 110:	12 e0       	ldi	r17, 0x02	; 2
 112:	a0 e5       	ldi	r26, 0x50	; 80
 114:	b2 e0       	ldi	r27, 0x02	; 2
 116:	01 c0       	rjmp	.+2      	; 0x11a <.do_clear_bss_start>

00000118 <.do_clear_bss_loop>:
 118:	1d 92       	st	X+, r1

0000011a <.do_clear_bss_start>:
 11a:	af 3d       	cpi	r26, 0xDF	; 223
 11c:	b1 07       	cpc	r27, r17
 11e:	e1 f7       	brne	.-8      	; 0x118 <.do_clear_bss_loop>
 120:	0e 94 24 02 	call	0x448	; 0x448 <main>
 124:	0c 94 d5 05 	jmp	0xbaa	; 0xbaa <_exit>

00000128 <__bad_interrupt>:
 128:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012c <q_init>:

char 	qi[QI_SIZE], qo[QO_SIZE];
int 	fi, ri, fo, ro;

void q_init() {
	fi = ri = fo = ro = 0;
 12c:	10 92 95 02 	sts	0x0295, r1
 130:	10 92 94 02 	sts	0x0294, r1
 134:	10 92 93 02 	sts	0x0293, r1
 138:	10 92 92 02 	sts	0x0292, r1
 13c:	10 92 97 02 	sts	0x0297, r1
 140:	10 92 96 02 	sts	0x0296, r1
 144:	10 92 51 02 	sts	0x0251, r1
 148:	10 92 50 02 	sts	0x0250, r1
}
 14c:	08 95       	ret

0000014e <qi_insert>:


int qi_insert(char ch) {
 14e:	48 2f       	mov	r20, r24
	if((ri + 1) % QI_SIZE == fi)
 150:	20 91 96 02 	lds	r18, 0x0296
 154:	30 91 97 02 	lds	r19, 0x0297
 158:	2f 5f       	subi	r18, 0xFF	; 255
 15a:	3f 4f       	sbci	r19, 0xFF	; 255
 15c:	c9 01       	movw	r24, r18
 15e:	60 e4       	ldi	r22, 0x40	; 64
 160:	70 e0       	ldi	r23, 0x00	; 0
 162:	0e 94 93 02 	call	0x526	; 0x526 <__divmodhi4>
 166:	9c 01       	movw	r18, r24
 168:	80 91 50 02 	lds	r24, 0x0250
 16c:	90 91 51 02 	lds	r25, 0x0251
 170:	28 17       	cp	r18, r24
 172:	39 07       	cpc	r19, r25
 174:	59 f0       	breq	.+22     	; 0x18c <qi_insert+0x3e>
		return(0);
	ri = (ri + 1) % QI_SIZE;
 176:	30 93 97 02 	sts	0x0297, r19
 17a:	20 93 96 02 	sts	0x0296, r18
	qi[ri] = ch;
 17e:	28 56       	subi	r18, 0x68	; 104
 180:	3d 4f       	sbci	r19, 0xFD	; 253
 182:	f9 01       	movw	r30, r18
 184:	40 83       	st	Z, r20
	return(1);
 186:	81 e0       	ldi	r24, 0x01	; 1
 188:	90 e0       	ldi	r25, 0x00	; 0
 18a:	08 95       	ret
}


int qi_insert(char ch) {
	if((ri + 1) % QI_SIZE == fi)
		return(0);
 18c:	80 e0       	ldi	r24, 0x00	; 0
 18e:	90 e0       	ldi	r25, 0x00	; 0
	ri = (ri + 1) % QI_SIZE;
	qi[ri] = ch;
	return(1);
}
 190:	08 95       	ret

00000192 <qi_delete>:

int qi_delete() {
	if(ri == fi)
 192:	80 91 50 02 	lds	r24, 0x0250
 196:	90 91 51 02 	lds	r25, 0x0251
 19a:	20 91 96 02 	lds	r18, 0x0296
 19e:	30 91 97 02 	lds	r19, 0x0297
 1a2:	28 17       	cp	r18, r24
 1a4:	39 07       	cpc	r19, r25
 1a6:	79 f0       	breq	.+30     	; 0x1c6 <qi_delete+0x34>
		return(0);
	fi = (fi + 1) % QI_SIZE;
 1a8:	01 96       	adiw	r24, 0x01	; 1
 1aa:	60 e4       	ldi	r22, 0x40	; 64
 1ac:	70 e0       	ldi	r23, 0x00	; 0
 1ae:	0e 94 93 02 	call	0x526	; 0x526 <__divmodhi4>
 1b2:	90 93 51 02 	sts	0x0251, r25
 1b6:	80 93 50 02 	sts	0x0250, r24
	return(qi[fi]);
 1ba:	88 56       	subi	r24, 0x68	; 104
 1bc:	9d 4f       	sbci	r25, 0xFD	; 253
 1be:	fc 01       	movw	r30, r24
 1c0:	80 81       	ld	r24, Z
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	08 95       	ret
	return(1);
}

int qi_delete() {
	if(ri == fi)
		return(0);
 1c6:	80 e0       	ldi	r24, 0x00	; 0
 1c8:	90 e0       	ldi	r25, 0x00	; 0
	fi = (fi + 1) % QI_SIZE;
	return(qi[fi]);
}
 1ca:	08 95       	ret

000001cc <qo_insert>:

int qo_insert(char ch) {
 1cc:	48 2f       	mov	r20, r24
	if((ro + 1) % QO_SIZE == fo)
 1ce:	20 91 94 02 	lds	r18, 0x0294
 1d2:	30 91 95 02 	lds	r19, 0x0295
 1d6:	2f 5f       	subi	r18, 0xFF	; 255
 1d8:	3f 4f       	sbci	r19, 0xFF	; 255
 1da:	c9 01       	movw	r24, r18
 1dc:	60 e4       	ldi	r22, 0x40	; 64
 1de:	70 e0       	ldi	r23, 0x00	; 0
 1e0:	0e 94 93 02 	call	0x526	; 0x526 <__divmodhi4>
 1e4:	9c 01       	movw	r18, r24
 1e6:	80 91 92 02 	lds	r24, 0x0292
 1ea:	90 91 93 02 	lds	r25, 0x0293
 1ee:	28 17       	cp	r18, r24
 1f0:	39 07       	cpc	r19, r25
 1f2:	59 f0       	breq	.+22     	; 0x20a <qo_insert+0x3e>
		return(0);
	ro = (ro + 1) % QO_SIZE;
 1f4:	30 93 95 02 	sts	0x0295, r19
 1f8:	20 93 94 02 	sts	0x0294, r18
	qo[ro] = ch;
 1fc:	2e 5a       	subi	r18, 0xAE	; 174
 1fe:	3d 4f       	sbci	r19, 0xFD	; 253
 200:	f9 01       	movw	r30, r18
 202:	40 83       	st	Z, r20
	return(1);
 204:	81 e0       	ldi	r24, 0x01	; 1
 206:	90 e0       	ldi	r25, 0x00	; 0
 208:	08 95       	ret
	return(qi[fi]);
}

int qo_insert(char ch) {
	if((ro + 1) % QO_SIZE == fo)
		return(0);
 20a:	80 e0       	ldi	r24, 0x00	; 0
 20c:	90 e0       	ldi	r25, 0x00	; 0
	ro = (ro + 1) % QO_SIZE;
	qo[ro] = ch;
	return(1);
}
 20e:	08 95       	ret

00000210 <qo_delete>:

int qo_delete() {
	if(ro == fo)
 210:	80 91 92 02 	lds	r24, 0x0292
 214:	90 91 93 02 	lds	r25, 0x0293
 218:	20 91 94 02 	lds	r18, 0x0294
 21c:	30 91 95 02 	lds	r19, 0x0295
 220:	28 17       	cp	r18, r24
 222:	39 07       	cpc	r19, r25
 224:	79 f0       	breq	.+30     	; 0x244 <qo_delete+0x34>
		return(0);
	fo = (fo + 1) % QO_SIZE;
 226:	01 96       	adiw	r24, 0x01	; 1
 228:	60 e4       	ldi	r22, 0x40	; 64
 22a:	70 e0       	ldi	r23, 0x00	; 0
 22c:	0e 94 93 02 	call	0x526	; 0x526 <__divmodhi4>
 230:	90 93 93 02 	sts	0x0293, r25
 234:	80 93 92 02 	sts	0x0292, r24
	return(qo[fo]);
 238:	8e 5a       	subi	r24, 0xAE	; 174
 23a:	9d 4f       	sbci	r25, 0xFD	; 253
 23c:	fc 01       	movw	r30, r24
 23e:	80 81       	ld	r24, Z
 240:	90 e0       	ldi	r25, 0x00	; 0
 242:	08 95       	ret
	return(1);
}

int qo_delete() {
	if(ro == fo)
		return(0);
 244:	80 e0       	ldi	r24, 0x00	; 0
 246:	90 e0       	ldi	r25, 0x00	; 0
	fo = (fo + 1) % QO_SIZE;
	return(qo[fo]);
}
 248:	08 95       	ret

0000024a <uart_putchar>:
	sbi(UCSR0B, TXCIE0);
	sbi(UCSR0B, RXEN0);
	sbi(UCSR0B, RXCIE0);
}

int uart_putchar(char ch, FILE *stream) {
 24a:	cf 93       	push	r28
 24c:	c8 2f       	mov	r28, r24
	if(ch == '\n')	uart_putchar('\r', stream);
 24e:	8a 30       	cpi	r24, 0x0A	; 10
 250:	19 f4       	brne	.+6      	; 0x258 <uart_putchar+0xe>
 252:	8d e0       	ldi	r24, 0x0D	; 13
 254:	0e 94 25 01 	call	0x24a	; 0x24a <uart_putchar>
	
	cli();
 258:	f8 94       	cli
	if(!uart_busy) {
 25a:	80 91 d8 02 	lds	r24, 0x02D8
 25e:	88 23       	and	r24, r24
 260:	59 f4       	brne	.+22     	; 0x278 <uart_putchar+0x2e>
		UDR0 = ch;
 262:	c0 93 c6 00 	sts	0x00C6, r28
		uart_busy = 1;
 266:	81 e0       	ldi	r24, 0x01	; 1
 268:	80 93 d8 02 	sts	0x02D8, r24
 26c:	0a c0       	rjmp	.+20     	; 0x282 <uart_putchar+0x38>
	} 
	else {
		while(qo_insert(ch) == 0) {
			sei();
 26e:	78 94       	sei
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 270:	86 ef       	ldi	r24, 0xF6	; 246
 272:	8a 95       	dec	r24
 274:	f1 f7       	brne	.-4      	; 0x272 <uart_putchar+0x28>
			_delay_us(100);
			cli();
 276:	f8 94       	cli
	if(!uart_busy) {
		UDR0 = ch;
		uart_busy = 1;
	} 
	else {
		while(qo_insert(ch) == 0) {
 278:	8c 2f       	mov	r24, r28
 27a:	0e 94 e6 00 	call	0x1cc	; 0x1cc <qo_insert>
 27e:	00 97       	sbiw	r24, 0x00	; 0
 280:	b1 f3       	breq	.-20     	; 0x26e <uart_putchar+0x24>
			sei();
			_delay_us(100);
			cli();
		}
	}
	sei();
 282:	78 94       	sei

	return(1);
}
 284:	81 e0       	ldi	r24, 0x01	; 1
 286:	90 e0       	ldi	r25, 0x00	; 0
 288:	cf 91       	pop	r28
 28a:	08 95       	ret

0000028c <uart_init>:

FILE	Mystdout = FDEV_SETUP_STREAM (uart_putchar, NULL, _FDEV_SETUP_WRITE);
char	uart_busy;

void uart_init() {
	stdout = &Mystdout;
 28c:	8b e1       	ldi	r24, 0x1B	; 27
 28e:	92 e0       	ldi	r25, 0x02	; 2
 290:	90 93 dc 02 	sts	0x02DC, r25
 294:	80 93 db 02 	sts	0x02DB, r24
	q_init();
 298:	0e 94 96 00 	call	0x12c	; 0x12c <q_init>
	uart_busy = 0;
 29c:	10 92 d8 02 	sts	0x02D8, r1
	
	UBRR0H = 0x00; UBRR0L = 0x07;
 2a0:	10 92 c5 00 	sts	0x00C5, r1
 2a4:	87 e0       	ldi	r24, 0x07	; 7
 2a6:	80 93 c4 00 	sts	0x00C4, r24
	sbi(UCSR0A, U2X0);
 2aa:	e0 ec       	ldi	r30, 0xC0	; 192
 2ac:	f0 e0       	ldi	r31, 0x00	; 0
 2ae:	80 81       	ld	r24, Z
 2b0:	82 60       	ori	r24, 0x02	; 2
 2b2:	80 83       	st	Z, r24
	sbi(UCSR0B, TXEN0);
 2b4:	e1 ec       	ldi	r30, 0xC1	; 193
 2b6:	f0 e0       	ldi	r31, 0x00	; 0
 2b8:	80 81       	ld	r24, Z
 2ba:	88 60       	ori	r24, 0x08	; 8
 2bc:	80 83       	st	Z, r24
	sbi(UCSR0B, TXCIE0);
 2be:	80 81       	ld	r24, Z
 2c0:	80 64       	ori	r24, 0x40	; 64
 2c2:	80 83       	st	Z, r24
	sbi(UCSR0B, RXEN0);
 2c4:	80 81       	ld	r24, Z
 2c6:	80 61       	ori	r24, 0x10	; 16
 2c8:	80 83       	st	Z, r24
	sbi(UCSR0B, RXCIE0);
 2ca:	80 81       	ld	r24, Z
 2cc:	80 68       	ori	r24, 0x80	; 128
 2ce:	80 83       	st	Z, r24
}
 2d0:	08 95       	ret

000002d2 <__vector_27>:
	sei();

	return(1);
}

ISR(USART0_TX_vect) {
 2d2:	1f 92       	push	r1
 2d4:	0f 92       	push	r0
 2d6:	0f b6       	in	r0, 0x3f	; 63
 2d8:	0f 92       	push	r0
 2da:	0b b6       	in	r0, 0x3b	; 59
 2dc:	0f 92       	push	r0
 2de:	11 24       	eor	r1, r1
 2e0:	2f 93       	push	r18
 2e2:	3f 93       	push	r19
 2e4:	4f 93       	push	r20
 2e6:	5f 93       	push	r21
 2e8:	6f 93       	push	r22
 2ea:	7f 93       	push	r23
 2ec:	8f 93       	push	r24
 2ee:	9f 93       	push	r25
 2f0:	af 93       	push	r26
 2f2:	bf 93       	push	r27
 2f4:	ef 93       	push	r30
 2f6:	ff 93       	push	r31
   char ch;

   if((ch = qo_delete()) == 0)
 2f8:	0e 94 08 01 	call	0x210	; 0x210 <qo_delete>
 2fc:	88 23       	and	r24, r24
 2fe:	19 f4       	brne	.+6      	; 0x306 <__vector_27+0x34>
      uart_busy = 0;
 300:	10 92 d8 02 	sts	0x02D8, r1
 304:	02 c0       	rjmp	.+4      	; 0x30a <__vector_27+0x38>
   else
      UDR0 = ch;
 306:	80 93 c6 00 	sts	0x00C6, r24
}
 30a:	ff 91       	pop	r31
 30c:	ef 91       	pop	r30
 30e:	bf 91       	pop	r27
 310:	af 91       	pop	r26
 312:	9f 91       	pop	r25
 314:	8f 91       	pop	r24
 316:	7f 91       	pop	r23
 318:	6f 91       	pop	r22
 31a:	5f 91       	pop	r21
 31c:	4f 91       	pop	r20
 31e:	3f 91       	pop	r19
 320:	2f 91       	pop	r18
 322:	0f 90       	pop	r0
 324:	0b be       	out	0x3b, r0	; 59
 326:	0f 90       	pop	r0
 328:	0f be       	out	0x3f, r0	; 63
 32a:	0f 90       	pop	r0
 32c:	1f 90       	pop	r1
 32e:	18 95       	reti

00000330 <__vector_25>:

ISR(USART0_RX_vect) {
 330:	1f 92       	push	r1
 332:	0f 92       	push	r0
 334:	0f b6       	in	r0, 0x3f	; 63
 336:	0f 92       	push	r0
 338:	0b b6       	in	r0, 0x3b	; 59
 33a:	0f 92       	push	r0
 33c:	11 24       	eor	r1, r1
 33e:	2f 93       	push	r18
 340:	3f 93       	push	r19
 342:	4f 93       	push	r20
 344:	5f 93       	push	r21
 346:	6f 93       	push	r22
 348:	7f 93       	push	r23
 34a:	8f 93       	push	r24
 34c:	9f 93       	push	r25
 34e:	af 93       	push	r26
 350:	bf 93       	push	r27
 352:	ef 93       	push	r30
 354:	ff 93       	push	r31
	char ch;

	ch = UDR0;
 356:	80 91 c6 00 	lds	r24, 0x00C6
	qi_insert(ch);
 35a:	0e 94 a7 00 	call	0x14e	; 0x14e <qi_insert>
}
 35e:	ff 91       	pop	r31
 360:	ef 91       	pop	r30
 362:	bf 91       	pop	r27
 364:	af 91       	pop	r26
 366:	9f 91       	pop	r25
 368:	8f 91       	pop	r24
 36a:	7f 91       	pop	r23
 36c:	6f 91       	pop	r22
 36e:	5f 91       	pop	r21
 370:	4f 91       	pop	r20
 372:	3f 91       	pop	r19
 374:	2f 91       	pop	r18
 376:	0f 90       	pop	r0
 378:	0b be       	out	0x3b, r0	; 59
 37a:	0f 90       	pop	r0
 37c:	0f be       	out	0x3f, r0	; 63
 37e:	0f 90       	pop	r0
 380:	1f 90       	pop	r1
 382:	18 95       	reti

00000384 <is_prime>:
#include <avr/io.h>
#include <stdio.h>
#include <compat/deprecated.h>
#include "prime.h"

int is_prime(int n) {
 384:	cf 93       	push	r28
 386:	df 93       	push	r29
 388:	fc 01       	movw	r30, r24
	int i;
	for(i = 2;i <= n/2;i++)
 38a:	62 e0       	ldi	r22, 0x02	; 2
 38c:	70 e0       	ldi	r23, 0x00	; 0
 38e:	0e 94 93 02 	call	0x526	; 0x526 <__divmodhi4>
 392:	eb 01       	movw	r28, r22
 394:	22 e0       	ldi	r18, 0x02	; 2
 396:	30 e0       	ldi	r19, 0x00	; 0
 398:	08 c0       	rjmp	.+16     	; 0x3aa <is_prime+0x26>
		if((n % i) == 0)
 39a:	cf 01       	movw	r24, r30
 39c:	b9 01       	movw	r22, r18
 39e:	0e 94 93 02 	call	0x526	; 0x526 <__divmodhi4>
 3a2:	00 97       	sbiw	r24, 0x00	; 0
 3a4:	41 f0       	breq	.+16     	; 0x3b6 <is_prime+0x32>
#include <compat/deprecated.h>
#include "prime.h"

int is_prime(int n) {
	int i;
	for(i = 2;i <= n/2;i++)
 3a6:	2f 5f       	subi	r18, 0xFF	; 255
 3a8:	3f 4f       	sbci	r19, 0xFF	; 255
 3aa:	c2 17       	cp	r28, r18
 3ac:	d3 07       	cpc	r29, r19
 3ae:	ac f7       	brge	.-22     	; 0x39a <is_prime+0x16>
		if((n % i) == 0)
			return(0);
	return(1);
 3b0:	81 e0       	ldi	r24, 0x01	; 1
 3b2:	90 e0       	ldi	r25, 0x00	; 0
 3b4:	02 c0       	rjmp	.+4      	; 0x3ba <is_prime+0x36>

int is_prime(int n) {
	int i;
	for(i = 2;i <= n/2;i++)
		if((n % i) == 0)
			return(0);
 3b6:	80 e0       	ldi	r24, 0x00	; 0
 3b8:	90 e0       	ldi	r25, 0x00	; 0
	return(1);
}
 3ba:	df 91       	pop	r29
 3bc:	cf 91       	pop	r28
 3be:	08 95       	ret

000003c0 <app_prime>:

void app_prime(int t) {
 3c0:	cf 92       	push	r12
 3c2:	df 92       	push	r13
 3c4:	ef 92       	push	r14
 3c6:	ff 92       	push	r15
 3c8:	0f 93       	push	r16
 3ca:	1f 93       	push	r17
 3cc:	cf 93       	push	r28
 3ce:	df 93       	push	r29
 3d0:	7c 01       	movw	r14, r24
	int n, count = 0;
 3d2:	00 e0       	ldi	r16, 0x00	; 0
 3d4:	10 e0       	ldi	r17, 0x00	; 0
	for(n = 2;n <= t;n++) {
 3d6:	c2 e0       	ldi	r28, 0x02	; 2
 3d8:	d0 e0       	ldi	r29, 0x00	; 0
		if(is_prime(n)) {
			count++;
			printf("%d is a prime number !!! \n", n);
 3da:	29 e2       	ldi	r18, 0x29	; 41
 3dc:	c2 2e       	mov	r12, r18
 3de:	22 e0       	ldi	r18, 0x02	; 2
 3e0:	d2 2e       	mov	r13, r18
	return(1);
}

void app_prime(int t) {
	int n, count = 0;
	for(n = 2;n <= t;n++) {
 3e2:	16 c0       	rjmp	.+44     	; 0x410 <app_prime+0x50>
		if(is_prime(n)) {
 3e4:	ce 01       	movw	r24, r28
 3e6:	0e 94 c2 01 	call	0x384	; 0x384 <is_prime>
 3ea:	00 97       	sbiw	r24, 0x00	; 0
 3ec:	81 f0       	breq	.+32     	; 0x40e <app_prime+0x4e>
			count++;
 3ee:	0f 5f       	subi	r16, 0xFF	; 255
 3f0:	1f 4f       	sbci	r17, 0xFF	; 255
			printf("%d is a prime number !!! \n", n);
 3f2:	00 d0       	rcall	.+0      	; 0x3f4 <app_prime+0x34>
 3f4:	0f 92       	push	r0
 3f6:	ed b7       	in	r30, 0x3d	; 61
 3f8:	fe b7       	in	r31, 0x3e	; 62
 3fa:	d2 82       	std	Z+2, r13	; 0x02
 3fc:	c1 82       	std	Z+1, r12	; 0x01
 3fe:	d4 83       	std	Z+4, r29	; 0x04
 400:	c3 83       	std	Z+3, r28	; 0x03
 402:	0e 94 ee 02 	call	0x5dc	; 0x5dc <printf>
 406:	0f 90       	pop	r0
 408:	0f 90       	pop	r0
 40a:	0f 90       	pop	r0
 40c:	0f 90       	pop	r0
	return(1);
}

void app_prime(int t) {
	int n, count = 0;
	for(n = 2;n <= t;n++) {
 40e:	21 96       	adiw	r28, 0x01	; 1
 410:	ec 16       	cp	r14, r28
 412:	fd 06       	cpc	r15, r29
 414:	3c f7       	brge	.-50     	; 0x3e4 <app_prime+0x24>
		if(is_prime(n)) {
			count++;
			printf("%d is a prime number !!! \n", n);
		}
	}
	printf("count = %d\n", count);
 416:	00 d0       	rcall	.+0      	; 0x418 <app_prime+0x58>
 418:	0f 92       	push	r0
 41a:	84 e4       	ldi	r24, 0x44	; 68
 41c:	92 e0       	ldi	r25, 0x02	; 2
 41e:	ed b7       	in	r30, 0x3d	; 61
 420:	fe b7       	in	r31, 0x3e	; 62
 422:	92 83       	std	Z+2, r25	; 0x02
 424:	81 83       	std	Z+1, r24	; 0x01
 426:	14 83       	std	Z+4, r17	; 0x04
 428:	03 83       	std	Z+3, r16	; 0x03
 42a:	0e 94 ee 02 	call	0x5dc	; 0x5dc <printf>
 42e:	0f 90       	pop	r0
 430:	0f 90       	pop	r0
 432:	0f 90       	pop	r0
 434:	0f 90       	pop	r0
}
 436:	df 91       	pop	r29
 438:	cf 91       	pop	r28
 43a:	1f 91       	pop	r17
 43c:	0f 91       	pop	r16
 43e:	ff 90       	pop	r15
 440:	ef 90       	pop	r14
 442:	df 90       	pop	r13
 444:	cf 90       	pop	r12
 446:	08 95       	ret

00000448 <main>:
#include <util/delay.h>
#include "uart.h"
#include "prime.h"
#include "queue.h"

int main() {
 448:	cf 93       	push	r28
 44a:	df 93       	push	r29
 44c:	cd b7       	in	r28, 0x3d	; 61
 44e:	de b7       	in	r29, 0x3e	; 62
 450:	c0 58       	subi	r28, 0x80	; 128
 452:	d0 40       	sbci	r29, 0x00	; 0
 454:	0f b6       	in	r0, 0x3f	; 63
 456:	f8 94       	cli
 458:	de bf       	out	0x3e, r29	; 62
 45a:	0f be       	out	0x3f, r0	; 63
 45c:	cd bf       	out	0x3d, r28	; 61
	char cmd[128], ch;
	int n = 0;
	
	
	uart_init();
 45e:	0e 94 46 01 	call	0x28c	; 0x28c <uart_init>
	sei();
 462:	78 94       	sei
	printf("$ ");
 464:	0f 92       	push	r0
 466:	0f 92       	push	r0
 468:	80 e0       	ldi	r24, 0x00	; 0
 46a:	e8 2e       	mov	r14, r24
 46c:	82 e0       	ldi	r24, 0x02	; 2
 46e:	f8 2e       	mov	r15, r24
 470:	ed b7       	in	r30, 0x3d	; 61
 472:	fe b7       	in	r31, 0x3e	; 62
 474:	f2 82       	std	Z+2, r15	; 0x02
 476:	e1 82       	std	Z+1, r14	; 0x01
 478:	0e 94 ee 02 	call	0x5dc	; 0x5dc <printf>
 47c:	0f 90       	pop	r0
 47e:	0f 90       	pop	r0
#include "prime.h"
#include "queue.h"

int main() {
	char cmd[128], ch;
	int n = 0;
 480:	00 e0       	ldi	r16, 0x00	; 0
 482:	10 e0       	ldi	r17, 0x00	; 0
 484:	6e 01       	movw	r12, r28
 486:	08 94       	sec
 488:	c1 1c       	adc	r12, r1
 48a:	d1 1c       	adc	r13, r1
					else printf("Unknown command... \n");
				}
				
				else					printf("Unknown command... \n");
				n = 0;
				printf("$ ");
 48c:	be 2c       	mov	r11, r14
 48e:	ef 2c       	mov	r14, r15
			if(ch == '\n') {
				cmd[n] = 0;
				if(!strncmp(cmd, "app", 3)) {
					int i = atoi(cmd + 3);
					if(i != 0)
						 app_prime(i * 100);
 490:	94 e6       	ldi	r25, 0x64	; 100
 492:	89 2e       	mov	r8, r25
 494:	91 2c       	mov	r9, r1
	
	uart_init();
	sei();
	printf("$ ");
	while(1) {
		cli();
 496:	f8 94       	cli
		ch = qi_delete();
 498:	0e 94 c9 00 	call	0x192	; 0x192 <qi_delete>
		sei();
 49c:	78 94       	sei
		if(ch) {
 49e:	88 23       	and	r24, r24
 4a0:	d1 f3       	breq	.-12     	; 0x496 <main+0x4e>
			if(ch == '\r')	continue;
 4a2:	8d 30       	cpi	r24, 0x0D	; 13
 4a4:	c1 f3       	breq	.-16     	; 0x496 <main+0x4e>
			if(ch == '\n') {
				cmd[n] = 0;
 4a6:	f6 01       	movw	r30, r12
 4a8:	e0 0f       	add	r30, r16
 4aa:	f1 1f       	adc	r31, r17
		cli();
		ch = qi_delete();
		sei();
		if(ch) {
			if(ch == '\r')	continue;
			if(ch == '\n') {
 4ac:	8a 30       	cpi	r24, 0x0A	; 10
 4ae:	b9 f5       	brne	.+110    	; 0x51e <main+0xd6>
				cmd[n] = 0;
 4b0:	10 82       	st	Z, r1
				if(!strncmp(cmd, "app", 3)) {
 4b2:	c6 01       	movw	r24, r12
 4b4:	63 e0       	ldi	r22, 0x03	; 3
 4b6:	72 e0       	ldi	r23, 0x02	; 2
 4b8:	43 e0       	ldi	r20, 0x03	; 3
 4ba:	50 e0       	ldi	r21, 0x00	; 0
 4bc:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <strncmp>
 4c0:	00 97       	sbiw	r24, 0x00	; 0
 4c2:	e1 f4       	brne	.+56     	; 0x4fc <main+0xb4>
					int i = atoi(cmd + 3);
 4c4:	ce 01       	movw	r24, r28
 4c6:	04 96       	adiw	r24, 0x04	; 4
 4c8:	0e 94 ba 02 	call	0x574	; 0x574 <atoi>
					if(i != 0)
 4cc:	00 97       	sbiw	r24, 0x00	; 0
 4ce:	49 f0       	breq	.+18     	; 0x4e2 <main+0x9a>
						 app_prime(i * 100);
 4d0:	9c 01       	movw	r18, r24
 4d2:	28 9d       	mul	r18, r8
 4d4:	c0 01       	movw	r24, r0
 4d6:	29 9d       	mul	r18, r9
 4d8:	90 0d       	add	r25, r0
 4da:	38 9d       	mul	r19, r8
 4dc:	90 0d       	add	r25, r0
 4de:	11 24       	eor	r1, r1
 4e0:	0a c0       	rjmp	.+20     	; 0x4f6 <main+0xae>
					else if (strlen(cmd) == 3)
 4e2:	f6 01       	movw	r30, r12
 4e4:	01 90       	ld	r0, Z+
 4e6:	00 20       	and	r0, r0
 4e8:	e9 f7       	brne	.-6      	; 0x4e4 <main+0x9c>
 4ea:	34 97       	sbiw	r30, 0x04	; 4
 4ec:	ec 15       	cp	r30, r12
 4ee:	fd 05       	cpc	r31, r13
 4f0:	29 f4       	brne	.+10     	; 0x4fc <main+0xb4>
						app_prime(2000);
 4f2:	80 ed       	ldi	r24, 0xD0	; 208
 4f4:	97 e0       	ldi	r25, 0x07	; 7
 4f6:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <app_prime>
 4fa:	04 c0       	rjmp	.+8      	; 0x504 <main+0xbc>
					else printf("Unknown command... \n");
				}
				
				else					printf("Unknown command... \n");
 4fc:	87 e0       	ldi	r24, 0x07	; 7
 4fe:	92 e0       	ldi	r25, 0x02	; 2
 500:	0e 94 00 03 	call	0x600	; 0x600 <puts>
				n = 0;
				printf("$ ");
 504:	0f 92       	push	r0
 506:	0f 92       	push	r0
 508:	ed b7       	in	r30, 0x3d	; 61
 50a:	fe b7       	in	r31, 0x3e	; 62
 50c:	b1 82       	std	Z+1, r11	; 0x01
 50e:	e2 82       	std	Z+2, r14	; 0x02
 510:	0e 94 ee 02 	call	0x5dc	; 0x5dc <printf>
 514:	0f 90       	pop	r0
 516:	0f 90       	pop	r0
						app_prime(2000);
					else printf("Unknown command... \n");
				}
				
				else					printf("Unknown command... \n");
				n = 0;
 518:	00 e0       	ldi	r16, 0x00	; 0
 51a:	10 e0       	ldi	r17, 0x00	; 0
 51c:	bc cf       	rjmp	.-136    	; 0x496 <main+0x4e>
				printf("$ ");
			}
			else
				cmd[n++] = ch;
 51e:	80 83       	st	Z, r24
 520:	0f 5f       	subi	r16, 0xFF	; 255
 522:	1f 4f       	sbci	r17, 0xFF	; 255
 524:	b8 cf       	rjmp	.-144    	; 0x496 <main+0x4e>

00000526 <__divmodhi4>:
 526:	97 fb       	bst	r25, 7
 528:	09 2e       	mov	r0, r25
 52a:	07 26       	eor	r0, r23
 52c:	0a d0       	rcall	.+20     	; 0x542 <__divmodhi4_neg1>
 52e:	77 fd       	sbrc	r23, 7
 530:	04 d0       	rcall	.+8      	; 0x53a <__divmodhi4_neg2>
 532:	0c d0       	rcall	.+24     	; 0x54c <__udivmodhi4>
 534:	06 d0       	rcall	.+12     	; 0x542 <__divmodhi4_neg1>
 536:	00 20       	and	r0, r0
 538:	1a f4       	brpl	.+6      	; 0x540 <__divmodhi4_exit>

0000053a <__divmodhi4_neg2>:
 53a:	70 95       	com	r23
 53c:	61 95       	neg	r22
 53e:	7f 4f       	sbci	r23, 0xFF	; 255

00000540 <__divmodhi4_exit>:
 540:	08 95       	ret

00000542 <__divmodhi4_neg1>:
 542:	f6 f7       	brtc	.-4      	; 0x540 <__divmodhi4_exit>
 544:	90 95       	com	r25
 546:	81 95       	neg	r24
 548:	9f 4f       	sbci	r25, 0xFF	; 255
 54a:	08 95       	ret

0000054c <__udivmodhi4>:
 54c:	aa 1b       	sub	r26, r26
 54e:	bb 1b       	sub	r27, r27
 550:	51 e1       	ldi	r21, 0x11	; 17
 552:	07 c0       	rjmp	.+14     	; 0x562 <__udivmodhi4_ep>

00000554 <__udivmodhi4_loop>:
 554:	aa 1f       	adc	r26, r26
 556:	bb 1f       	adc	r27, r27
 558:	a6 17       	cp	r26, r22
 55a:	b7 07       	cpc	r27, r23
 55c:	10 f0       	brcs	.+4      	; 0x562 <__udivmodhi4_ep>
 55e:	a6 1b       	sub	r26, r22
 560:	b7 0b       	sbc	r27, r23

00000562 <__udivmodhi4_ep>:
 562:	88 1f       	adc	r24, r24
 564:	99 1f       	adc	r25, r25
 566:	5a 95       	dec	r21
 568:	a9 f7       	brne	.-22     	; 0x554 <__udivmodhi4_loop>
 56a:	80 95       	com	r24
 56c:	90 95       	com	r25
 56e:	bc 01       	movw	r22, r24
 570:	cd 01       	movw	r24, r26
 572:	08 95       	ret

00000574 <atoi>:
 574:	fc 01       	movw	r30, r24
 576:	88 27       	eor	r24, r24
 578:	99 27       	eor	r25, r25
 57a:	e8 94       	clt
 57c:	21 91       	ld	r18, Z+
 57e:	20 32       	cpi	r18, 0x20	; 32
 580:	e9 f3       	breq	.-6      	; 0x57c <atoi+0x8>
 582:	29 30       	cpi	r18, 0x09	; 9
 584:	10 f0       	brcs	.+4      	; 0x58a <atoi+0x16>
 586:	2e 30       	cpi	r18, 0x0E	; 14
 588:	c8 f3       	brcs	.-14     	; 0x57c <atoi+0x8>
 58a:	2b 32       	cpi	r18, 0x2B	; 43
 58c:	41 f0       	breq	.+16     	; 0x59e <atoi+0x2a>
 58e:	2d 32       	cpi	r18, 0x2D	; 45
 590:	39 f4       	brne	.+14     	; 0x5a0 <atoi+0x2c>
 592:	68 94       	set
 594:	04 c0       	rjmp	.+8      	; 0x59e <atoi+0x2a>
 596:	0e 94 e6 02 	call	0x5cc	; 0x5cc <__mulhi_const_10>
 59a:	82 0f       	add	r24, r18
 59c:	91 1d       	adc	r25, r1
 59e:	21 91       	ld	r18, Z+
 5a0:	20 53       	subi	r18, 0x30	; 48
 5a2:	2a 30       	cpi	r18, 0x0A	; 10
 5a4:	c0 f3       	brcs	.-16     	; 0x596 <atoi+0x22>
 5a6:	1e f4       	brtc	.+6      	; 0x5ae <atoi+0x3a>
 5a8:	90 95       	com	r25
 5aa:	81 95       	neg	r24
 5ac:	9f 4f       	sbci	r25, 0xFF	; 255
 5ae:	08 95       	ret

000005b0 <strncmp>:
 5b0:	fb 01       	movw	r30, r22
 5b2:	dc 01       	movw	r26, r24
 5b4:	41 50       	subi	r20, 0x01	; 1
 5b6:	50 40       	sbci	r21, 0x00	; 0
 5b8:	30 f0       	brcs	.+12     	; 0x5c6 <strncmp+0x16>
 5ba:	8d 91       	ld	r24, X+
 5bc:	01 90       	ld	r0, Z+
 5be:	80 19       	sub	r24, r0
 5c0:	19 f4       	brne	.+6      	; 0x5c8 <strncmp+0x18>
 5c2:	00 20       	and	r0, r0
 5c4:	b9 f7       	brne	.-18     	; 0x5b4 <strncmp+0x4>
 5c6:	88 1b       	sub	r24, r24
 5c8:	99 0b       	sbc	r25, r25
 5ca:	08 95       	ret

000005cc <__mulhi_const_10>:
 5cc:	7a e0       	ldi	r23, 0x0A	; 10
 5ce:	97 9f       	mul	r25, r23
 5d0:	90 2d       	mov	r25, r0
 5d2:	87 9f       	mul	r24, r23
 5d4:	80 2d       	mov	r24, r0
 5d6:	91 0d       	add	r25, r1
 5d8:	11 24       	eor	r1, r1
 5da:	08 95       	ret

000005dc <printf>:
 5dc:	cf 93       	push	r28
 5de:	df 93       	push	r29
 5e0:	cd b7       	in	r28, 0x3d	; 61
 5e2:	de b7       	in	r29, 0x3e	; 62
 5e4:	fe 01       	movw	r30, r28
 5e6:	36 96       	adiw	r30, 0x06	; 6
 5e8:	61 91       	ld	r22, Z+
 5ea:	71 91       	ld	r23, Z+
 5ec:	80 91 db 02 	lds	r24, 0x02DB
 5f0:	90 91 dc 02 	lds	r25, 0x02DC
 5f4:	af 01       	movw	r20, r30
 5f6:	0e 94 2e 03 	call	0x65c	; 0x65c <vfprintf>
 5fa:	df 91       	pop	r29
 5fc:	cf 91       	pop	r28
 5fe:	08 95       	ret

00000600 <puts>:
 600:	0f 93       	push	r16
 602:	1f 93       	push	r17
 604:	cf 93       	push	r28
 606:	df 93       	push	r29
 608:	8c 01       	movw	r16, r24
 60a:	e0 91 db 02 	lds	r30, 0x02DB
 60e:	f0 91 dc 02 	lds	r31, 0x02DC
 612:	83 81       	ldd	r24, Z+3	; 0x03
 614:	81 ff       	sbrs	r24, 1
 616:	1a c0       	rjmp	.+52     	; 0x64c <puts+0x4c>
 618:	c0 e0       	ldi	r28, 0x00	; 0
 61a:	d0 e0       	ldi	r29, 0x00	; 0
 61c:	05 c0       	rjmp	.+10     	; 0x628 <puts+0x28>
 61e:	19 95       	eicall
 620:	00 97       	sbiw	r24, 0x00	; 0
 622:	11 f0       	breq	.+4      	; 0x628 <puts+0x28>
 624:	cf ef       	ldi	r28, 0xFF	; 255
 626:	df ef       	ldi	r29, 0xFF	; 255
 628:	f8 01       	movw	r30, r16
 62a:	81 91       	ld	r24, Z+
 62c:	8f 01       	movw	r16, r30
 62e:	60 91 db 02 	lds	r22, 0x02DB
 632:	70 91 dc 02 	lds	r23, 0x02DC
 636:	db 01       	movw	r26, r22
 638:	18 96       	adiw	r26, 0x08	; 8
 63a:	ed 91       	ld	r30, X+
 63c:	fc 91       	ld	r31, X
 63e:	19 97       	sbiw	r26, 0x09	; 9
 640:	88 23       	and	r24, r24
 642:	69 f7       	brne	.-38     	; 0x61e <puts+0x1e>
 644:	8a e0       	ldi	r24, 0x0A	; 10
 646:	19 95       	eicall
 648:	00 97       	sbiw	r24, 0x00	; 0
 64a:	11 f0       	breq	.+4      	; 0x650 <puts+0x50>
 64c:	cf ef       	ldi	r28, 0xFF	; 255
 64e:	df ef       	ldi	r29, 0xFF	; 255
 650:	ce 01       	movw	r24, r28
 652:	df 91       	pop	r29
 654:	cf 91       	pop	r28
 656:	1f 91       	pop	r17
 658:	0f 91       	pop	r16
 65a:	08 95       	ret

0000065c <vfprintf>:
 65c:	2f 92       	push	r2
 65e:	3f 92       	push	r3
 660:	4f 92       	push	r4
 662:	5f 92       	push	r5
 664:	6f 92       	push	r6
 666:	7f 92       	push	r7
 668:	8f 92       	push	r8
 66a:	9f 92       	push	r9
 66c:	af 92       	push	r10
 66e:	bf 92       	push	r11
 670:	cf 92       	push	r12
 672:	df 92       	push	r13
 674:	ef 92       	push	r14
 676:	ff 92       	push	r15
 678:	0f 93       	push	r16
 67a:	1f 93       	push	r17
 67c:	cf 93       	push	r28
 67e:	df 93       	push	r29
 680:	cd b7       	in	r28, 0x3d	; 61
 682:	de b7       	in	r29, 0x3e	; 62
 684:	2d 97       	sbiw	r28, 0x0d	; 13
 686:	0f b6       	in	r0, 0x3f	; 63
 688:	f8 94       	cli
 68a:	de bf       	out	0x3e, r29	; 62
 68c:	0f be       	out	0x3f, r0	; 63
 68e:	cd bf       	out	0x3d, r28	; 61
 690:	3c 01       	movw	r6, r24
 692:	7d 87       	std	Y+13, r23	; 0x0d
 694:	6c 87       	std	Y+12, r22	; 0x0c
 696:	5a 01       	movw	r10, r20
 698:	fc 01       	movw	r30, r24
 69a:	17 82       	std	Z+7, r1	; 0x07
 69c:	16 82       	std	Z+6, r1	; 0x06
 69e:	83 81       	ldd	r24, Z+3	; 0x03
 6a0:	81 ff       	sbrs	r24, 1
 6a2:	c8 c1       	rjmp	.+912    	; 0xa34 <vfprintf+0x3d8>
 6a4:	2e 01       	movw	r4, r28
 6a6:	08 94       	sec
 6a8:	41 1c       	adc	r4, r1
 6aa:	51 1c       	adc	r5, r1
 6ac:	f3 01       	movw	r30, r6
 6ae:	93 81       	ldd	r25, Z+3	; 0x03
 6b0:	ec 85       	ldd	r30, Y+12	; 0x0c
 6b2:	fd 85       	ldd	r31, Y+13	; 0x0d
 6b4:	93 fd       	sbrc	r25, 3
 6b6:	85 91       	lpm	r24, Z+
 6b8:	93 ff       	sbrs	r25, 3
 6ba:	81 91       	ld	r24, Z+
 6bc:	fd 87       	std	Y+13, r31	; 0x0d
 6be:	ec 87       	std	Y+12, r30	; 0x0c
 6c0:	88 23       	and	r24, r24
 6c2:	09 f4       	brne	.+2      	; 0x6c6 <vfprintf+0x6a>
 6c4:	b3 c1       	rjmp	.+870    	; 0xa2c <vfprintf+0x3d0>
 6c6:	85 32       	cpi	r24, 0x25	; 37
 6c8:	41 f4       	brne	.+16     	; 0x6da <vfprintf+0x7e>
 6ca:	93 fd       	sbrc	r25, 3
 6cc:	85 91       	lpm	r24, Z+
 6ce:	93 ff       	sbrs	r25, 3
 6d0:	81 91       	ld	r24, Z+
 6d2:	fd 87       	std	Y+13, r31	; 0x0d
 6d4:	ec 87       	std	Y+12, r30	; 0x0c
 6d6:	85 32       	cpi	r24, 0x25	; 37
 6d8:	29 f4       	brne	.+10     	; 0x6e4 <vfprintf+0x88>
 6da:	90 e0       	ldi	r25, 0x00	; 0
 6dc:	b3 01       	movw	r22, r6
 6de:	0e 94 4b 05 	call	0xa96	; 0xa96 <fputc>
 6e2:	e4 cf       	rjmp	.-56     	; 0x6ac <vfprintf+0x50>
 6e4:	ff 24       	eor	r15, r15
 6e6:	ee 24       	eor	r14, r14
 6e8:	10 e0       	ldi	r17, 0x00	; 0
 6ea:	10 32       	cpi	r17, 0x20	; 32
 6ec:	b0 f4       	brcc	.+44     	; 0x71a <vfprintf+0xbe>
 6ee:	8b 32       	cpi	r24, 0x2B	; 43
 6f0:	69 f0       	breq	.+26     	; 0x70c <vfprintf+0xb0>
 6f2:	8c 32       	cpi	r24, 0x2C	; 44
 6f4:	28 f4       	brcc	.+10     	; 0x700 <vfprintf+0xa4>
 6f6:	80 32       	cpi	r24, 0x20	; 32
 6f8:	51 f0       	breq	.+20     	; 0x70e <vfprintf+0xb2>
 6fa:	83 32       	cpi	r24, 0x23	; 35
 6fc:	71 f4       	brne	.+28     	; 0x71a <vfprintf+0xbe>
 6fe:	0b c0       	rjmp	.+22     	; 0x716 <vfprintf+0xba>
 700:	8d 32       	cpi	r24, 0x2D	; 45
 702:	39 f0       	breq	.+14     	; 0x712 <vfprintf+0xb6>
 704:	80 33       	cpi	r24, 0x30	; 48
 706:	49 f4       	brne	.+18     	; 0x71a <vfprintf+0xbe>
 708:	11 60       	ori	r17, 0x01	; 1
 70a:	2c c0       	rjmp	.+88     	; 0x764 <vfprintf+0x108>
 70c:	12 60       	ori	r17, 0x02	; 2
 70e:	14 60       	ori	r17, 0x04	; 4
 710:	29 c0       	rjmp	.+82     	; 0x764 <vfprintf+0x108>
 712:	18 60       	ori	r17, 0x08	; 8
 714:	27 c0       	rjmp	.+78     	; 0x764 <vfprintf+0x108>
 716:	10 61       	ori	r17, 0x10	; 16
 718:	25 c0       	rjmp	.+74     	; 0x764 <vfprintf+0x108>
 71a:	17 fd       	sbrc	r17, 7
 71c:	2e c0       	rjmp	.+92     	; 0x77a <vfprintf+0x11e>
 71e:	28 2f       	mov	r18, r24
 720:	20 53       	subi	r18, 0x30	; 48
 722:	2a 30       	cpi	r18, 0x0A	; 10
 724:	98 f4       	brcc	.+38     	; 0x74c <vfprintf+0xf0>
 726:	16 ff       	sbrs	r17, 6
 728:	08 c0       	rjmp	.+16     	; 0x73a <vfprintf+0xde>
 72a:	8f 2d       	mov	r24, r15
 72c:	88 0f       	add	r24, r24
 72e:	f8 2e       	mov	r15, r24
 730:	ff 0c       	add	r15, r15
 732:	ff 0c       	add	r15, r15
 734:	f8 0e       	add	r15, r24
 736:	f2 0e       	add	r15, r18
 738:	15 c0       	rjmp	.+42     	; 0x764 <vfprintf+0x108>
 73a:	8e 2d       	mov	r24, r14
 73c:	88 0f       	add	r24, r24
 73e:	e8 2e       	mov	r14, r24
 740:	ee 0c       	add	r14, r14
 742:	ee 0c       	add	r14, r14
 744:	e8 0e       	add	r14, r24
 746:	e2 0e       	add	r14, r18
 748:	10 62       	ori	r17, 0x20	; 32
 74a:	0c c0       	rjmp	.+24     	; 0x764 <vfprintf+0x108>
 74c:	8e 32       	cpi	r24, 0x2E	; 46
 74e:	21 f4       	brne	.+8      	; 0x758 <vfprintf+0xfc>
 750:	16 fd       	sbrc	r17, 6
 752:	6c c1       	rjmp	.+728    	; 0xa2c <vfprintf+0x3d0>
 754:	10 64       	ori	r17, 0x40	; 64
 756:	06 c0       	rjmp	.+12     	; 0x764 <vfprintf+0x108>
 758:	8c 36       	cpi	r24, 0x6C	; 108
 75a:	11 f4       	brne	.+4      	; 0x760 <vfprintf+0x104>
 75c:	10 68       	ori	r17, 0x80	; 128
 75e:	02 c0       	rjmp	.+4      	; 0x764 <vfprintf+0x108>
 760:	88 36       	cpi	r24, 0x68	; 104
 762:	59 f4       	brne	.+22     	; 0x77a <vfprintf+0x11e>
 764:	ec 85       	ldd	r30, Y+12	; 0x0c
 766:	fd 85       	ldd	r31, Y+13	; 0x0d
 768:	93 fd       	sbrc	r25, 3
 76a:	85 91       	lpm	r24, Z+
 76c:	93 ff       	sbrs	r25, 3
 76e:	81 91       	ld	r24, Z+
 770:	fd 87       	std	Y+13, r31	; 0x0d
 772:	ec 87       	std	Y+12, r30	; 0x0c
 774:	88 23       	and	r24, r24
 776:	09 f0       	breq	.+2      	; 0x77a <vfprintf+0x11e>
 778:	b8 cf       	rjmp	.-144    	; 0x6ea <vfprintf+0x8e>
 77a:	98 2f       	mov	r25, r24
 77c:	95 54       	subi	r25, 0x45	; 69
 77e:	93 30       	cpi	r25, 0x03	; 3
 780:	18 f0       	brcs	.+6      	; 0x788 <vfprintf+0x12c>
 782:	90 52       	subi	r25, 0x20	; 32
 784:	93 30       	cpi	r25, 0x03	; 3
 786:	38 f4       	brcc	.+14     	; 0x796 <vfprintf+0x13a>
 788:	24 e0       	ldi	r18, 0x04	; 4
 78a:	30 e0       	ldi	r19, 0x00	; 0
 78c:	a2 0e       	add	r10, r18
 78e:	b3 1e       	adc	r11, r19
 790:	3f e3       	ldi	r19, 0x3F	; 63
 792:	39 83       	std	Y+1, r19	; 0x01
 794:	0f c0       	rjmp	.+30     	; 0x7b4 <vfprintf+0x158>
 796:	83 36       	cpi	r24, 0x63	; 99
 798:	31 f0       	breq	.+12     	; 0x7a6 <vfprintf+0x14a>
 79a:	83 37       	cpi	r24, 0x73	; 115
 79c:	81 f0       	breq	.+32     	; 0x7be <vfprintf+0x162>
 79e:	83 35       	cpi	r24, 0x53	; 83
 7a0:	09 f0       	breq	.+2      	; 0x7a4 <vfprintf+0x148>
 7a2:	5a c0       	rjmp	.+180    	; 0x858 <vfprintf+0x1fc>
 7a4:	22 c0       	rjmp	.+68     	; 0x7ea <vfprintf+0x18e>
 7a6:	f5 01       	movw	r30, r10
 7a8:	80 81       	ld	r24, Z
 7aa:	89 83       	std	Y+1, r24	; 0x01
 7ac:	22 e0       	ldi	r18, 0x02	; 2
 7ae:	30 e0       	ldi	r19, 0x00	; 0
 7b0:	a2 0e       	add	r10, r18
 7b2:	b3 1e       	adc	r11, r19
 7b4:	21 e0       	ldi	r18, 0x01	; 1
 7b6:	c2 2e       	mov	r12, r18
 7b8:	d1 2c       	mov	r13, r1
 7ba:	42 01       	movw	r8, r4
 7bc:	14 c0       	rjmp	.+40     	; 0x7e6 <vfprintf+0x18a>
 7be:	92 e0       	ldi	r25, 0x02	; 2
 7c0:	29 2e       	mov	r2, r25
 7c2:	31 2c       	mov	r3, r1
 7c4:	2a 0c       	add	r2, r10
 7c6:	3b 1c       	adc	r3, r11
 7c8:	f5 01       	movw	r30, r10
 7ca:	80 80       	ld	r8, Z
 7cc:	91 80       	ldd	r9, Z+1	; 0x01
 7ce:	16 ff       	sbrs	r17, 6
 7d0:	03 c0       	rjmp	.+6      	; 0x7d8 <vfprintf+0x17c>
 7d2:	6f 2d       	mov	r22, r15
 7d4:	70 e0       	ldi	r23, 0x00	; 0
 7d6:	02 c0       	rjmp	.+4      	; 0x7dc <vfprintf+0x180>
 7d8:	6f ef       	ldi	r22, 0xFF	; 255
 7da:	7f ef       	ldi	r23, 0xFF	; 255
 7dc:	c4 01       	movw	r24, r8
 7de:	0e 94 40 05 	call	0xa80	; 0xa80 <strnlen>
 7e2:	6c 01       	movw	r12, r24
 7e4:	51 01       	movw	r10, r2
 7e6:	1f 77       	andi	r17, 0x7F	; 127
 7e8:	15 c0       	rjmp	.+42     	; 0x814 <vfprintf+0x1b8>
 7ea:	82 e0       	ldi	r24, 0x02	; 2
 7ec:	28 2e       	mov	r2, r24
 7ee:	31 2c       	mov	r3, r1
 7f0:	2a 0c       	add	r2, r10
 7f2:	3b 1c       	adc	r3, r11
 7f4:	f5 01       	movw	r30, r10
 7f6:	80 80       	ld	r8, Z
 7f8:	91 80       	ldd	r9, Z+1	; 0x01
 7fa:	16 ff       	sbrs	r17, 6
 7fc:	03 c0       	rjmp	.+6      	; 0x804 <vfprintf+0x1a8>
 7fe:	6f 2d       	mov	r22, r15
 800:	70 e0       	ldi	r23, 0x00	; 0
 802:	02 c0       	rjmp	.+4      	; 0x808 <vfprintf+0x1ac>
 804:	6f ef       	ldi	r22, 0xFF	; 255
 806:	7f ef       	ldi	r23, 0xFF	; 255
 808:	c4 01       	movw	r24, r8
 80a:	0e 94 35 05 	call	0xa6a	; 0xa6a <strnlen_P>
 80e:	6c 01       	movw	r12, r24
 810:	10 68       	ori	r17, 0x80	; 128
 812:	51 01       	movw	r10, r2
 814:	13 fd       	sbrc	r17, 3
 816:	1c c0       	rjmp	.+56     	; 0x850 <vfprintf+0x1f4>
 818:	06 c0       	rjmp	.+12     	; 0x826 <vfprintf+0x1ca>
 81a:	80 e2       	ldi	r24, 0x20	; 32
 81c:	90 e0       	ldi	r25, 0x00	; 0
 81e:	b3 01       	movw	r22, r6
 820:	0e 94 4b 05 	call	0xa96	; 0xa96 <fputc>
 824:	ea 94       	dec	r14
 826:	8e 2d       	mov	r24, r14
 828:	90 e0       	ldi	r25, 0x00	; 0
 82a:	c8 16       	cp	r12, r24
 82c:	d9 06       	cpc	r13, r25
 82e:	a8 f3       	brcs	.-22     	; 0x81a <vfprintf+0x1be>
 830:	0f c0       	rjmp	.+30     	; 0x850 <vfprintf+0x1f4>
 832:	f4 01       	movw	r30, r8
 834:	17 fd       	sbrc	r17, 7
 836:	85 91       	lpm	r24, Z+
 838:	17 ff       	sbrs	r17, 7
 83a:	81 91       	ld	r24, Z+
 83c:	4f 01       	movw	r8, r30
 83e:	90 e0       	ldi	r25, 0x00	; 0
 840:	b3 01       	movw	r22, r6
 842:	0e 94 4b 05 	call	0xa96	; 0xa96 <fputc>
 846:	e1 10       	cpse	r14, r1
 848:	ea 94       	dec	r14
 84a:	08 94       	sec
 84c:	c1 08       	sbc	r12, r1
 84e:	d1 08       	sbc	r13, r1
 850:	c1 14       	cp	r12, r1
 852:	d1 04       	cpc	r13, r1
 854:	71 f7       	brne	.-36     	; 0x832 <vfprintf+0x1d6>
 856:	e7 c0       	rjmp	.+462    	; 0xa26 <vfprintf+0x3ca>
 858:	84 36       	cpi	r24, 0x64	; 100
 85a:	11 f0       	breq	.+4      	; 0x860 <vfprintf+0x204>
 85c:	89 36       	cpi	r24, 0x69	; 105
 85e:	51 f5       	brne	.+84     	; 0x8b4 <vfprintf+0x258>
 860:	f5 01       	movw	r30, r10
 862:	17 ff       	sbrs	r17, 7
 864:	07 c0       	rjmp	.+14     	; 0x874 <vfprintf+0x218>
 866:	80 81       	ld	r24, Z
 868:	91 81       	ldd	r25, Z+1	; 0x01
 86a:	a2 81       	ldd	r26, Z+2	; 0x02
 86c:	b3 81       	ldd	r27, Z+3	; 0x03
 86e:	24 e0       	ldi	r18, 0x04	; 4
 870:	30 e0       	ldi	r19, 0x00	; 0
 872:	08 c0       	rjmp	.+16     	; 0x884 <vfprintf+0x228>
 874:	80 81       	ld	r24, Z
 876:	91 81       	ldd	r25, Z+1	; 0x01
 878:	aa 27       	eor	r26, r26
 87a:	97 fd       	sbrc	r25, 7
 87c:	a0 95       	com	r26
 87e:	ba 2f       	mov	r27, r26
 880:	22 e0       	ldi	r18, 0x02	; 2
 882:	30 e0       	ldi	r19, 0x00	; 0
 884:	a2 0e       	add	r10, r18
 886:	b3 1e       	adc	r11, r19
 888:	01 2f       	mov	r16, r17
 88a:	0f 76       	andi	r16, 0x6F	; 111
 88c:	b7 ff       	sbrs	r27, 7
 88e:	08 c0       	rjmp	.+16     	; 0x8a0 <vfprintf+0x244>
 890:	b0 95       	com	r27
 892:	a0 95       	com	r26
 894:	90 95       	com	r25
 896:	81 95       	neg	r24
 898:	9f 4f       	sbci	r25, 0xFF	; 255
 89a:	af 4f       	sbci	r26, 0xFF	; 255
 89c:	bf 4f       	sbci	r27, 0xFF	; 255
 89e:	00 68       	ori	r16, 0x80	; 128
 8a0:	bc 01       	movw	r22, r24
 8a2:	cd 01       	movw	r24, r26
 8a4:	a2 01       	movw	r20, r4
 8a6:	2a e0       	ldi	r18, 0x0A	; 10
 8a8:	30 e0       	ldi	r19, 0x00	; 0
 8aa:	0e 94 77 05 	call	0xaee	; 0xaee <__ultoa_invert>
 8ae:	d8 2e       	mov	r13, r24
 8b0:	d4 18       	sub	r13, r4
 8b2:	3f c0       	rjmp	.+126    	; 0x932 <vfprintf+0x2d6>
 8b4:	85 37       	cpi	r24, 0x75	; 117
 8b6:	21 f4       	brne	.+8      	; 0x8c0 <vfprintf+0x264>
 8b8:	1f 7e       	andi	r17, 0xEF	; 239
 8ba:	2a e0       	ldi	r18, 0x0A	; 10
 8bc:	30 e0       	ldi	r19, 0x00	; 0
 8be:	20 c0       	rjmp	.+64     	; 0x900 <vfprintf+0x2a4>
 8c0:	19 7f       	andi	r17, 0xF9	; 249
 8c2:	8f 36       	cpi	r24, 0x6F	; 111
 8c4:	a9 f0       	breq	.+42     	; 0x8f0 <vfprintf+0x294>
 8c6:	80 37       	cpi	r24, 0x70	; 112
 8c8:	20 f4       	brcc	.+8      	; 0x8d2 <vfprintf+0x276>
 8ca:	88 35       	cpi	r24, 0x58	; 88
 8cc:	09 f0       	breq	.+2      	; 0x8d0 <vfprintf+0x274>
 8ce:	ae c0       	rjmp	.+348    	; 0xa2c <vfprintf+0x3d0>
 8d0:	0b c0       	rjmp	.+22     	; 0x8e8 <vfprintf+0x28c>
 8d2:	80 37       	cpi	r24, 0x70	; 112
 8d4:	21 f0       	breq	.+8      	; 0x8de <vfprintf+0x282>
 8d6:	88 37       	cpi	r24, 0x78	; 120
 8d8:	09 f0       	breq	.+2      	; 0x8dc <vfprintf+0x280>
 8da:	a8 c0       	rjmp	.+336    	; 0xa2c <vfprintf+0x3d0>
 8dc:	01 c0       	rjmp	.+2      	; 0x8e0 <vfprintf+0x284>
 8de:	10 61       	ori	r17, 0x10	; 16
 8e0:	14 ff       	sbrs	r17, 4
 8e2:	09 c0       	rjmp	.+18     	; 0x8f6 <vfprintf+0x29a>
 8e4:	14 60       	ori	r17, 0x04	; 4
 8e6:	07 c0       	rjmp	.+14     	; 0x8f6 <vfprintf+0x29a>
 8e8:	14 ff       	sbrs	r17, 4
 8ea:	08 c0       	rjmp	.+16     	; 0x8fc <vfprintf+0x2a0>
 8ec:	16 60       	ori	r17, 0x06	; 6
 8ee:	06 c0       	rjmp	.+12     	; 0x8fc <vfprintf+0x2a0>
 8f0:	28 e0       	ldi	r18, 0x08	; 8
 8f2:	30 e0       	ldi	r19, 0x00	; 0
 8f4:	05 c0       	rjmp	.+10     	; 0x900 <vfprintf+0x2a4>
 8f6:	20 e1       	ldi	r18, 0x10	; 16
 8f8:	30 e0       	ldi	r19, 0x00	; 0
 8fa:	02 c0       	rjmp	.+4      	; 0x900 <vfprintf+0x2a4>
 8fc:	20 e1       	ldi	r18, 0x10	; 16
 8fe:	32 e0       	ldi	r19, 0x02	; 2
 900:	f5 01       	movw	r30, r10
 902:	17 ff       	sbrs	r17, 7
 904:	07 c0       	rjmp	.+14     	; 0x914 <vfprintf+0x2b8>
 906:	60 81       	ld	r22, Z
 908:	71 81       	ldd	r23, Z+1	; 0x01
 90a:	82 81       	ldd	r24, Z+2	; 0x02
 90c:	93 81       	ldd	r25, Z+3	; 0x03
 90e:	44 e0       	ldi	r20, 0x04	; 4
 910:	50 e0       	ldi	r21, 0x00	; 0
 912:	06 c0       	rjmp	.+12     	; 0x920 <vfprintf+0x2c4>
 914:	60 81       	ld	r22, Z
 916:	71 81       	ldd	r23, Z+1	; 0x01
 918:	80 e0       	ldi	r24, 0x00	; 0
 91a:	90 e0       	ldi	r25, 0x00	; 0
 91c:	42 e0       	ldi	r20, 0x02	; 2
 91e:	50 e0       	ldi	r21, 0x00	; 0
 920:	a4 0e       	add	r10, r20
 922:	b5 1e       	adc	r11, r21
 924:	a2 01       	movw	r20, r4
 926:	0e 94 77 05 	call	0xaee	; 0xaee <__ultoa_invert>
 92a:	d8 2e       	mov	r13, r24
 92c:	d4 18       	sub	r13, r4
 92e:	01 2f       	mov	r16, r17
 930:	0f 77       	andi	r16, 0x7F	; 127
 932:	06 ff       	sbrs	r16, 6
 934:	09 c0       	rjmp	.+18     	; 0x948 <vfprintf+0x2ec>
 936:	0e 7f       	andi	r16, 0xFE	; 254
 938:	df 14       	cp	r13, r15
 93a:	30 f4       	brcc	.+12     	; 0x948 <vfprintf+0x2ec>
 93c:	04 ff       	sbrs	r16, 4
 93e:	06 c0       	rjmp	.+12     	; 0x94c <vfprintf+0x2f0>
 940:	02 fd       	sbrc	r16, 2
 942:	04 c0       	rjmp	.+8      	; 0x94c <vfprintf+0x2f0>
 944:	0f 7e       	andi	r16, 0xEF	; 239
 946:	02 c0       	rjmp	.+4      	; 0x94c <vfprintf+0x2f0>
 948:	1d 2d       	mov	r17, r13
 94a:	01 c0       	rjmp	.+2      	; 0x94e <vfprintf+0x2f2>
 94c:	1f 2d       	mov	r17, r15
 94e:	80 2f       	mov	r24, r16
 950:	90 e0       	ldi	r25, 0x00	; 0
 952:	04 ff       	sbrs	r16, 4
 954:	0c c0       	rjmp	.+24     	; 0x96e <vfprintf+0x312>
 956:	fe 01       	movw	r30, r28
 958:	ed 0d       	add	r30, r13
 95a:	f1 1d       	adc	r31, r1
 95c:	20 81       	ld	r18, Z
 95e:	20 33       	cpi	r18, 0x30	; 48
 960:	11 f4       	brne	.+4      	; 0x966 <vfprintf+0x30a>
 962:	09 7e       	andi	r16, 0xE9	; 233
 964:	09 c0       	rjmp	.+18     	; 0x978 <vfprintf+0x31c>
 966:	02 ff       	sbrs	r16, 2
 968:	06 c0       	rjmp	.+12     	; 0x976 <vfprintf+0x31a>
 96a:	1e 5f       	subi	r17, 0xFE	; 254
 96c:	05 c0       	rjmp	.+10     	; 0x978 <vfprintf+0x31c>
 96e:	86 78       	andi	r24, 0x86	; 134
 970:	90 70       	andi	r25, 0x00	; 0
 972:	00 97       	sbiw	r24, 0x00	; 0
 974:	09 f0       	breq	.+2      	; 0x978 <vfprintf+0x31c>
 976:	1f 5f       	subi	r17, 0xFF	; 255
 978:	80 2e       	mov	r8, r16
 97a:	99 24       	eor	r9, r9
 97c:	03 fd       	sbrc	r16, 3
 97e:	12 c0       	rjmp	.+36     	; 0x9a4 <vfprintf+0x348>
 980:	00 ff       	sbrs	r16, 0
 982:	0d c0       	rjmp	.+26     	; 0x99e <vfprintf+0x342>
 984:	fd 2c       	mov	r15, r13
 986:	1e 15       	cp	r17, r14
 988:	50 f4       	brcc	.+20     	; 0x99e <vfprintf+0x342>
 98a:	fe 0c       	add	r15, r14
 98c:	f1 1a       	sub	r15, r17
 98e:	1e 2d       	mov	r17, r14
 990:	06 c0       	rjmp	.+12     	; 0x99e <vfprintf+0x342>
 992:	80 e2       	ldi	r24, 0x20	; 32
 994:	90 e0       	ldi	r25, 0x00	; 0
 996:	b3 01       	movw	r22, r6
 998:	0e 94 4b 05 	call	0xa96	; 0xa96 <fputc>
 99c:	1f 5f       	subi	r17, 0xFF	; 255
 99e:	1e 15       	cp	r17, r14
 9a0:	c0 f3       	brcs	.-16     	; 0x992 <vfprintf+0x336>
 9a2:	04 c0       	rjmp	.+8      	; 0x9ac <vfprintf+0x350>
 9a4:	1e 15       	cp	r17, r14
 9a6:	10 f4       	brcc	.+4      	; 0x9ac <vfprintf+0x350>
 9a8:	e1 1a       	sub	r14, r17
 9aa:	01 c0       	rjmp	.+2      	; 0x9ae <vfprintf+0x352>
 9ac:	ee 24       	eor	r14, r14
 9ae:	84 fe       	sbrs	r8, 4
 9b0:	0f c0       	rjmp	.+30     	; 0x9d0 <vfprintf+0x374>
 9b2:	80 e3       	ldi	r24, 0x30	; 48
 9b4:	90 e0       	ldi	r25, 0x00	; 0
 9b6:	b3 01       	movw	r22, r6
 9b8:	0e 94 4b 05 	call	0xa96	; 0xa96 <fputc>
 9bc:	82 fe       	sbrs	r8, 2
 9be:	1f c0       	rjmp	.+62     	; 0x9fe <vfprintf+0x3a2>
 9c0:	81 fe       	sbrs	r8, 1
 9c2:	03 c0       	rjmp	.+6      	; 0x9ca <vfprintf+0x36e>
 9c4:	88 e5       	ldi	r24, 0x58	; 88
 9c6:	90 e0       	ldi	r25, 0x00	; 0
 9c8:	10 c0       	rjmp	.+32     	; 0x9ea <vfprintf+0x38e>
 9ca:	88 e7       	ldi	r24, 0x78	; 120
 9cc:	90 e0       	ldi	r25, 0x00	; 0
 9ce:	0d c0       	rjmp	.+26     	; 0x9ea <vfprintf+0x38e>
 9d0:	c4 01       	movw	r24, r8
 9d2:	86 78       	andi	r24, 0x86	; 134
 9d4:	90 70       	andi	r25, 0x00	; 0
 9d6:	00 97       	sbiw	r24, 0x00	; 0
 9d8:	91 f0       	breq	.+36     	; 0x9fe <vfprintf+0x3a2>
 9da:	81 fc       	sbrc	r8, 1
 9dc:	02 c0       	rjmp	.+4      	; 0x9e2 <vfprintf+0x386>
 9de:	80 e2       	ldi	r24, 0x20	; 32
 9e0:	01 c0       	rjmp	.+2      	; 0x9e4 <vfprintf+0x388>
 9e2:	8b e2       	ldi	r24, 0x2B	; 43
 9e4:	07 fd       	sbrc	r16, 7
 9e6:	8d e2       	ldi	r24, 0x2D	; 45
 9e8:	90 e0       	ldi	r25, 0x00	; 0
 9ea:	b3 01       	movw	r22, r6
 9ec:	0e 94 4b 05 	call	0xa96	; 0xa96 <fputc>
 9f0:	06 c0       	rjmp	.+12     	; 0x9fe <vfprintf+0x3a2>
 9f2:	80 e3       	ldi	r24, 0x30	; 48
 9f4:	90 e0       	ldi	r25, 0x00	; 0
 9f6:	b3 01       	movw	r22, r6
 9f8:	0e 94 4b 05 	call	0xa96	; 0xa96 <fputc>
 9fc:	fa 94       	dec	r15
 9fe:	df 14       	cp	r13, r15
 a00:	c0 f3       	brcs	.-16     	; 0x9f2 <vfprintf+0x396>
 a02:	da 94       	dec	r13
 a04:	f2 01       	movw	r30, r4
 a06:	ed 0d       	add	r30, r13
 a08:	f1 1d       	adc	r31, r1
 a0a:	80 81       	ld	r24, Z
 a0c:	90 e0       	ldi	r25, 0x00	; 0
 a0e:	b3 01       	movw	r22, r6
 a10:	0e 94 4b 05 	call	0xa96	; 0xa96 <fputc>
 a14:	dd 20       	and	r13, r13
 a16:	a9 f7       	brne	.-22     	; 0xa02 <vfprintf+0x3a6>
 a18:	06 c0       	rjmp	.+12     	; 0xa26 <vfprintf+0x3ca>
 a1a:	80 e2       	ldi	r24, 0x20	; 32
 a1c:	90 e0       	ldi	r25, 0x00	; 0
 a1e:	b3 01       	movw	r22, r6
 a20:	0e 94 4b 05 	call	0xa96	; 0xa96 <fputc>
 a24:	ea 94       	dec	r14
 a26:	ee 20       	and	r14, r14
 a28:	c1 f7       	brne	.-16     	; 0xa1a <vfprintf+0x3be>
 a2a:	40 ce       	rjmp	.-896    	; 0x6ac <vfprintf+0x50>
 a2c:	f3 01       	movw	r30, r6
 a2e:	86 81       	ldd	r24, Z+6	; 0x06
 a30:	97 81       	ldd	r25, Z+7	; 0x07
 a32:	02 c0       	rjmp	.+4      	; 0xa38 <vfprintf+0x3dc>
 a34:	8f ef       	ldi	r24, 0xFF	; 255
 a36:	9f ef       	ldi	r25, 0xFF	; 255
 a38:	2d 96       	adiw	r28, 0x0d	; 13
 a3a:	0f b6       	in	r0, 0x3f	; 63
 a3c:	f8 94       	cli
 a3e:	de bf       	out	0x3e, r29	; 62
 a40:	0f be       	out	0x3f, r0	; 63
 a42:	cd bf       	out	0x3d, r28	; 61
 a44:	df 91       	pop	r29
 a46:	cf 91       	pop	r28
 a48:	1f 91       	pop	r17
 a4a:	0f 91       	pop	r16
 a4c:	ff 90       	pop	r15
 a4e:	ef 90       	pop	r14
 a50:	df 90       	pop	r13
 a52:	cf 90       	pop	r12
 a54:	bf 90       	pop	r11
 a56:	af 90       	pop	r10
 a58:	9f 90       	pop	r9
 a5a:	8f 90       	pop	r8
 a5c:	7f 90       	pop	r7
 a5e:	6f 90       	pop	r6
 a60:	5f 90       	pop	r5
 a62:	4f 90       	pop	r4
 a64:	3f 90       	pop	r3
 a66:	2f 90       	pop	r2
 a68:	08 95       	ret

00000a6a <strnlen_P>:
 a6a:	fc 01       	movw	r30, r24
 a6c:	05 90       	lpm	r0, Z+
 a6e:	61 50       	subi	r22, 0x01	; 1
 a70:	70 40       	sbci	r23, 0x00	; 0
 a72:	01 10       	cpse	r0, r1
 a74:	d8 f7       	brcc	.-10     	; 0xa6c <strnlen_P+0x2>
 a76:	80 95       	com	r24
 a78:	90 95       	com	r25
 a7a:	8e 0f       	add	r24, r30
 a7c:	9f 1f       	adc	r25, r31
 a7e:	08 95       	ret

00000a80 <strnlen>:
 a80:	fc 01       	movw	r30, r24
 a82:	61 50       	subi	r22, 0x01	; 1
 a84:	70 40       	sbci	r23, 0x00	; 0
 a86:	01 90       	ld	r0, Z+
 a88:	01 10       	cpse	r0, r1
 a8a:	d8 f7       	brcc	.-10     	; 0xa82 <strnlen+0x2>
 a8c:	80 95       	com	r24
 a8e:	90 95       	com	r25
 a90:	8e 0f       	add	r24, r30
 a92:	9f 1f       	adc	r25, r31
 a94:	08 95       	ret

00000a96 <fputc>:
 a96:	0f 93       	push	r16
 a98:	1f 93       	push	r17
 a9a:	cf 93       	push	r28
 a9c:	df 93       	push	r29
 a9e:	8c 01       	movw	r16, r24
 aa0:	eb 01       	movw	r28, r22
 aa2:	8b 81       	ldd	r24, Y+3	; 0x03
 aa4:	81 ff       	sbrs	r24, 1
 aa6:	1b c0       	rjmp	.+54     	; 0xade <fputc+0x48>
 aa8:	82 ff       	sbrs	r24, 2
 aaa:	0d c0       	rjmp	.+26     	; 0xac6 <fputc+0x30>
 aac:	2e 81       	ldd	r18, Y+6	; 0x06
 aae:	3f 81       	ldd	r19, Y+7	; 0x07
 ab0:	8c 81       	ldd	r24, Y+4	; 0x04
 ab2:	9d 81       	ldd	r25, Y+5	; 0x05
 ab4:	28 17       	cp	r18, r24
 ab6:	39 07       	cpc	r19, r25
 ab8:	64 f4       	brge	.+24     	; 0xad2 <fputc+0x3c>
 aba:	e8 81       	ld	r30, Y
 abc:	f9 81       	ldd	r31, Y+1	; 0x01
 abe:	01 93       	st	Z+, r16
 ac0:	f9 83       	std	Y+1, r31	; 0x01
 ac2:	e8 83       	st	Y, r30
 ac4:	06 c0       	rjmp	.+12     	; 0xad2 <fputc+0x3c>
 ac6:	e8 85       	ldd	r30, Y+8	; 0x08
 ac8:	f9 85       	ldd	r31, Y+9	; 0x09
 aca:	80 2f       	mov	r24, r16
 acc:	19 95       	eicall
 ace:	00 97       	sbiw	r24, 0x00	; 0
 ad0:	31 f4       	brne	.+12     	; 0xade <fputc+0x48>
 ad2:	8e 81       	ldd	r24, Y+6	; 0x06
 ad4:	9f 81       	ldd	r25, Y+7	; 0x07
 ad6:	01 96       	adiw	r24, 0x01	; 1
 ad8:	9f 83       	std	Y+7, r25	; 0x07
 ada:	8e 83       	std	Y+6, r24	; 0x06
 adc:	02 c0       	rjmp	.+4      	; 0xae2 <fputc+0x4c>
 ade:	0f ef       	ldi	r16, 0xFF	; 255
 ae0:	1f ef       	ldi	r17, 0xFF	; 255
 ae2:	c8 01       	movw	r24, r16
 ae4:	df 91       	pop	r29
 ae6:	cf 91       	pop	r28
 ae8:	1f 91       	pop	r17
 aea:	0f 91       	pop	r16
 aec:	08 95       	ret

00000aee <__ultoa_invert>:
 aee:	fa 01       	movw	r30, r20
 af0:	aa 27       	eor	r26, r26
 af2:	28 30       	cpi	r18, 0x08	; 8
 af4:	51 f1       	breq	.+84     	; 0xb4a <__ultoa_invert+0x5c>
 af6:	20 31       	cpi	r18, 0x10	; 16
 af8:	81 f1       	breq	.+96     	; 0xb5a <__ultoa_invert+0x6c>
 afa:	e8 94       	clt
 afc:	6f 93       	push	r22
 afe:	6e 7f       	andi	r22, 0xFE	; 254
 b00:	6e 5f       	subi	r22, 0xFE	; 254
 b02:	7f 4f       	sbci	r23, 0xFF	; 255
 b04:	8f 4f       	sbci	r24, 0xFF	; 255
 b06:	9f 4f       	sbci	r25, 0xFF	; 255
 b08:	af 4f       	sbci	r26, 0xFF	; 255
 b0a:	b1 e0       	ldi	r27, 0x01	; 1
 b0c:	3e d0       	rcall	.+124    	; 0xb8a <__ultoa_invert+0x9c>
 b0e:	b4 e0       	ldi	r27, 0x04	; 4
 b10:	3c d0       	rcall	.+120    	; 0xb8a <__ultoa_invert+0x9c>
 b12:	67 0f       	add	r22, r23
 b14:	78 1f       	adc	r23, r24
 b16:	89 1f       	adc	r24, r25
 b18:	9a 1f       	adc	r25, r26
 b1a:	a1 1d       	adc	r26, r1
 b1c:	68 0f       	add	r22, r24
 b1e:	79 1f       	adc	r23, r25
 b20:	8a 1f       	adc	r24, r26
 b22:	91 1d       	adc	r25, r1
 b24:	a1 1d       	adc	r26, r1
 b26:	6a 0f       	add	r22, r26
 b28:	71 1d       	adc	r23, r1
 b2a:	81 1d       	adc	r24, r1
 b2c:	91 1d       	adc	r25, r1
 b2e:	a1 1d       	adc	r26, r1
 b30:	20 d0       	rcall	.+64     	; 0xb72 <__ultoa_invert+0x84>
 b32:	09 f4       	brne	.+2      	; 0xb36 <__ultoa_invert+0x48>
 b34:	68 94       	set
 b36:	3f 91       	pop	r19
 b38:	2a e0       	ldi	r18, 0x0A	; 10
 b3a:	26 9f       	mul	r18, r22
 b3c:	11 24       	eor	r1, r1
 b3e:	30 19       	sub	r19, r0
 b40:	30 5d       	subi	r19, 0xD0	; 208
 b42:	31 93       	st	Z+, r19
 b44:	de f6       	brtc	.-74     	; 0xafc <__ultoa_invert+0xe>
 b46:	cf 01       	movw	r24, r30
 b48:	08 95       	ret
 b4a:	46 2f       	mov	r20, r22
 b4c:	47 70       	andi	r20, 0x07	; 7
 b4e:	40 5d       	subi	r20, 0xD0	; 208
 b50:	41 93       	st	Z+, r20
 b52:	b3 e0       	ldi	r27, 0x03	; 3
 b54:	0f d0       	rcall	.+30     	; 0xb74 <__ultoa_invert+0x86>
 b56:	c9 f7       	brne	.-14     	; 0xb4a <__ultoa_invert+0x5c>
 b58:	f6 cf       	rjmp	.-20     	; 0xb46 <__ultoa_invert+0x58>
 b5a:	46 2f       	mov	r20, r22
 b5c:	4f 70       	andi	r20, 0x0F	; 15
 b5e:	40 5d       	subi	r20, 0xD0	; 208
 b60:	4a 33       	cpi	r20, 0x3A	; 58
 b62:	18 f0       	brcs	.+6      	; 0xb6a <__ultoa_invert+0x7c>
 b64:	49 5d       	subi	r20, 0xD9	; 217
 b66:	31 fd       	sbrc	r19, 1
 b68:	40 52       	subi	r20, 0x20	; 32
 b6a:	41 93       	st	Z+, r20
 b6c:	02 d0       	rcall	.+4      	; 0xb72 <__ultoa_invert+0x84>
 b6e:	a9 f7       	brne	.-22     	; 0xb5a <__ultoa_invert+0x6c>
 b70:	ea cf       	rjmp	.-44     	; 0xb46 <__ultoa_invert+0x58>
 b72:	b4 e0       	ldi	r27, 0x04	; 4
 b74:	a6 95       	lsr	r26
 b76:	97 95       	ror	r25
 b78:	87 95       	ror	r24
 b7a:	77 95       	ror	r23
 b7c:	67 95       	ror	r22
 b7e:	ba 95       	dec	r27
 b80:	c9 f7       	brne	.-14     	; 0xb74 <__ultoa_invert+0x86>
 b82:	00 97       	sbiw	r24, 0x00	; 0
 b84:	61 05       	cpc	r22, r1
 b86:	71 05       	cpc	r23, r1
 b88:	08 95       	ret
 b8a:	9b 01       	movw	r18, r22
 b8c:	ac 01       	movw	r20, r24
 b8e:	0a 2e       	mov	r0, r26
 b90:	06 94       	lsr	r0
 b92:	57 95       	ror	r21
 b94:	47 95       	ror	r20
 b96:	37 95       	ror	r19
 b98:	27 95       	ror	r18
 b9a:	ba 95       	dec	r27
 b9c:	c9 f7       	brne	.-14     	; 0xb90 <__ultoa_invert+0xa2>
 b9e:	62 0f       	add	r22, r18
 ba0:	73 1f       	adc	r23, r19
 ba2:	84 1f       	adc	r24, r20
 ba4:	95 1f       	adc	r25, r21
 ba6:	a0 1d       	adc	r26, r0
 ba8:	08 95       	ret

00000baa <_exit>:
 baa:	f8 94       	cli

00000bac <__stop_program>:
 bac:	ff cf       	rjmp	.-2      	; 0xbac <__stop_program>
