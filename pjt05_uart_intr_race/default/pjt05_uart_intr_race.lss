
pjt05_uart_intr_race.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000034  00800200  000002e4  00000378  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002e4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000042  00800234  00800234  000003ac  2**0
                  ALLOC
  3 .stab         000007ec  00000000  00000000  000003ac  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000149  00000000  00000000  00000b98  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000a0  00000000  00000000  00000ce8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000487  00000000  00000000  00000d88  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000171  00000000  00000000  0000120f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002d2  00000000  00000000  00001380  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000a0  00000000  00000000  00001654  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000000b3  00000000  00000000  000016f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000130  00000000  00000000  000017a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000010  00000000  00000000  000018d7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
   4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
   8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
   c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  10:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  14:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  18:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  1c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  20:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  24:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  28:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  2c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  30:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  34:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  38:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  3c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  40:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  44:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  48:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  4c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  50:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  54:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  58:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  5c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  60:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  64:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  68:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  6c:	0c 94 01 01 	jmp	0x202	; 0x202 <__vector_27>
  70:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  74:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  78:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  7c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  80:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  84:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  88:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  8c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  90:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  94:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  98:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  9c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  a0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  a4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  a8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  ac:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  b0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  b4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  b8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  bc:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  c0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  c4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  c8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  cc:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  d0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  d4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  d8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  dc:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  e0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e4 ee       	ldi	r30, 0xE4	; 228
  fc:	f2 e0       	ldi	r31, 0x02	; 2
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a4 33       	cpi	r26, 0x34	; 52
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>
 10e:	1b be       	out	0x3b, r1	; 59

00000110 <__do_clear_bss>:
 110:	12 e0       	ldi	r17, 0x02	; 2
 112:	a4 e3       	ldi	r26, 0x34	; 52
 114:	b2 e0       	ldi	r27, 0x02	; 2
 116:	01 c0       	rjmp	.+2      	; 0x11a <.do_clear_bss_start>

00000118 <.do_clear_bss_loop>:
 118:	1d 92       	st	X+, r1

0000011a <.do_clear_bss_start>:
 11a:	a6 37       	cpi	r26, 0x76	; 118
 11c:	b1 07       	cpc	r27, r17
 11e:	e1 f7       	brne	.-8      	; 0x118 <.do_clear_bss_loop>
 120:	0e 94 46 01 	call	0x28c	; 0x28c <main>
 124:	0c 94 70 01 	jmp	0x2e0	; 0x2e0 <_exit>

00000128 <__bad_interrupt>:
 128:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012c <uart_init>:
#include <avr/io.h>
#include <avr/interrupt.h>
#include "uart.h"

void uart_init() {
	UBRR0H = 0x00; UBRR0L = 0x07;
 12c:	10 92 c5 00 	sts	0x00C5, r1
 130:	87 e0       	ldi	r24, 0x07	; 7
 132:	80 93 c4 00 	sts	0x00C4, r24
	UCSR0A |= (1 << U2X0);
 136:	e0 ec       	ldi	r30, 0xC0	; 192
 138:	f0 e0       	ldi	r31, 0x00	; 0
 13a:	80 81       	ld	r24, Z
 13c:	82 60       	ori	r24, 0x02	; 2
 13e:	80 83       	st	Z, r24
	UCSR0B |= (1 << TXEN0);
 140:	e1 ec       	ldi	r30, 0xC1	; 193
 142:	f0 e0       	ldi	r31, 0x00	; 0
 144:	80 81       	ld	r24, Z
 146:	88 60       	ori	r24, 0x08	; 8
 148:	80 83       	st	Z, r24
	UCSR0B |= (1 << TXCIE0);
 14a:	80 81       	ld	r24, Z
 14c:	80 64       	ori	r24, 0x40	; 64
 14e:	80 83       	st	Z, r24
}
 150:	08 95       	ret

00000152 <uart_putstart>:

char buf[64];
int volatile bufi, txend = 1;

void uart_putstart(char str[]) {
 152:	0f 93       	push	r16
 154:	1f 93       	push	r17
 156:	cf 93       	push	r28
 158:	df 93       	push	r29
 15a:	18 2f       	mov	r17, r24
 15c:	09 2f       	mov	r16, r25
	char ch; int n = strlen(str);
 15e:	e8 2f       	mov	r30, r24
 160:	f9 2f       	mov	r31, r25
 162:	ef 01       	movw	r28, r30
 164:	09 90       	ld	r0, Y+
 166:	00 20       	and	r0, r0
 168:	e9 f7       	brne	.-6      	; 0x164 <uart_putstart+0x12>
 16a:	21 97       	sbiw	r28, 0x01	; 1
 16c:	ce 1b       	sub	r28, r30
 16e:	df 0b       	sbc	r29, r31
	
	while(sizeof(buf) - strlen(buf + bufi) - 1 < n);
 170:	2f e3       	ldi	r18, 0x3F	; 63
 172:	30 e0       	ldi	r19, 0x00	; 0
 174:	a0 91 34 02 	lds	r26, 0x0234
 178:	b0 91 35 02 	lds	r27, 0x0235
 17c:	aa 5c       	subi	r26, 0xCA	; 202
 17e:	bd 4f       	sbci	r27, 0xFD	; 253
 180:	fd 01       	movw	r30, r26
 182:	01 90       	ld	r0, Z+
 184:	00 20       	and	r0, r0
 186:	e9 f7       	brne	.-6      	; 0x182 <uart_putstart+0x30>
 188:	31 97       	sbiw	r30, 0x01	; 1
 18a:	ea 1b       	sub	r30, r26
 18c:	fb 0b       	sbc	r31, r27
 18e:	c9 01       	movw	r24, r18
 190:	8e 1b       	sub	r24, r30
 192:	9f 0b       	sbc	r25, r31
 194:	8c 17       	cp	r24, r28
 196:	9d 07       	cpc	r25, r29
 198:	68 f3       	brcs	.-38     	; 0x174 <uart_putstart+0x22>
	cli();
 19a:	f8 94       	cli
	strcpy(buf, buf + bufi); strcat(buf, str);
 19c:	60 91 34 02 	lds	r22, 0x0234
 1a0:	70 91 35 02 	lds	r23, 0x0235
 1a4:	6a 5c       	subi	r22, 0xCA	; 202
 1a6:	7d 4f       	sbci	r23, 0xFD	; 253
 1a8:	86 e3       	ldi	r24, 0x36	; 54
 1aa:	92 e0       	ldi	r25, 0x02	; 2
 1ac:	0e 94 69 01 	call	0x2d2	; 0x2d2 <strcpy>
 1b0:	86 e3       	ldi	r24, 0x36	; 54
 1b2:	92 e0       	ldi	r25, 0x02	; 2
 1b4:	61 2f       	mov	r22, r17
 1b6:	70 2f       	mov	r23, r16
 1b8:	0e 94 5e 01 	call	0x2bc	; 0x2bc <strcat>
	bufi = 0;
 1bc:	10 92 35 02 	sts	0x0235, r1
 1c0:	10 92 34 02 	sts	0x0234, r1
	
	if(txend) {
 1c4:	80 91 31 02 	lds	r24, 0x0231
 1c8:	90 91 32 02 	lds	r25, 0x0232
 1cc:	00 97       	sbiw	r24, 0x00	; 0
 1ce:	99 f0       	breq	.+38     	; 0x1f6 <uart_putstart+0xa4>
		txend = 0; ch = buf[bufi++];
 1d0:	10 92 32 02 	sts	0x0232, r1
 1d4:	10 92 31 02 	sts	0x0231, r1
 1d8:	80 91 34 02 	lds	r24, 0x0234
 1dc:	90 91 35 02 	lds	r25, 0x0235
 1e0:	fc 01       	movw	r30, r24
 1e2:	ea 5c       	subi	r30, 0xCA	; 202
 1e4:	fd 4f       	sbci	r31, 0xFD	; 253
 1e6:	20 81       	ld	r18, Z
 1e8:	01 96       	adiw	r24, 0x01	; 1
 1ea:	90 93 35 02 	sts	0x0235, r25
 1ee:	80 93 34 02 	sts	0x0234, r24
		UDR0 = ch;
 1f2:	20 93 c6 00 	sts	0x00C6, r18
	}
	sei();
 1f6:	78 94       	sei
}
 1f8:	df 91       	pop	r29
 1fa:	cf 91       	pop	r28
 1fc:	1f 91       	pop	r17
 1fe:	0f 91       	pop	r16
 200:	08 95       	ret

00000202 <__vector_27>:

ISR(USART0_TX_vect) {
 202:	1f 92       	push	r1
 204:	0f 92       	push	r0
 206:	0f b6       	in	r0, 0x3f	; 63
 208:	0f 92       	push	r0
 20a:	0b b6       	in	r0, 0x3b	; 59
 20c:	0f 92       	push	r0
 20e:	11 24       	eor	r1, r1
 210:	2f 93       	push	r18
 212:	8f 93       	push	r24
 214:	9f 93       	push	r25
 216:	ef 93       	push	r30
 218:	ff 93       	push	r31
	char ch = buf[bufi];
 21a:	e0 91 34 02 	lds	r30, 0x0234
 21e:	f0 91 35 02 	lds	r31, 0x0235
 222:	ea 5c       	subi	r30, 0xCA	; 202
 224:	fd 4f       	sbci	r31, 0xFD	; 253
 226:	20 81       	ld	r18, Z
	if(!ch) {
 228:	22 23       	and	r18, r18
 22a:	71 f4       	brne	.+28     	; 0x248 <__vector_27+0x46>
		bufi = buf[0], txend = 1;
 22c:	80 91 36 02 	lds	r24, 0x0236
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	90 93 35 02 	sts	0x0235, r25
 236:	80 93 34 02 	sts	0x0234, r24
 23a:	81 e0       	ldi	r24, 0x01	; 1
 23c:	90 e0       	ldi	r25, 0x00	; 0
 23e:	90 93 32 02 	sts	0x0232, r25
 242:	80 93 31 02 	sts	0x0231, r24
		return;
 246:	16 c0       	rjmp	.+44     	; 0x274 <__vector_27+0x72>
	}

	if(ch == '\n')	buf[bufi] = '\r';
 248:	2a 30       	cpi	r18, 0x0A	; 10
 24a:	49 f4       	brne	.+18     	; 0x25e <__vector_27+0x5c>
 24c:	e0 91 34 02 	lds	r30, 0x0234
 250:	f0 91 35 02 	lds	r31, 0x0235
 254:	ea 5c       	subi	r30, 0xCA	; 202
 256:	fd 4f       	sbci	r31, 0xFD	; 253
 258:	8d e0       	ldi	r24, 0x0D	; 13
 25a:	80 83       	st	Z, r24
 25c:	09 c0       	rjmp	.+18     	; 0x270 <__vector_27+0x6e>
	else			bufi++;
 25e:	80 91 34 02 	lds	r24, 0x0234
 262:	90 91 35 02 	lds	r25, 0x0235
 266:	01 96       	adiw	r24, 0x01	; 1
 268:	90 93 35 02 	sts	0x0235, r25
 26c:	80 93 34 02 	sts	0x0234, r24
	UDR0 = ch;
 270:	20 93 c6 00 	sts	0x00C6, r18
}
 274:	ff 91       	pop	r31
 276:	ef 91       	pop	r30
 278:	9f 91       	pop	r25
 27a:	8f 91       	pop	r24
 27c:	2f 91       	pop	r18
 27e:	0f 90       	pop	r0
 280:	0b be       	out	0x3b, r0	; 59
 282:	0f 90       	pop	r0
 284:	0f be       	out	0x3f, r0	; 63
 286:	0f 90       	pop	r0
 288:	1f 90       	pop	r1
 28a:	18 95       	reti

0000028c <main>:
#include <avr/io.h>
#include "uart.h"

int main() {
	int i;
	uart_init();
 28c:	0e 94 96 00 	call	0x12c	; 0x12c <uart_init>
	sei();
 290:	78 94       	sei
 292:	ca e0       	ldi	r28, 0x0A	; 10
 294:	d0 e0       	ldi	r29, 0x00	; 0

	for(i = 0;i < 10;i++) {
		uart_putstart("I love you.\n");
 296:	80 e0       	ldi	r24, 0x00	; 0
 298:	92 e0       	ldi	r25, 0x02	; 2
 29a:	0e 94 a9 00 	call	0x152	; 0x152 <uart_putstart>
		uart_putstart("I love me.\n");
 29e:	8d e0       	ldi	r24, 0x0D	; 13
 2a0:	92 e0       	ldi	r25, 0x02	; 2
 2a2:	0e 94 a9 00 	call	0x152	; 0x152 <uart_putstart>
		uart_putstart("he loves her.\n");
 2a6:	89 e1       	ldi	r24, 0x19	; 25
 2a8:	92 e0       	ldi	r25, 0x02	; 2
 2aa:	0e 94 a9 00 	call	0x152	; 0x152 <uart_putstart>
 2ae:	21 97       	sbiw	r28, 0x01	; 1
int main() {
	int i;
	uart_init();
	sei();

	for(i = 0;i < 10;i++) {
 2b0:	91 f7       	brne	.-28     	; 0x296 <main+0xa>
		uart_putstart("I love you.\n");
		uart_putstart("I love me.\n");
		uart_putstart("he loves her.\n");
	}

	uart_putstart("End !!!\n");
 2b2:	88 e2       	ldi	r24, 0x28	; 40
 2b4:	92 e0       	ldi	r25, 0x02	; 2
 2b6:	0e 94 a9 00 	call	0x152	; 0x152 <uart_putstart>
 2ba:	ff cf       	rjmp	.-2      	; 0x2ba <main+0x2e>

000002bc <strcat>:
 2bc:	fb 01       	movw	r30, r22
 2be:	dc 01       	movw	r26, r24
 2c0:	0d 90       	ld	r0, X+
 2c2:	00 20       	and	r0, r0
 2c4:	e9 f7       	brne	.-6      	; 0x2c0 <strcat+0x4>
 2c6:	11 97       	sbiw	r26, 0x01	; 1
 2c8:	01 90       	ld	r0, Z+
 2ca:	0d 92       	st	X+, r0
 2cc:	00 20       	and	r0, r0
 2ce:	e1 f7       	brne	.-8      	; 0x2c8 <strcat+0xc>
 2d0:	08 95       	ret

000002d2 <strcpy>:
 2d2:	fb 01       	movw	r30, r22
 2d4:	dc 01       	movw	r26, r24
 2d6:	01 90       	ld	r0, Z+
 2d8:	0d 92       	st	X+, r0
 2da:	00 20       	and	r0, r0
 2dc:	e1 f7       	brne	.-8      	; 0x2d6 <strcpy+0x4>
 2de:	08 95       	ret

000002e0 <_exit>:
 2e0:	f8 94       	cli

000002e2 <__stop_program>:
 2e2:	ff cf       	rjmp	.-2      	; 0x2e2 <__stop_program>
