
Pjt04_uart_intr_volatile.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000034  00800200  00000256  000002ea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000256  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000042  00800234  00800234  0000031e  2**0
                  ALLOC
  3 .stab         00000750  00000000  00000000  00000320  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000000e7  00000000  00000000  00000a70  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000a0  00000000  00000000  00000b58  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000479  00000000  00000000  00000bf8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000197  00000000  00000000  00001071  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002df  00000000  00000000  00001208  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000008c  00000000  00000000  000014e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000000b7  00000000  00000000  00001574  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000cb  00000000  00000000  0000162b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000010  00000000  00000000  000016f6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
   4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
   8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
   c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  10:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  14:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  18:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  1c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  20:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  24:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  28:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  2c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  30:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  34:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  38:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  3c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  40:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  44:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  48:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  4c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  50:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  54:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  58:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  5c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  60:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  64:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  68:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  6c:	0c 94 cc 00 	jmp	0x198	; 0x198 <__vector_27>
  70:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  74:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  78:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  7c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  80:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  84:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  88:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  8c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  90:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  94:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  98:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  9c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  a0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  a4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  a8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  ac:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  b0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  b4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  b8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  bc:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  c0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  c4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  c8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  cc:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  d0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  d4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  d8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  dc:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  e0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e6 e5       	ldi	r30, 0x56	; 86
  fc:	f2 e0       	ldi	r31, 0x02	; 2
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a4 33       	cpi	r26, 0x34	; 52
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>
 10e:	1b be       	out	0x3b, r1	; 59

00000110 <__do_clear_bss>:
 110:	12 e0       	ldi	r17, 0x02	; 2
 112:	a4 e3       	ldi	r26, 0x34	; 52
 114:	b2 e0       	ldi	r27, 0x02	; 2
 116:	01 c0       	rjmp	.+2      	; 0x11a <.do_clear_bss_start>

00000118 <.do_clear_bss_loop>:
 118:	1d 92       	st	X+, r1

0000011a <.do_clear_bss_start>:
 11a:	a6 37       	cpi	r26, 0x76	; 118
 11c:	b1 07       	cpc	r27, r17
 11e:	e1 f7       	brne	.-8      	; 0x118 <.do_clear_bss_loop>
 120:	0e 94 0a 01 	call	0x214	; 0x214 <main>
 124:	0c 94 29 01 	jmp	0x252	; 0x252 <_exit>

00000128 <__bad_interrupt>:
 128:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012c <uart_init>:
#include <avr/io.h>
#include <avr/interrupt.h>
#include "uart.h"

void uart_init() {
	UBRR0H = 0x00; UBRR0L = 0x07;
 12c:	10 92 c5 00 	sts	0x00C5, r1
 130:	87 e0       	ldi	r24, 0x07	; 7
 132:	80 93 c4 00 	sts	0x00C4, r24
	UCSR0A |= (1 << U2X0);
 136:	e0 ec       	ldi	r30, 0xC0	; 192
 138:	f0 e0       	ldi	r31, 0x00	; 0
 13a:	80 81       	ld	r24, Z
 13c:	82 60       	ori	r24, 0x02	; 2
 13e:	80 83       	st	Z, r24
	UCSR0B |= (1 << TXEN0);
 140:	e1 ec       	ldi	r30, 0xC1	; 193
 142:	f0 e0       	ldi	r31, 0x00	; 0
 144:	80 81       	ld	r24, Z
 146:	88 60       	ori	r24, 0x08	; 8
 148:	80 83       	st	Z, r24
	UCSR0B |= (1 << TXCIE0);
 14a:	80 81       	ld	r24, Z
 14c:	80 64       	ori	r24, 0x40	; 64
 14e:	80 83       	st	Z, r24
}
 150:	08 95       	ret

00000152 <uart_putstart>:

char buf[64];
int volatile bufi, txend = 1;

void uart_putstart(char str[]) {
 152:	bc 01       	movw	r22, r24
	char ch;
	
	while(!txend); txend = 0;
 154:	80 91 31 02 	lds	r24, 0x0231
 158:	90 91 32 02 	lds	r25, 0x0232
 15c:	00 97       	sbiw	r24, 0x00	; 0
 15e:	d1 f3       	breq	.-12     	; 0x154 <uart_putstart+0x2>
 160:	10 92 32 02 	sts	0x0232, r1
 164:	10 92 31 02 	sts	0x0231, r1

	strcpy(buf, str);	bufi = 0;
 168:	86 e3       	ldi	r24, 0x36	; 54
 16a:	92 e0       	ldi	r25, 0x02	; 2
 16c:	0e 94 22 01 	call	0x244	; 0x244 <strcpy>
 170:	10 92 35 02 	sts	0x0235, r1
 174:	10 92 34 02 	sts	0x0234, r1
	ch = buf[bufi++];
 178:	80 91 34 02 	lds	r24, 0x0234
 17c:	90 91 35 02 	lds	r25, 0x0235
 180:	fc 01       	movw	r30, r24
 182:	ea 5c       	subi	r30, 0xCA	; 202
 184:	fd 4f       	sbci	r31, 0xFD	; 253
 186:	20 81       	ld	r18, Z
 188:	01 96       	adiw	r24, 0x01	; 1
 18a:	90 93 35 02 	sts	0x0235, r25
 18e:	80 93 34 02 	sts	0x0234, r24

	UDR0 = ch;
 192:	20 93 c6 00 	sts	0x00C6, r18
}
 196:	08 95       	ret

00000198 <__vector_27>:

ISR(USART0_TX_vect) {
 198:	1f 92       	push	r1
 19a:	0f 92       	push	r0
 19c:	0f b6       	in	r0, 0x3f	; 63
 19e:	0f 92       	push	r0
 1a0:	0b b6       	in	r0, 0x3b	; 59
 1a2:	0f 92       	push	r0
 1a4:	11 24       	eor	r1, r1
 1a6:	2f 93       	push	r18
 1a8:	8f 93       	push	r24
 1aa:	9f 93       	push	r25
 1ac:	ef 93       	push	r30
 1ae:	ff 93       	push	r31
	char ch = buf[bufi];
 1b0:	e0 91 34 02 	lds	r30, 0x0234
 1b4:	f0 91 35 02 	lds	r31, 0x0235
 1b8:	ea 5c       	subi	r30, 0xCA	; 202
 1ba:	fd 4f       	sbci	r31, 0xFD	; 253
 1bc:	20 81       	ld	r18, Z
	if(!ch) {
 1be:	22 23       	and	r18, r18
 1c0:	39 f4       	brne	.+14     	; 0x1d0 <__vector_27+0x38>
		txend = 1; return;
 1c2:	81 e0       	ldi	r24, 0x01	; 1
 1c4:	90 e0       	ldi	r25, 0x00	; 0
 1c6:	90 93 32 02 	sts	0x0232, r25
 1ca:	80 93 31 02 	sts	0x0231, r24
 1ce:	16 c0       	rjmp	.+44     	; 0x1fc <__vector_27+0x64>
	}

	if(ch == '\n')	buf[bufi] = '\r';
 1d0:	2a 30       	cpi	r18, 0x0A	; 10
 1d2:	49 f4       	brne	.+18     	; 0x1e6 <__vector_27+0x4e>
 1d4:	e0 91 34 02 	lds	r30, 0x0234
 1d8:	f0 91 35 02 	lds	r31, 0x0235
 1dc:	ea 5c       	subi	r30, 0xCA	; 202
 1de:	fd 4f       	sbci	r31, 0xFD	; 253
 1e0:	8d e0       	ldi	r24, 0x0D	; 13
 1e2:	80 83       	st	Z, r24
 1e4:	09 c0       	rjmp	.+18     	; 0x1f8 <__vector_27+0x60>
	else			bufi++;
 1e6:	80 91 34 02 	lds	r24, 0x0234
 1ea:	90 91 35 02 	lds	r25, 0x0235
 1ee:	01 96       	adiw	r24, 0x01	; 1
 1f0:	90 93 35 02 	sts	0x0235, r25
 1f4:	80 93 34 02 	sts	0x0234, r24
	UDR0 = ch;
 1f8:	20 93 c6 00 	sts	0x00C6, r18
}
 1fc:	ff 91       	pop	r31
 1fe:	ef 91       	pop	r30
 200:	9f 91       	pop	r25
 202:	8f 91       	pop	r24
 204:	2f 91       	pop	r18
 206:	0f 90       	pop	r0
 208:	0b be       	out	0x3b, r0	; 59
 20a:	0f 90       	pop	r0
 20c:	0f be       	out	0x3f, r0	; 63
 20e:	0f 90       	pop	r0
 210:	1f 90       	pop	r1
 212:	18 95       	reti

00000214 <main>:
#include <avr/io.h>
#include "uart.h"

int main() {
	int i;
	uart_init();
 214:	0e 94 96 00 	call	0x12c	; 0x12c <uart_init>
	sei();
 218:	78 94       	sei
 21a:	ca e0       	ldi	r28, 0x0A	; 10
 21c:	d0 e0       	ldi	r29, 0x00	; 0

	for(i = 0;i < 10;i++) {
		uart_putstart("I love you.\n");
 21e:	80 e0       	ldi	r24, 0x00	; 0
 220:	92 e0       	ldi	r25, 0x02	; 2
 222:	0e 94 a9 00 	call	0x152	; 0x152 <uart_putstart>
		uart_putstart("I love me.\n");
 226:	8d e0       	ldi	r24, 0x0D	; 13
 228:	92 e0       	ldi	r25, 0x02	; 2
 22a:	0e 94 a9 00 	call	0x152	; 0x152 <uart_putstart>
		uart_putstart("he loves her.\n");
 22e:	89 e1       	ldi	r24, 0x19	; 25
 230:	92 e0       	ldi	r25, 0x02	; 2
 232:	0e 94 a9 00 	call	0x152	; 0x152 <uart_putstart>
 236:	21 97       	sbiw	r28, 0x01	; 1
int main() {
	int i;
	uart_init();
	sei();

	for(i = 0;i < 10;i++) {
 238:	91 f7       	brne	.-28     	; 0x21e <main+0xa>
		uart_putstart("I love you.\n");
		uart_putstart("I love me.\n");
		uart_putstart("he loves her.\n");
	}

	uart_putstart("End !!!\n");
 23a:	88 e2       	ldi	r24, 0x28	; 40
 23c:	92 e0       	ldi	r25, 0x02	; 2
 23e:	0e 94 a9 00 	call	0x152	; 0x152 <uart_putstart>
 242:	ff cf       	rjmp	.-2      	; 0x242 <main+0x2e>

00000244 <strcpy>:
 244:	fb 01       	movw	r30, r22
 246:	dc 01       	movw	r26, r24
 248:	01 90       	ld	r0, Z+
 24a:	0d 92       	st	X+, r0
 24c:	00 20       	and	r0, r0
 24e:	e1 f7       	brne	.-8      	; 0x248 <strcpy+0x4>
 250:	08 95       	ret

00000252 <_exit>:
 252:	f8 94       	cli

00000254 <__stop_program>:
 254:	ff cf       	rjmp	.-2      	; 0x254 <__stop_program>
